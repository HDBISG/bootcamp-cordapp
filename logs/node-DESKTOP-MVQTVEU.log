[INFO ] 2020-02-19T10:25:48,210Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/generated-custom-cordapps/20200219-102547.312/custom-cordapp_1_4_32261888-1eda-45ca-acaa-3e6f2b7de054.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T10:25:48,339Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/generated-custom-cordapps/20200219-102547.312/custom-cordapp_1_4_32261888-1eda-45ca-acaa-3e6f2b7de054.jar {}
[INFO ] 2020-02-19T10:25:48,449Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T10:28:09,447Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/generated-custom-cordapps/20200219-102808.644/custom-cordapp_1_4_5f1d6f59-a2eb-4021-a850-0d7a545f28ce.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T10:28:09,573Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/generated-custom-cordapps/20200219-102808.644/custom-cordapp_1_4_5f1d6f59-a2eb-4021-a850-0d7a545f28ce.jar {}
[INFO ] 2020-02-19T10:28:09,674Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-02-19T10:28:11,753Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.EcoState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate EcoState with @BelongsToContract(bootcamp.EcoIssueContract.class) to remove this warning. {}
[WARN ] 2020-02-19T10:28:11,764Z [Test worker] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.EcoIssueContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[WARN ] 2020-02-19T10:28:12,742Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.EcoState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate EcoState with @BelongsToContract(bootcamp.EcoIssueContract.class) to remove this warning. {}
[ERROR] 2020-02-19T10:28:12,763Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 0575714A0F557DB51CEF2D9BF224E103CF927DD0D71C8ED23FC6564C606ABD99. [errorCode=12vbp8z, moreInformationAt=https://errors.corda.net/OS/4.0/12vbp8z] {}
java.lang.IllegalArgumentException: Unrecognized command
	at bootcamp.EcoIssueContract.verify(EcoContract.java:25) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestLedgerDSLInterpreter.recordTransactionWithTransactionMap(TestDSL.kt:257) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestLedgerDSLInterpreter._unverifiedTransaction(TestDSL.kt:295) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.input(TransactionDSLInterpreter.kt:150) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:32) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_181]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_181]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_181]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_181]
[WARN ] 2020-02-19T10:28:12,768Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.EcoState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate EcoState with @BelongsToContract(bootcamp.EcoIssueContract.class) to remove this warning. {}
[WARN ] 2020-02-19T10:28:12,773Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.EcoState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate EcoState with @BelongsToContract(bootcamp.EcoIssueContract.class) to remove this warning. {}
[WARN ] 2020-02-19T10:28:12,788Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.EcoState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate EcoState with @BelongsToContract(bootcamp.EcoIssueContract.class) to remove this warning. {}
[WARN ] 2020-02-19T10:28:12,790Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.EcoState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate EcoState with @BelongsToContract(bootcamp.EcoIssueContract.class) to remove this warning. {}
[WARN ] 2020-02-19T10:28:12,797Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.EcoState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate EcoState with @BelongsToContract(bootcamp.EcoIssueContract.class) to remove this warning. {}
[WARN ] 2020-02-19T10:28:12,802Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.EcoState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate EcoState with @BelongsToContract(bootcamp.EcoIssueContract.class) to remove this warning. {}
[WARN ] 2020-02-19T10:28:12,805Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.EcoState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate EcoState with @BelongsToContract(bootcamp.EcoIssueContract.class) to remove this warning. {}
[WARN ] 2020-02-19T10:28:12,809Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.EcoState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate EcoState with @BelongsToContract(bootcamp.EcoIssueContract.class) to remove this warning. {}
[INFO ] 2020-02-19T10:31:37,000Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/generated-custom-cordapps/20200219-103136.087/custom-cordapp_1_4_d6dcd58e-5ebf-4ace-a8c6-e4764863107a.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T10:31:37,306Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/generated-custom-cordapps/20200219-103136.087/custom-cordapp_1_4_d6dcd58e-5ebf-4ace-a8c6-e4764863107a.jar {}
[INFO ] 2020-02-19T10:31:37,425Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T10:44:39,039Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in D:\FTI\Git\CorDApp\bootcamp-cordapp ... {}
[INFO ] 2020-02-19T10:44:45,989Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-104433.717\nodes\0\cordapps] {}
[INFO ] 2020-02-19T10:44:45,994Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-104433.717/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T10:44:46,017Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-104433.717/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T10:44:46,083Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T10:44:46,628Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T10:44:46,681Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:44:46,681Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:44:46,796Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T10:44:33.670Z
      epoch=1
  } {}
[INFO ] 2020-02-19T10:44:50,883Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T10:44:50,888Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-104433.717\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T10:44:50,889Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T10:44:50,891Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T10:44:50,966Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:44:50,973Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:44:52,640Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:44:53,230Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T10:44:53,285Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T10:44:53,310Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T10:44:53,310Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T10:44:53,608Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T10:44:53,619Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T10:44:53,619Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109093619) {}
[INFO ] 2020-02-19T10:44:53,625Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:44:53,782Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109093619) {}
[INFO ] 2020-02-19T10:44:53,856Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T10:44:53,871Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109093619) {}
[INFO ] 2020-02-19T10:44:53,894Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:44:54,350Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=868DBD2F06A854FB6647AB20B5DC085E8FCDC977BC300D31076DD5892CB92932 uploader=app filename=null {}
[INFO ] 2020-02-19T10:44:54,354Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-19T10:44:54,357Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-19T10:44:54,640Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109093619) {}
[INFO ] 2020-02-19T10:44:54,655Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109093619) {}
[INFO ] 2020-02-19T10:44:54,656Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:44:54,656Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109093619) {}
[INFO ] 2020-02-19T10:44:54,657Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:44:54,666Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-104433.717\nodes\1\cordapps] {}
[INFO ] 2020-02-19T10:44:54,667Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-104433.717/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T10:44:54,667Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-104433.717/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T10:44:54,701Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T10:44:54,710Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T10:44:54,754Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:44:54,754Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:44:54,757Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T10:44:33.670Z
      epoch=1
  } {}
[INFO ] 2020-02-19T10:44:55,396Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T10:44:55,400Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-104433.717\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T10:44:55,400Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T10:44:55,414Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T10:44:55,418Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:44:55,419Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:44:55,511Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:44:55,523Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T10:44:55,525Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T10:44:55,526Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-19T10:44:55,546Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:44:55,546Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:44:55,664Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:44:55,668Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T10:44:55,668Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109095668) {}
[INFO ] 2020-02-19T10:44:55,671Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:44:55,680Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109095668) {}
[INFO ] 2020-02-19T10:44:55,696Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T10:44:55,700Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109095668) {}
[INFO ] 2020-02-19T10:44:55,706Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:44:55,852Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=868DBD2F06A854FB6647AB20B5DC085E8FCDC977BC300D31076DD5892CB92932 uploader=app filename=null {}
[INFO ] 2020-02-19T10:44:55,859Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109095668) {}
[INFO ] 2020-02-19T10:44:55,862Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109093619) {}
[INFO ] 2020-02-19T10:44:55,864Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:44:55,874Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109095668) {}
[INFO ] 2020-02-19T10:44:55,876Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:44:55,887Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109095668) {}
[INFO ] 2020-02-19T10:44:55,887Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:44:55,887Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109095668) {}
[INFO ] 2020-02-19T10:44:55,888Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:44:55,893Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-104433.717\nodes\2\cordapps] {}
[INFO ] 2020-02-19T10:44:55,894Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-104433.717/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T10:44:55,894Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-104433.717/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T10:44:55,917Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T10:44:55,927Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T10:44:55,960Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:44:55,961Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:44:55,965Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T10:44:33.670Z
      epoch=1
  } {}
[INFO ] 2020-02-19T10:44:56,480Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T10:44:56,483Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-104433.717\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T10:44:56,483Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T10:44:56,488Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T10:44:56,491Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:44:56,491Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:44:56,577Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:44:56,587Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T10:44:56,590Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T10:44:56,590Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-19T10:44:56,612Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:44:56,613Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:44:56,722Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:44:56,727Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T10:44:56,727Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109096727) {}
[INFO ] 2020-02-19T10:44:56,729Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:44:56,736Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109096727) {}
[INFO ] 2020-02-19T10:44:56,750Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T10:44:56,754Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109096727) {}
[INFO ] 2020-02-19T10:44:56,759Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:44:56,872Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=868DBD2F06A854FB6647AB20B5DC085E8FCDC977BC300D31076DD5892CB92932 uploader=app filename=null {}
[INFO ] 2020-02-19T10:44:56,878Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109096727) {}
[INFO ] 2020-02-19T10:44:56,880Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109093619) {}
[INFO ] 2020-02-19T10:44:56,882Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:44:56,892Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109096727) {}
[INFO ] 2020-02-19T10:44:56,893Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:44:56,904Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109095668) {}
[INFO ] 2020-02-19T10:44:56,905Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:44:56,914Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109096727) {}
[INFO ] 2020-02-19T10:44:56,916Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:44:56,925Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109096727) {}
[INFO ] 2020-02-19T10:44:56,925Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:44:56,926Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109096727) {}
[INFO ] 2020-02-19T10:44:56,926Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-19T10:44:57,166Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=530e132e-09c6-4f48-89f2-d3557e776c8b, invocation_id=057aa862-bda0-4cea-aac4-7c3f9a733a37, invocation_timestamp=2020-02-19T10:44:56.951Z, origin=Only For Testing, session_id=057aa862-bda0-4cea-aac4-7c3f9a733a37, session_timestamp=2020-02-19T10:44:56.951Z, thread-id=146}
[WARN ] 2020-02-19T10:44:57,166Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.EcoIssueContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=530e132e-09c6-4f48-89f2-d3557e776c8b, invocation_id=057aa862-bda0-4cea-aac4-7c3f9a733a37, invocation_timestamp=2020-02-19T10:44:56.951Z, origin=Only For Testing, session_id=057aa862-bda0-4cea-aac4-7c3f9a733a37, session_timestamp=2020-02-19T10:44:56.951Z, thread-id=146}
[INFO ] 2020-02-19T10:44:58,696Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=530e132e-09c6-4f48-89f2-d3557e776c8b, invocation_id=057aa862-bda0-4cea-aac4-7c3f9a733a37, invocation_timestamp=2020-02-19T10:44:56.951Z, origin=Only For Testing, session_id=057aa862-bda0-4cea-aac4-7c3f9a733a37, session_timestamp=2020-02-19T10:44:56.951Z, thread-id=146}
java.lang.IllegalArgumentException: Do not provide flow sessions for the local node. FinalityFlow will record the notarised transaction locally.
	at net.corda.core.flows.FinalityFlow.call(FinalityFlow.kt:124) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.FinalityFlow.call(FinalityFlow.kt:39) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowInitiator.call(EcoIssueFlowInitiator.java:71) ~[main/:?]
	at bootcamp.EcoIssueFlowInitiator.call(EcoIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-19T10:44:58,700Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [530e132e-09c6-4f48-89f2-d3557e776c8b] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=057aa862-bda0-4cea-aac4-7c3f9a733a37, timestamp: 2020-02-19T10:44:56.951Z, entityType: Invocation, sessionId=057aa862-bda0-4cea-aac4-7c3f9a733a37, timestamp: 2020-02-19T10:44:56.951Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={SessionId(toLong=-2704125766824765115)=Uninitiated(party=O=Mock Company 1, L=London, C=GB, initiatingSubFlow=Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=868DBD2F06A854FB6647AB20B5DC085E8FCDC977BC300D31076DD5892CB92932), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-2704125766824765115), additionalEntropy=-1837100683610783329)}, subFlowStack=[Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=868DBD2F06A854FB6647AB20B5DC085E8FCDC977BC300D31076DD5892CB92932), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=1F742B9D1A0E7F164C669DBB763D1538A53177A07C5C28BFE8CC34608189E982), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.EcoIssueFlowInitiator@5837f695, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=c603ea1a-5de0-478d-a13e-e772610f25e1) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=530e132e-09c6-4f48-89f2-d3557e776c8b, invocation_id=057aa862-bda0-4cea-aac4-7c3f9a733a37, invocation_timestamp=2020-02-19T10:44:56.951Z, origin=Only For Testing, session_id=057aa862-bda0-4cea-aac4-7c3f9a733a37, session_timestamp=2020-02-19T10:44:56.951Z, thread-id=146}
[INFO ] 2020-02-19T10:44:58,702Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [530e132e-09c6-4f48-89f2-d3557e776c8b] has error [0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=530e132e-09c6-4f48-89f2-d3557e776c8b, invocation_id=057aa862-bda0-4cea-aac4-7c3f9a733a37, invocation_timestamp=2020-02-19T10:44:56.951Z, origin=Only For Testing, session_id=057aa862-bda0-4cea-aac4-7c3f9a733a37, session_timestamp=2020-02-19T10:44:56.951Z, thread-id=146}
java.lang.IllegalArgumentException: Do not provide flow sessions for the local node. FinalityFlow will record the notarised transaction locally.
	at net.corda.core.flows.FinalityFlow.call(FinalityFlow.kt:124) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.FinalityFlow.call(FinalityFlow.kt:39) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowInitiator.call(EcoIssueFlowInitiator.java:71) ~[main/:?]
	at bootcamp.EcoIssueFlowInitiator.call(EcoIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-19T10:44:58,704Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [530e132e-09c6-4f48-89f2-d3557e776c8b] error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=530e132e-09c6-4f48-89f2-d3557e776c8b, invocation_id=057aa862-bda0-4cea-aac4-7c3f9a733a37, invocation_timestamp=2020-02-19T10:44:56.951Z, origin=Only For Testing, session_id=057aa862-bda0-4cea-aac4-7c3f9a733a37, session_timestamp=2020-02-19T10:44:56.951Z, thread-id=146}
[WARN ] 2020-02-19T10:44:58,727Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [530e132e-09c6-4f48-89f2-d3557e776c8b] errored, dumping all transitions:

 --- Transition of flow [530e132e-09c6-4f48-89f2-d3557e776c8b] ---
  Timestamp: 2020-02-19T10:44:57.129Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[530e132e-09c6-4f48-89f2-d3557e776c8b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=057aa862-bda0-4cea-aac4-7c3f9a733a37, timestamp: 2020-02-19T10:44:56.951Z, entityType: Invocation, sessionId=057aa862-bda0-4cea-aac4-7c3f9a733a37, timestamp: 2020-02-19T10:44:56.951Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=868DBD2F06A854FB6647AB20B5DC085E8FCDC977BC300D31076DD5892CB92932), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=1F742B9D1A0E7F164C669DBB763D1538A53177A07C5C28BFE8CC34608189E982), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7c045fe5])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7c045fe5])
    SignalFlowHasStarted(flowId=[530e132e-09c6-4f48-89f2-d3557e776c8b])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7c045fe5]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [530e132e-09c6-4f48-89f2-d3557e776c8b] ---
  Timestamp: 2020-02-19T10:44:58.578Z
  Event: InitiateFlow(party=O=Mock Company 1, L=London, C=GB)
  Actions: 
    AddSessionBinding(flowId=[530e132e-09c6-4f48-89f2-d3557e776c8b], sessionId=SessionId(toLong=-2704125766824765115))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-2704125766824765115): 
    null
    Uninitiated(party=O=Mock Company 1, L=London, C=GB, initiatingSubFlow=Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=868DBD2F06A854FB6647AB20B5DC085E8FCDC977BC300D31076DD5892CB92932), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-2704125766824765115), additionalEntropy=-1837100683610783329)


 --- Transition of flow [530e132e-09c6-4f48-89f2-d3557e776c8b] ---
  Timestamp: 2020-02-19T10:44:58.682Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=868DBD2F06A854FB6647AB20B5DC085E8FCDC977BC300D31076DD5892CB92932), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=868DBD2F06A854FB6647AB20B5DC085E8FCDC977BC300D31076DD5892CB92932), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [530e132e-09c6-4f48-89f2-d3557e776c8b] ---
  Timestamp: 2020-02-19T10:44:58.688Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=868DBD2F06A854FB6647AB20B5DC085E8FCDC977BC300D31076DD5892CB92932), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=868DBD2F06A854FB6647AB20B5DC085E8FCDC977BC300D31076DD5892CB92932), isEnabledTimedFlow=false)]


 --- Transition of flow [530e132e-09c6-4f48-89f2-d3557e776c8b] ---
  Timestamp: 2020-02-19T10:44:58.695Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.FinalityFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=868DBD2F06A854FB6647AB20B5DC085E8FCDC977BC300D31076DD5892CB92932), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=868DBD2F06A854FB6647AB20B5DC085E8FCDC977BC300D31076DD5892CB92932), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.core.flows.FinalityFlow, classToInitiateWith=class net.corda.core.flows.FinalityFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-core-4.0), subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [530e132e-09c6-4f48-89f2-d3557e776c8b] ---
  Timestamp: 2020-02-19T10:44:58.696Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=868DBD2F06A854FB6647AB20B5DC085E8FCDC977BC300D31076DD5892CB92932), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.core.flows.FinalityFlow, classToInitiateWith=class net.corda.core.flows.FinalityFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-core-4.0), subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=868DBD2F06A854FB6647AB20B5DC085E8FCDC977BC300D31076DD5892CB92932), isEnabledTimedFlow=false)]


 --- Transition of flow [530e132e-09c6-4f48-89f2-d3557e776c8b] ---
  Timestamp: 2020-02-19T10:44:58.706Z
  Event: Error(exception=java.lang.IllegalArgumentException: Do not provide flow sessions for the local node. FinalityFlow will record the notarised transaction locally.)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=3264870520939477351, exception=java.lang.IllegalArgumentException: Do not provide flow sessions for the local node. FinalityFlow will record the notarised transaction locally.)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [530e132e-09c6-4f48-89f2-d3557e776c8b] ---
  Timestamp: 2020-02-19T10:44:58.711Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [530e132e-09c6-4f48-89f2-d3557e776c8b] ---
  Timestamp: 2020-02-19T10:44:58.713Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=530e132e-09c6-4f48-89f2-d3557e776c8b, invocation_id=057aa862-bda0-4cea-aac4-7c3f9a733a37, invocation_timestamp=2020-02-19T10:44:56.951Z, origin=Only For Testing, session_id=057aa862-bda0-4cea-aac4-7c3f9a733a37, session_timestamp=2020-02-19T10:44:56.951Z, thread-id=146}
[WARN ] 2020-02-19T10:44:58,727Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [530e132e-09c6-4f48-89f2-d3557e776c8b] error [errorCode=1s5uan7, moreInformationAt=https://errors.corda.net/OS/4.0/1s5uan7] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=530e132e-09c6-4f48-89f2-d3557e776c8b, invocation_id=057aa862-bda0-4cea-aac4-7c3f9a733a37, invocation_timestamp=2020-02-19T10:44:56.951Z, origin=Only For Testing, session_id=057aa862-bda0-4cea-aac4-7c3f9a733a37, session_timestamp=2020-02-19T10:44:56.951Z, thread-id=146}
java.lang.IllegalArgumentException: Do not provide flow sessions for the local node. FinalityFlow will record the notarised transaction locally.
	at net.corda.core.flows.FinalityFlow.call(FinalityFlow.kt:124) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.FinalityFlow.call(FinalityFlow.kt:39) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowInitiator.call(EcoIssueFlowInitiator.java:71) ~[main/:?]
	at bootcamp.EcoIssueFlowInitiator.call(EcoIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-19T10:44:58,733Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=530e132e-09c6-4f48-89f2-d3557e776c8b, invocation_id=057aa862-bda0-4cea-aac4-7c3f9a733a37, invocation_timestamp=2020-02-19T10:44:56.951Z, origin=Only For Testing, session_id=057aa862-bda0-4cea-aac4-7c3f9a733a37, session_timestamp=2020-02-19T10:44:56.951Z, thread-id=146}
[WARN ] 2020-02-19T10:44:58,784Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [530e132e-09c6-4f48-89f2-d3557e776c8b] errored, dumping all transitions:

 --- Transition of flow [530e132e-09c6-4f48-89f2-d3557e776c8b] ---
  Timestamp: 2020-02-19T10:44:57.129Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[530e132e-09c6-4f48-89f2-d3557e776c8b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=057aa862-bda0-4cea-aac4-7c3f9a733a37, timestamp: 2020-02-19T10:44:56.951Z, entityType: Invocation, sessionId=057aa862-bda0-4cea-aac4-7c3f9a733a37, timestamp: 2020-02-19T10:44:56.951Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=868DBD2F06A854FB6647AB20B5DC085E8FCDC977BC300D31076DD5892CB92932), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=1F742B9D1A0E7F164C669DBB763D1538A53177A07C5C28BFE8CC34608189E982), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7c045fe5])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7c045fe5])
    SignalFlowHasStarted(flowId=[530e132e-09c6-4f48-89f2-d3557e776c8b])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7c045fe5]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [530e132e-09c6-4f48-89f2-d3557e776c8b] ---
  Timestamp: 2020-02-19T10:44:58.578Z
  Event: InitiateFlow(party=O=Mock Company 1, L=London, C=GB)
  Actions: 
    AddSessionBinding(flowId=[530e132e-09c6-4f48-89f2-d3557e776c8b], sessionId=SessionId(toLong=-2704125766824765115))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-2704125766824765115): 
    null
    Uninitiated(party=O=Mock Company 1, L=London, C=GB, initiatingSubFlow=Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=868DBD2F06A854FB6647AB20B5DC085E8FCDC977BC300D31076DD5892CB92932), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-2704125766824765115), additionalEntropy=-1837100683610783329)


 --- Transition of flow [530e132e-09c6-4f48-89f2-d3557e776c8b] ---
  Timestamp: 2020-02-19T10:44:58.682Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=868DBD2F06A854FB6647AB20B5DC085E8FCDC977BC300D31076DD5892CB92932), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=868DBD2F06A854FB6647AB20B5DC085E8FCDC977BC300D31076DD5892CB92932), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [530e132e-09c6-4f48-89f2-d3557e776c8b] ---
  Timestamp: 2020-02-19T10:44:58.688Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=868DBD2F06A854FB6647AB20B5DC085E8FCDC977BC300D31076DD5892CB92932), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=868DBD2F06A854FB6647AB20B5DC085E8FCDC977BC300D31076DD5892CB92932), isEnabledTimedFlow=false)]


 --- Transition of flow [530e132e-09c6-4f48-89f2-d3557e776c8b] ---
  Timestamp: 2020-02-19T10:44:58.695Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.FinalityFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=868DBD2F06A854FB6647AB20B5DC085E8FCDC977BC300D31076DD5892CB92932), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=868DBD2F06A854FB6647AB20B5DC085E8FCDC977BC300D31076DD5892CB92932), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.core.flows.FinalityFlow, classToInitiateWith=class net.corda.core.flows.FinalityFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-core-4.0), subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [530e132e-09c6-4f48-89f2-d3557e776c8b] ---
  Timestamp: 2020-02-19T10:44:58.696Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=868DBD2F06A854FB6647AB20B5DC085E8FCDC977BC300D31076DD5892CB92932), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.core.flows.FinalityFlow, classToInitiateWith=class net.corda.core.flows.FinalityFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-core-4.0), subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=868DBD2F06A854FB6647AB20B5DC085E8FCDC977BC300D31076DD5892CB92932), isEnabledTimedFlow=false)]


 --- Transition of flow [530e132e-09c6-4f48-89f2-d3557e776c8b] ---
  Timestamp: 2020-02-19T10:44:58.706Z
  Event: Error(exception=java.lang.IllegalArgumentException: Do not provide flow sessions for the local node. FinalityFlow will record the notarised transaction locally.)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=3264870520939477351, exception=java.lang.IllegalArgumentException: Do not provide flow sessions for the local node. FinalityFlow will record the notarised transaction locally.)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [530e132e-09c6-4f48-89f2-d3557e776c8b] ---
  Timestamp: 2020-02-19T10:44:58.711Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [530e132e-09c6-4f48-89f2-d3557e776c8b] ---
  Timestamp: 2020-02-19T10:44:58.713Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [530e132e-09c6-4f48-89f2-d3557e776c8b] ---
  Timestamp: 2020-02-19T10:44:58.780Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=3264870520939477351)], sessions=[], senderUUID=c603ea1a-5de0-478d-a13e-e772610f25e1)
    CreateTransaction
    RemoveCheckpoint(id=[530e132e-09c6-4f48-89f2-d3557e776c8b])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=530e132e-09c6-4f48-89f2-d3557e776c8b)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-2704125766824765115)])
    RemoveFlow(flowId=[530e132e-09c6-4f48-89f2-d3557e776c8b], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=3264870520939477351, exception=java.lang.IllegalArgumentException: Do not provide flow sessions for the local node. FinalityFlow will record the notarised transaction locally.)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=057aa862-bda0-4cea-aac4-7c3f9a733a37, timestamp: 2020-02-19T10:44:56.951Z, entityType: Invocation, sessionId=057aa862-bda0-4cea-aac4-7c3f9a733a37, timestamp: 2020-02-19T10:44:56.951Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={SessionId(toLong=-2704125766824765115)=Uninitiated(party=O=Mock Company 1, L=London, C=GB, initiatingSubFlow=Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=868DBD2F06A854FB6647AB20B5DC085E8FCDC977BC300D31076DD5892CB92932), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-2704125766824765115), additionalEntropy=-1837100683610783329)}, subFlowStack=[Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=868DBD2F06A854FB6647AB20B5DC085E8FCDC977BC300D31076DD5892CB92932), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=1F742B9D1A0E7F164C669DBB763D1538A53177A07C5C28BFE8CC34608189E982), errorState=Errored(errors=[FlowError(errorId=3264870520939477351, exception=java.lang.IllegalArgumentException: Do not provide flow sessions for the local node. FinalityFlow will record the notarised transaction locally.)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.EcoIssueFlowInitiator@5837f695, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=c603ea1a-5de0-478d-a13e-e772610f25e1))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=530e132e-09c6-4f48-89f2-d3557e776c8b, invocation_id=057aa862-bda0-4cea-aac4-7c3f9a733a37, invocation_timestamp=2020-02-19T10:44:56.951Z, origin=Only For Testing, session_id=057aa862-bda0-4cea-aac4-7c3f9a733a37, session_timestamp=2020-02-19T10:44:56.951Z, thread-id=146}
[WARN ] 2020-02-19T10:44:58,784Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [530e132e-09c6-4f48-89f2-d3557e776c8b] error [errorCode=1s5uan7, moreInformationAt=https://errors.corda.net/OS/4.0/1s5uan7] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=530e132e-09c6-4f48-89f2-d3557e776c8b, invocation_id=057aa862-bda0-4cea-aac4-7c3f9a733a37, invocation_timestamp=2020-02-19T10:44:56.951Z, origin=Only For Testing, session_id=057aa862-bda0-4cea-aac4-7c3f9a733a37, session_timestamp=2020-02-19T10:44:56.951Z, thread-id=146}
java.lang.IllegalArgumentException: Do not provide flow sessions for the local node. FinalityFlow will record the notarised transaction locally.
	at net.corda.core.flows.FinalityFlow.call(FinalityFlow.kt:124) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.FinalityFlow.call(FinalityFlow.kt:39) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowInitiator.call(EcoIssueFlowInitiator.java:71) ~[main/:?]
	at bootcamp.EcoIssueFlowInitiator.call(EcoIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-19T10:54:01,840Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in D:\FTI\Git\CorDApp\bootcamp-cordapp ... {}
[INFO ] 2020-02-19T10:54:08,417Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-105347.973\nodes\0\cordapps] {}
[INFO ] 2020-02-19T10:54:08,423Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-105347.973/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T10:54:08,448Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-105347.973/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T10:54:08,515Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T10:54:09,091Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T10:54:09,167Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:54:09,168Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:54:09,309Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T10:53:47.922Z
      epoch=1
  } {}
[INFO ] 2020-02-19T10:54:13,133Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T10:54:13,143Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-105347.973\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T10:54:13,143Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T10:54:13,145Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T10:54:13,211Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:54:13,223Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:54:14,782Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:54:15,274Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T10:54:15,321Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T10:54:15,341Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T10:54:15,341Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T10:54:15,585Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T10:54:15,596Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T10:54:15,596Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109655596) {}
[INFO ] 2020-02-19T10:54:15,603Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:54:15,742Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109655596) {}
[INFO ] 2020-02-19T10:54:15,804Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T10:54:15,819Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109655596) {}
[INFO ] 2020-02-19T10:54:15,846Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:54:16,735Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4DFC6F3CA8083A771E3E1FB1C2445BE2D011A826217DA155ED8BF5E65964350B uploader=app filename=null {}
[INFO ] 2020-02-19T10:54:16,739Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-19T10:54:16,743Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-19T10:54:17,065Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109655596) {}
[INFO ] 2020-02-19T10:54:17,080Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109655596) {}
[INFO ] 2020-02-19T10:54:17,082Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:54:17,082Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109655596) {}
[INFO ] 2020-02-19T10:54:17,082Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:54:17,095Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-105347.973\nodes\1\cordapps] {}
[INFO ] 2020-02-19T10:54:17,095Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-105347.973/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T10:54:17,096Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-105347.973/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T10:54:17,121Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T10:54:17,129Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T10:54:17,173Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:54:17,174Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:54:17,178Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T10:53:47.922Z
      epoch=1
  } {}
[INFO ] 2020-02-19T10:54:17,713Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T10:54:17,716Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-105347.973\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T10:54:17,716Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T10:54:17,718Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T10:54:17,721Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:54:17,721Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:54:17,815Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:54:17,829Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T10:54:17,831Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T10:54:17,832Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-19T10:54:17,857Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:54:17,858Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:54:17,969Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:54:17,974Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T10:54:17,974Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109657974) {}
[INFO ] 2020-02-19T10:54:17,976Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:54:17,982Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109657974) {}
[INFO ] 2020-02-19T10:54:17,997Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T10:54:18,000Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109657974) {}
[INFO ] 2020-02-19T10:54:18,005Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:54:18,122Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4DFC6F3CA8083A771E3E1FB1C2445BE2D011A826217DA155ED8BF5E65964350B uploader=app filename=null {}
[INFO ] 2020-02-19T10:54:18,130Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109657974) {}
[INFO ] 2020-02-19T10:54:18,133Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109655596) {}
[INFO ] 2020-02-19T10:54:18,135Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:54:18,145Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109657974) {}
[INFO ] 2020-02-19T10:54:18,146Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:54:18,154Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109657974) {}
[INFO ] 2020-02-19T10:54:18,154Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:54:18,154Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109657974) {}
[INFO ] 2020-02-19T10:54:18,154Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:54:18,159Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-105347.973\nodes\2\cordapps] {}
[INFO ] 2020-02-19T10:54:18,159Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-105347.973/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T10:54:18,159Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-105347.973/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T10:54:18,184Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T10:54:18,196Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T10:54:18,229Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:54:18,229Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:54:18,232Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T10:53:47.922Z
      epoch=1
  } {}
[INFO ] 2020-02-19T10:54:18,653Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T10:54:18,655Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-105347.973\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T10:54:18,656Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T10:54:18,659Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T10:54:18,662Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:54:18,662Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:54:18,743Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:54:18,752Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T10:54:18,755Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T10:54:18,755Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-19T10:54:18,775Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:54:18,776Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:54:18,893Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:54:18,899Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T10:54:18,899Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109658899) {}
[INFO ] 2020-02-19T10:54:18,901Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:54:18,910Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109658899) {}
[INFO ] 2020-02-19T10:54:18,921Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T10:54:18,925Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109658899) {}
[INFO ] 2020-02-19T10:54:18,931Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:54:19,040Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=4DFC6F3CA8083A771E3E1FB1C2445BE2D011A826217DA155ED8BF5E65964350B uploader=app filename=null {}
[INFO ] 2020-02-19T10:54:19,048Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109658899) {}
[INFO ] 2020-02-19T10:54:19,051Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109655596) {}
[INFO ] 2020-02-19T10:54:19,053Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:54:19,064Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109658899) {}
[INFO ] 2020-02-19T10:54:19,065Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:54:19,075Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109657974) {}
[INFO ] 2020-02-19T10:54:19,076Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:54:19,084Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109658899) {}
[INFO ] 2020-02-19T10:54:19,086Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:54:19,095Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109658899) {}
[INFO ] 2020-02-19T10:54:19,095Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:54:19,095Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109658899) {}
[INFO ] 2020-02-19T10:54:19,095Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-19T10:54:19,289Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d6d1cae0-18ce-4b83-9512-dfb347a2a004, invocation_id=f92f7b8f-ef14-4835-bfbd-961e7319a955, invocation_timestamp=2020-02-19T10:54:19.125Z, origin=Only For Testing, session_id=f92f7b8f-ef14-4835-bfbd-961e7319a955, session_timestamp=2020-02-19T10:54:19.125Z, thread-id=147}
[WARN ] 2020-02-19T10:54:19,289Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.EcoIssueContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d6d1cae0-18ce-4b83-9512-dfb347a2a004, invocation_id=f92f7b8f-ef14-4835-bfbd-961e7319a955, invocation_timestamp=2020-02-19T10:54:19.125Z, origin=Only For Testing, session_id=f92f7b8f-ef14-4835-bfbd-961e7319a955, session_timestamp=2020-02-19T10:54:19.125Z, thread-id=147}
[INFO ] 2020-02-19T10:54:20,407Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d6d1cae0-18ce-4b83-9512-dfb347a2a004, invocation_id=f92f7b8f-ef14-4835-bfbd-961e7319a955, invocation_timestamp=2020-02-19T10:54:19.125Z, origin=Only For Testing, session_id=f92f7b8f-ef14-4835-bfbd-961e7319a955, session_timestamp=2020-02-19T10:54:19.125Z, thread-id=147}
java.lang.IllegalArgumentException: The Initiator of CollectSignaturesFlow must pass in exactly the sessions required to sign the transaction.
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:110) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:64) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowInitiator.call(EcoIssueFlowInitiator.java:68) ~[main/:?]
	at bootcamp.EcoIssueFlowInitiator.call(EcoIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-19T10:54:20,409Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [d6d1cae0-18ce-4b83-9512-dfb347a2a004] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=f92f7b8f-ef14-4835-bfbd-961e7319a955, timestamp: 2020-02-19T10:54:19.125Z, entityType: Invocation, sessionId=f92f7b8f-ef14-4835-bfbd-961e7319a955, timestamp: 2020-02-19T10:54:19.125Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={SessionId(toLong=-4917010887122150370)=Uninitiated(party=O=Mock Company 1, L=London, C=GB, initiatingSubFlow=Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=4DFC6F3CA8083A771E3E1FB1C2445BE2D011A826217DA155ED8BF5E65964350B), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-4917010887122150370), additionalEntropy=-3049593464456414381)}, subFlowStack=[Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=4DFC6F3CA8083A771E3E1FB1C2445BE2D011A826217DA155ED8BF5E65964350B), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=E3FE8768071B19D5620553962020EFD601C1A06AB9952AA842B4D4321D6F199A), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.EcoIssueFlowInitiator@5555710e, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=0189b649-b89e-4fba-8689-e94a4bed55ff) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d6d1cae0-18ce-4b83-9512-dfb347a2a004, invocation_id=f92f7b8f-ef14-4835-bfbd-961e7319a955, invocation_timestamp=2020-02-19T10:54:19.125Z, origin=Only For Testing, session_id=f92f7b8f-ef14-4835-bfbd-961e7319a955, session_timestamp=2020-02-19T10:54:19.125Z, thread-id=147}
[INFO ] 2020-02-19T10:54:20,411Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [d6d1cae0-18ce-4b83-9512-dfb347a2a004] has error [0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d6d1cae0-18ce-4b83-9512-dfb347a2a004, invocation_id=f92f7b8f-ef14-4835-bfbd-961e7319a955, invocation_timestamp=2020-02-19T10:54:19.125Z, origin=Only For Testing, session_id=f92f7b8f-ef14-4835-bfbd-961e7319a955, session_timestamp=2020-02-19T10:54:19.125Z, thread-id=147}
java.lang.IllegalArgumentException: The Initiator of CollectSignaturesFlow must pass in exactly the sessions required to sign the transaction.
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:110) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:64) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowInitiator.call(EcoIssueFlowInitiator.java:68) ~[main/:?]
	at bootcamp.EcoIssueFlowInitiator.call(EcoIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-19T10:54:20,411Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [d6d1cae0-18ce-4b83-9512-dfb347a2a004] error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d6d1cae0-18ce-4b83-9512-dfb347a2a004, invocation_id=f92f7b8f-ef14-4835-bfbd-961e7319a955, invocation_timestamp=2020-02-19T10:54:19.125Z, origin=Only For Testing, session_id=f92f7b8f-ef14-4835-bfbd-961e7319a955, session_timestamp=2020-02-19T10:54:19.125Z, thread-id=147}
[WARN ] 2020-02-19T10:54:20,426Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [d6d1cae0-18ce-4b83-9512-dfb347a2a004] errored, dumping all transitions:

 --- Transition of flow [d6d1cae0-18ce-4b83-9512-dfb347a2a004] ---
  Timestamp: 2020-02-19T10:54:19.259Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[d6d1cae0-18ce-4b83-9512-dfb347a2a004], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=f92f7b8f-ef14-4835-bfbd-961e7319a955, timestamp: 2020-02-19T10:54:19.125Z, entityType: Invocation, sessionId=f92f7b8f-ef14-4835-bfbd-961e7319a955, timestamp: 2020-02-19T10:54:19.125Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=4DFC6F3CA8083A771E3E1FB1C2445BE2D011A826217DA155ED8BF5E65964350B), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=E3FE8768071B19D5620553962020EFD601C1A06AB9952AA842B4D4321D6F199A), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@33a7c36c])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@33a7c36c])
    SignalFlowHasStarted(flowId=[d6d1cae0-18ce-4b83-9512-dfb347a2a004])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@33a7c36c]
    []
isAnyCheckpointPersisted: 
    false
    true


 --- Transition of flow [d6d1cae0-18ce-4b83-9512-dfb347a2a004] ---
  Timestamp: 2020-02-19T10:54:20.315Z
  Event: InitiateFlow(party=O=Mock Company 1, L=London, C=GB)
  Actions: 
    AddSessionBinding(flowId=[d6d1cae0-18ce-4b83-9512-dfb347a2a004], sessionId=SessionId(toLong=-4917010887122150370))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4917010887122150370): 
    null
    Uninitiated(party=O=Mock Company 1, L=London, C=GB, initiatingSubFlow=Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=4DFC6F3CA8083A771E3E1FB1C2445BE2D011A826217DA155ED8BF5E65964350B), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-4917010887122150370), additionalEntropy=-3049593464456414381)


 --- Transition of flow [d6d1cae0-18ce-4b83-9512-dfb347a2a004] ---
  Timestamp: 2020-02-19T10:54:20.399Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=4DFC6F3CA8083A771E3E1FB1C2445BE2D011A826217DA155ED8BF5E65964350B), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=4DFC6F3CA8083A771E3E1FB1C2445BE2D011A826217DA155ED8BF5E65964350B), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [d6d1cae0-18ce-4b83-9512-dfb347a2a004] ---
  Timestamp: 2020-02-19T10:54:20.407Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=4DFC6F3CA8083A771E3E1FB1C2445BE2D011A826217DA155ED8BF5E65964350B), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=4DFC6F3CA8083A771E3E1FB1C2445BE2D011A826217DA155ED8BF5E65964350B), isEnabledTimedFlow=false)]


 --- Transition of flow [d6d1cae0-18ce-4b83-9512-dfb347a2a004] ---
  Timestamp: 2020-02-19T10:54:20.413Z
  Event: Error(exception=java.lang.IllegalArgumentException: The Initiator of CollectSignaturesFlow must pass in exactly the sessions required to sign the transaction.)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-7656234938158468247, exception=java.lang.IllegalArgumentException: The Initiator of CollectSignaturesFlow must pass in exactly the sessions required to sign the transaction.)], propagatedIndex=0, propagating=false)


 --- Transition of flow [d6d1cae0-18ce-4b83-9512-dfb347a2a004] ---
  Timestamp: 2020-02-19T10:54:20.417Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [d6d1cae0-18ce-4b83-9512-dfb347a2a004] ---
  Timestamp: 2020-02-19T10:54:20.419Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d6d1cae0-18ce-4b83-9512-dfb347a2a004, invocation_id=f92f7b8f-ef14-4835-bfbd-961e7319a955, invocation_timestamp=2020-02-19T10:54:19.125Z, origin=Only For Testing, session_id=f92f7b8f-ef14-4835-bfbd-961e7319a955, session_timestamp=2020-02-19T10:54:19.125Z, thread-id=147}
[WARN ] 2020-02-19T10:54:20,426Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [d6d1cae0-18ce-4b83-9512-dfb347a2a004] error [errorCode=1okv3sz, moreInformationAt=https://errors.corda.net/OS/4.0/1okv3sz] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d6d1cae0-18ce-4b83-9512-dfb347a2a004, invocation_id=f92f7b8f-ef14-4835-bfbd-961e7319a955, invocation_timestamp=2020-02-19T10:54:19.125Z, origin=Only For Testing, session_id=f92f7b8f-ef14-4835-bfbd-961e7319a955, session_timestamp=2020-02-19T10:54:19.125Z, thread-id=147}
java.lang.IllegalArgumentException: The Initiator of CollectSignaturesFlow must pass in exactly the sessions required to sign the transaction.
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:110) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:64) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowInitiator.call(EcoIssueFlowInitiator.java:68) ~[main/:?]
	at bootcamp.EcoIssueFlowInitiator.call(EcoIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-19T10:54:20,430Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d6d1cae0-18ce-4b83-9512-dfb347a2a004, invocation_id=f92f7b8f-ef14-4835-bfbd-961e7319a955, invocation_timestamp=2020-02-19T10:54:19.125Z, origin=Only For Testing, session_id=f92f7b8f-ef14-4835-bfbd-961e7319a955, session_timestamp=2020-02-19T10:54:19.125Z, thread-id=147}
[WARN ] 2020-02-19T10:54:20,461Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [d6d1cae0-18ce-4b83-9512-dfb347a2a004] errored, dumping all transitions:

 --- Transition of flow [d6d1cae0-18ce-4b83-9512-dfb347a2a004] ---
  Timestamp: 2020-02-19T10:54:19.259Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[d6d1cae0-18ce-4b83-9512-dfb347a2a004], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=f92f7b8f-ef14-4835-bfbd-961e7319a955, timestamp: 2020-02-19T10:54:19.125Z, entityType: Invocation, sessionId=f92f7b8f-ef14-4835-bfbd-961e7319a955, timestamp: 2020-02-19T10:54:19.125Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=4DFC6F3CA8083A771E3E1FB1C2445BE2D011A826217DA155ED8BF5E65964350B), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=E3FE8768071B19D5620553962020EFD601C1A06AB9952AA842B4D4321D6F199A), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@33a7c36c])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@33a7c36c])
    SignalFlowHasStarted(flowId=[d6d1cae0-18ce-4b83-9512-dfb347a2a004])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@33a7c36c]
    []
isAnyCheckpointPersisted: 
    false
    true


 --- Transition of flow [d6d1cae0-18ce-4b83-9512-dfb347a2a004] ---
  Timestamp: 2020-02-19T10:54:20.315Z
  Event: InitiateFlow(party=O=Mock Company 1, L=London, C=GB)
  Actions: 
    AddSessionBinding(flowId=[d6d1cae0-18ce-4b83-9512-dfb347a2a004], sessionId=SessionId(toLong=-4917010887122150370))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4917010887122150370): 
    null
    Uninitiated(party=O=Mock Company 1, L=London, C=GB, initiatingSubFlow=Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=4DFC6F3CA8083A771E3E1FB1C2445BE2D011A826217DA155ED8BF5E65964350B), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-4917010887122150370), additionalEntropy=-3049593464456414381)


 --- Transition of flow [d6d1cae0-18ce-4b83-9512-dfb347a2a004] ---
  Timestamp: 2020-02-19T10:54:20.399Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=4DFC6F3CA8083A771E3E1FB1C2445BE2D011A826217DA155ED8BF5E65964350B), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=4DFC6F3CA8083A771E3E1FB1C2445BE2D011A826217DA155ED8BF5E65964350B), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [d6d1cae0-18ce-4b83-9512-dfb347a2a004] ---
  Timestamp: 2020-02-19T10:54:20.407Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=4DFC6F3CA8083A771E3E1FB1C2445BE2D011A826217DA155ED8BF5E65964350B), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.CollectSignaturesFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=4DFC6F3CA8083A771E3E1FB1C2445BE2D011A826217DA155ED8BF5E65964350B), isEnabledTimedFlow=false)]


 --- Transition of flow [d6d1cae0-18ce-4b83-9512-dfb347a2a004] ---
  Timestamp: 2020-02-19T10:54:20.413Z
  Event: Error(exception=java.lang.IllegalArgumentException: The Initiator of CollectSignaturesFlow must pass in exactly the sessions required to sign the transaction.)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-7656234938158468247, exception=java.lang.IllegalArgumentException: The Initiator of CollectSignaturesFlow must pass in exactly the sessions required to sign the transaction.)], propagatedIndex=0, propagating=false)


 --- Transition of flow [d6d1cae0-18ce-4b83-9512-dfb347a2a004] ---
  Timestamp: 2020-02-19T10:54:20.417Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [d6d1cae0-18ce-4b83-9512-dfb347a2a004] ---
  Timestamp: 2020-02-19T10:54:20.419Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [d6d1cae0-18ce-4b83-9512-dfb347a2a004] ---
  Timestamp: 2020-02-19T10:54:20.460Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-7656234938158468247)], sessions=[], senderUUID=0189b649-b89e-4fba-8689-e94a4bed55ff)
    CreateTransaction
    RemoveCheckpoint(id=[d6d1cae0-18ce-4b83-9512-dfb347a2a004])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=d6d1cae0-18ce-4b83-9512-dfb347a2a004)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-4917010887122150370)])
    RemoveFlow(flowId=[d6d1cae0-18ce-4b83-9512-dfb347a2a004], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-7656234938158468247, exception=java.lang.IllegalArgumentException: The Initiator of CollectSignaturesFlow must pass in exactly the sessions required to sign the transaction.)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=f92f7b8f-ef14-4835-bfbd-961e7319a955, timestamp: 2020-02-19T10:54:19.125Z, entityType: Invocation, sessionId=f92f7b8f-ef14-4835-bfbd-961e7319a955, timestamp: 2020-02-19T10:54:19.125Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={SessionId(toLong=-4917010887122150370)=Uninitiated(party=O=Mock Company 1, L=London, C=GB, initiatingSubFlow=Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=4DFC6F3CA8083A771E3E1FB1C2445BE2D011A826217DA155ED8BF5E65964350B), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-4917010887122150370), additionalEntropy=-3049593464456414381)}, subFlowStack=[Initiating(flowClass=class bootcamp.EcoIssueFlowInitiator, classToInitiateWith=class bootcamp.EcoIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=4DFC6F3CA8083A771E3E1FB1C2445BE2D011A826217DA155ED8BF5E65964350B), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=E3FE8768071B19D5620553962020EFD601C1A06AB9952AA842B4D4321D6F199A), errorState=Errored(errors=[FlowError(errorId=-7656234938158468247, exception=java.lang.IllegalArgumentException: The Initiator of CollectSignaturesFlow must pass in exactly the sessions required to sign the transaction.)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.EcoIssueFlowInitiator@5555710e, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=0189b649-b89e-4fba-8689-e94a4bed55ff))
  Continuation: Abort
  Diff between previous and next state:
isRemoved: 
    false
    true
checkpoint.errorState.propagatedIndex: 
    0
    1
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d6d1cae0-18ce-4b83-9512-dfb347a2a004, invocation_id=f92f7b8f-ef14-4835-bfbd-961e7319a955, invocation_timestamp=2020-02-19T10:54:19.125Z, origin=Only For Testing, session_id=f92f7b8f-ef14-4835-bfbd-961e7319a955, session_timestamp=2020-02-19T10:54:19.125Z, thread-id=147}
[WARN ] 2020-02-19T10:54:20,461Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [d6d1cae0-18ce-4b83-9512-dfb347a2a004] error [errorCode=1okv3sz, moreInformationAt=https://errors.corda.net/OS/4.0/1okv3sz] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d6d1cae0-18ce-4b83-9512-dfb347a2a004, invocation_id=f92f7b8f-ef14-4835-bfbd-961e7319a955, invocation_timestamp=2020-02-19T10:54:19.125Z, origin=Only For Testing, session_id=f92f7b8f-ef14-4835-bfbd-961e7319a955, session_timestamp=2020-02-19T10:54:19.125Z, thread-id=147}
java.lang.IllegalArgumentException: The Initiator of CollectSignaturesFlow must pass in exactly the sessions required to sign the transaction.
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:110) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:64) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowInitiator.call(EcoIssueFlowInitiator.java:68) ~[main/:?]
	at bootcamp.EcoIssueFlowInitiator.call(EcoIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-19T10:56:59,399Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in D:\FTI\Git\CorDApp\bootcamp-cordapp ... {}
[INFO ] 2020-02-19T10:57:05,981Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-105654.254\nodes\0\cordapps] {}
[INFO ] 2020-02-19T10:57:05,987Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-105654.254/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T10:57:06,010Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-105654.254/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T10:57:06,084Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T10:57:06,592Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T10:57:06,661Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:57:06,662Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:57:06,793Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T10:56:54.206Z
      epoch=1
  } {}
[INFO ] 2020-02-19T10:57:10,623Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T10:57:10,629Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-105654.254\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T10:57:10,629Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T10:57:10,631Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T10:57:10,694Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:57:10,701Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:57:12,353Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:57:12,857Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T10:57:12,913Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T10:57:12,933Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T10:57:12,934Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T10:57:13,169Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T10:57:13,186Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T10:57:13,186Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109833186) {}
[INFO ] 2020-02-19T10:57:13,201Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:57:13,345Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109833186) {}
[INFO ] 2020-02-19T10:57:13,397Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T10:57:13,410Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109833186) {}
[INFO ] 2020-02-19T10:57:13,435Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:57:13,962Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A uploader=app filename=null {}
[INFO ] 2020-02-19T10:57:13,966Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-19T10:57:13,969Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-19T10:57:14,274Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109833186) {}
[INFO ] 2020-02-19T10:57:14,293Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109833186) {}
[INFO ] 2020-02-19T10:57:14,294Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:57:14,294Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109833186) {}
[INFO ] 2020-02-19T10:57:14,294Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:57:14,307Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-105654.254\nodes\1\cordapps] {}
[INFO ] 2020-02-19T10:57:14,308Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-105654.254/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T10:57:14,308Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-105654.254/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T10:57:14,342Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T10:57:14,351Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T10:57:14,392Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:57:14,392Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:57:14,396Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T10:56:54.206Z
      epoch=1
  } {}
[INFO ] 2020-02-19T10:57:14,984Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T10:57:14,987Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-105654.254\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T10:57:14,987Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T10:57:14,989Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T10:57:14,992Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:57:14,992Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:57:15,081Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:57:15,093Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T10:57:15,096Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T10:57:15,098Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-19T10:57:15,125Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:57:15,125Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:57:15,252Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:57:15,257Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T10:57:15,257Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109835257) {}
[INFO ] 2020-02-19T10:57:15,259Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:57:15,266Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109835257) {}
[INFO ] 2020-02-19T10:57:15,279Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T10:57:15,282Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109835257) {}
[INFO ] 2020-02-19T10:57:15,287Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:57:15,385Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A uploader=app filename=null {}
[INFO ] 2020-02-19T10:57:15,392Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109835257) {}
[INFO ] 2020-02-19T10:57:15,395Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109833186) {}
[INFO ] 2020-02-19T10:57:15,396Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:57:15,406Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109835257) {}
[INFO ] 2020-02-19T10:57:15,408Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:57:15,419Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109835257) {}
[INFO ] 2020-02-19T10:57:15,419Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:57:15,419Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109835257) {}
[INFO ] 2020-02-19T10:57:15,419Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:57:15,430Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-105654.254\nodes\2\cordapps] {}
[INFO ] 2020-02-19T10:57:15,431Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-105654.254/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T10:57:15,431Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-105654.254/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T10:57:15,454Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T10:57:15,461Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T10:57:15,496Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:57:15,496Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:57:15,500Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T10:56:54.206Z
      epoch=1
  } {}
[INFO ] 2020-02-19T10:57:15,933Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T10:57:15,935Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-105654.254\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T10:57:15,936Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T10:57:15,938Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T10:57:15,940Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:57:15,941Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:57:16,015Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:57:16,024Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T10:57:16,026Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T10:57:16,027Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-19T10:57:16,043Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:57:16,043Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:57:16,147Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:57:16,152Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T10:57:16,152Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109836152) {}
[INFO ] 2020-02-19T10:57:16,154Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:57:16,162Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109836152) {}
[INFO ] 2020-02-19T10:57:16,177Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T10:57:16,180Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109836152) {}
[INFO ] 2020-02-19T10:57:16,186Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:57:16,283Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A uploader=app filename=null {}
[INFO ] 2020-02-19T10:57:16,290Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109836152) {}
[INFO ] 2020-02-19T10:57:16,292Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109833186) {}
[INFO ] 2020-02-19T10:57:16,293Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:57:16,302Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109836152) {}
[INFO ] 2020-02-19T10:57:16,303Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:57:16,311Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109835257) {}
[INFO ] 2020-02-19T10:57:16,312Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:57:16,321Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109836152) {}
[INFO ] 2020-02-19T10:57:16,322Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:57:16,331Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109836152) {}
[INFO ] 2020-02-19T10:57:16,331Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:57:16,331Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109836152) {}
[INFO ] 2020-02-19T10:57:16,331Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-19T10:57:16,533Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4053127e-dcfb-43b1-9f22-da4f5b1a492e, invocation_id=99640245-c7d0-4a86-81ba-5277503c39e7, invocation_timestamp=2020-02-19T10:57:16.357Z, origin=Only For Testing, session_id=99640245-c7d0-4a86-81ba-5277503c39e7, session_timestamp=2020-02-19T10:57:16.357Z, thread-id=148}
[WARN ] 2020-02-19T10:57:16,533Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.EcoIssueContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4053127e-dcfb-43b1-9f22-da4f5b1a492e, invocation_id=99640245-c7d0-4a86-81ba-5277503c39e7, invocation_timestamp=2020-02-19T10:57:16.357Z, origin=Only For Testing, session_id=99640245-c7d0-4a86-81ba-5277503c39e7, session_timestamp=2020-02-19T10:57:16.357Z, thread-id=148}
[INFO ] 2020-02-19T10:57:17,675Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4053127e-dcfb-43b1-9f22-da4f5b1a492e, invocation_id=99640245-c7d0-4a86-81ba-5277503c39e7, invocation_timestamp=2020-02-19T10:57:16.357Z, origin=Only For Testing, session_id=99640245-c7d0-4a86-81ba-5277503c39e7, session_timestamp=2020-02-19T10:57:16.357Z, thread-id=148, tx_id=1F1D15935664768024BC5F06ED886278786DDFDA0B053099039C3772D7DB23CB}
[INFO ] 2020-02-19T10:57:17,676Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4053127e-dcfb-43b1-9f22-da4f5b1a492e, invocation_id=99640245-c7d0-4a86-81ba-5277503c39e7, invocation_timestamp=2020-02-19T10:57:16.357Z, origin=Only For Testing, session_id=99640245-c7d0-4a86-81ba-5277503c39e7, session_timestamp=2020-02-19T10:57:16.357Z, thread-id=148, tx_id=1F1D15935664768024BC5F06ED886278786DDFDA0B053099039C3772D7DB23CB}
[INFO ] 2020-02-19T10:57:17,725Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4053127e-dcfb-43b1-9f22-da4f5b1a492e, invocation_id=99640245-c7d0-4a86-81ba-5277503c39e7, invocation_timestamp=2020-02-19T10:57:16.357Z, origin=Only For Testing, session_id=99640245-c7d0-4a86-81ba-5277503c39e7, session_timestamp=2020-02-19T10:57:16.357Z, thread-id=148, tx_id=1F1D15935664768024BC5F06ED886278786DDFDA0B053099039C3772D7DB23CB}
[INFO ] 2020-02-19T10:57:17,874Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=2869177c-1890-4b76-9e54-644bbcf31039, invocation_id=7da07dde-8b28-4482-9ff1-90cc7613a6d4, invocation_timestamp=2020-02-19T10:57:17.825Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7da07dde-8b28-4482-9ff1-90cc7613a6d4, session_timestamp=2020-02-19T10:57:17.825Z, thread-id=148, tx_id=1F1D15935664768024BC5F06ED886278786DDFDA0B053099039C3772D7DB23CB}
[WARN ] 2020-02-19T10:57:17,883Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=2869177c-1890-4b76-9e54-644bbcf31039, invocation_id=7da07dde-8b28-4482-9ff1-90cc7613a6d4, invocation_timestamp=2020-02-19T10:57:17.825Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7da07dde-8b28-4482-9ff1-90cc7613a6d4, session_timestamp=2020-02-19T10:57:17.825Z, thread-id=148, tx_id=1F1D15935664768024BC5F06ED886278786DDFDA0B053099039C3772D7DB23CB}
[INFO ] 2020-02-19T10:57:17,910Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=2869177c-1890-4b76-9e54-644bbcf31039, invocation_id=7da07dde-8b28-4482-9ff1-90cc7613a6d4, invocation_timestamp=2020-02-19T10:57:17.825Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7da07dde-8b28-4482-9ff1-90cc7613a6d4, session_timestamp=2020-02-19T10:57:17.825Z, thread-id=148, tx_id=1F1D15935664768024BC5F06ED886278786DDFDA0B053099039C3772D7DB23CB}
[INFO ] 2020-02-19T10:57:17,934Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4053127e-dcfb-43b1-9f22-da4f5b1a492e, invocation_id=99640245-c7d0-4a86-81ba-5277503c39e7, invocation_timestamp=2020-02-19T10:57:16.357Z, origin=Only For Testing, session_id=99640245-c7d0-4a86-81ba-5277503c39e7, session_timestamp=2020-02-19T10:57:16.357Z, thread-id=148, tx_id=1F1D15935664768024BC5F06ED886278786DDFDA0B053099039C3772D7DB23CB}
[INFO ] 2020-02-19T10:57:17,934Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=4053127e-dcfb-43b1-9f22-da4f5b1a492e, invocation_id=99640245-c7d0-4a86-81ba-5277503c39e7, invocation_timestamp=2020-02-19T10:57:16.357Z, origin=Only For Testing, session_id=99640245-c7d0-4a86-81ba-5277503c39e7, session_timestamp=2020-02-19T10:57:16.357Z, thread-id=148, tx_id=1F1D15935664768024BC5F06ED886278786DDFDA0B053099039C3772D7DB23CB}
[INFO ] 2020-02-19T10:57:17,964Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000002, flow-id=2869177c-1890-4b76-9e54-644bbcf31039, invocation_id=7da07dde-8b28-4482-9ff1-90cc7613a6d4, invocation_timestamp=2020-02-19T10:57:17.825Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7da07dde-8b28-4482-9ff1-90cc7613a6d4, session_timestamp=2020-02-19T10:57:17.825Z, thread-id=148, tx_id=1F1D15935664768024BC5F06ED886278786DDFDA0B053099039C3772D7DB23CB}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=911339476928386091) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-19T10:57:17,968Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [2869177c-1890-4b76-9e54-644bbcf31039] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7da07dde-8b28-4482-9ff1-90cc7613a6d4, timestamp: 2020-02-19T10:57:17.825Z, entityType: Invocation, sessionId=7da07dde-8b28-4482-9ff1-90cc7613a6d4, timestamp: 2020-02-19T10:57:17.825Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=911339476928386091)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-4949501175416695997--287133916660666707)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=911339476928386091))]), frozenFiber=77E841B9DBC00A6FED45E2006E87A3CAFEE9008C702971F244DBEC077C9ADB31), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.EcoIssueFlowResponder@4da6d0fa, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2ae4e953], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=3dca9003-0996-4073-8e53-a099c37520ed) {fiber-id=10000002, flow-id=2869177c-1890-4b76-9e54-644bbcf31039, invocation_id=7da07dde-8b28-4482-9ff1-90cc7613a6d4, invocation_timestamp=2020-02-19T10:57:17.825Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7da07dde-8b28-4482-9ff1-90cc7613a6d4, session_timestamp=2020-02-19T10:57:17.825Z, thread-id=148, tx_id=1F1D15935664768024BC5F06ED886278786DDFDA0B053099039C3772D7DB23CB}
[INFO ] 2020-02-19T10:57:17,973Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [2869177c-1890-4b76-9e54-644bbcf31039] has error [0] {fiber-id=10000002, flow-id=2869177c-1890-4b76-9e54-644bbcf31039, invocation_id=7da07dde-8b28-4482-9ff1-90cc7613a6d4, invocation_timestamp=2020-02-19T10:57:17.825Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7da07dde-8b28-4482-9ff1-90cc7613a6d4, session_timestamp=2020-02-19T10:57:17.825Z, thread-id=148, tx_id=1F1D15935664768024BC5F06ED886278786DDFDA0B053099039C3772D7DB23CB}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=911339476928386091) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-19T10:57:17,976Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [2869177c-1890-4b76-9e54-644bbcf31039] error allowed to propagate {fiber-id=10000002, flow-id=2869177c-1890-4b76-9e54-644bbcf31039, invocation_id=7da07dde-8b28-4482-9ff1-90cc7613a6d4, invocation_timestamp=2020-02-19T10:57:17.825Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7da07dde-8b28-4482-9ff1-90cc7613a6d4, session_timestamp=2020-02-19T10:57:17.825Z, thread-id=148, tx_id=1F1D15935664768024BC5F06ED886278786DDFDA0B053099039C3772D7DB23CB}
[WARN ] 2020-02-19T10:57:17,999Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [2869177c-1890-4b76-9e54-644bbcf31039] errored, dumping all transitions:

 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.847Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[2869177c-1890-4b76-9e54-644bbcf31039], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7da07dde-8b28-4482-9ff1-90cc7613a6d4, timestamp: 2020-02-19T10:57:17.825Z, entityType: Invocation, sessionId=7da07dde-8b28-4482-9ff1-90cc7613a6d4, timestamp: 2020-02-19T10:57:17.825Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=024429C09754D54FD615412D1C82F21C23BBD503B8B4F572C0353296D6CEC8C2), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4708b0ea])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4708b0ea])
    SignalFlowHasStarted(flowId=[2869177c-1890-4b76-9e54-644bbcf31039])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=4949501175416695997), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=911339476928386091), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-4949501175416695997--287133916660666707-0-0), senderUUID=3dca9003-0996-4073-8e53-a099c37520ed))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=911339476928386091): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4949501175416695997)), errors=[], deduplicationSeed=D-4949501175416695997--287133916660666707)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4708b0ea]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.851Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.854Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.869Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=911339476928386091))]), maySkipCheckpoint=false, fiber=99481C11A95DD596D179A73EB42DA6A01A70807130667DD5986139EEB30A24E3, )
  Actions: 
    PersistCheckpoint(id=[2869177c-1890-4b76-9e54-644bbcf31039], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7da07dde-8b28-4482-9ff1-90cc7613a6d4, timestamp: 2020-02-19T10:57:17.825Z, entityType: Invocation, sessionId=7da07dde-8b28-4482-9ff1-90cc7613a6d4, timestamp: 2020-02-19T10:57:17.825Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=911339476928386091)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4949501175416695997)), errors=[], deduplicationSeed=D-4949501175416695997--287133916660666707)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=911339476928386091))]), frozenFiber=99481C11A95DD596D179A73EB42DA6A01A70807130667DD5986139EEB30A24E3), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=024429C09754D54FD615412D1C82F21C23BBD503B8B4F572C0353296D6CEC8C2)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=911339476928386091))]), frozenFiber=99481C11A95DD596D179A73EB42DA6A01A70807130667DD5986139EEB30A24E3)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.872Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=911339476928386091).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.883Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.904Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=911339476928386091))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=22DBBDF3597F5DF2A353311CED5663E9EF200948EF8ED90482670D1126FEC218, )
  Actions: 
    PersistCheckpoint(id=[2869177c-1890-4b76-9e54-644bbcf31039], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7da07dde-8b28-4482-9ff1-90cc7613a6d4, timestamp: 2020-02-19T10:57:17.825Z, entityType: Invocation, sessionId=7da07dde-8b28-4482-9ff1-90cc7613a6d4, timestamp: 2020-02-19T10:57:17.825Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=911339476928386091)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4949501175416695997)), errors=[], deduplicationSeed=D-4949501175416695997--287133916660666707)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=911339476928386091))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=22DBBDF3597F5DF2A353311CED5663E9EF200948EF8ED90482670D1126FEC218), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.frozenFiber.hash: 
    99481C11A95DD596D179A73EB42DA6A01A70807130667DD5986139EEB30A24E3
    22DBBDF3597F5DF2A353311CED5663E9EF200948EF8ED90482670D1126FEC218
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=911339476928386091))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=911339476928386091))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.908Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=4949501175416695997), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-4949501175416695997--287133916660666707-2-0), senderUUID=3dca9003-0996-4073-8e53-a099c37520ed))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.910Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.916Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.921Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=911339476928386091))]), maySkipCheckpoint=false, fiber=77E841B9DBC00A6FED45E2006E87A3CAFEE9008C702971F244DBEC077C9ADB31, )
  Actions: 
    PersistCheckpoint(id=[2869177c-1890-4b76-9e54-644bbcf31039], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7da07dde-8b28-4482-9ff1-90cc7613a6d4, timestamp: 2020-02-19T10:57:17.825Z, entityType: Invocation, sessionId=7da07dde-8b28-4482-9ff1-90cc7613a6d4, timestamp: 2020-02-19T10:57:17.825Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=911339476928386091)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4949501175416695997)), errors=[], deduplicationSeed=D-4949501175416695997--287133916660666707)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=911339476928386091))]), frozenFiber=77E841B9DBC00A6FED45E2006E87A3CAFEE9008C702971F244DBEC077C9ADB31), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.frozenFiber.hash: 
    22DBBDF3597F5DF2A353311CED5663E9EF200948EF8ED90482670D1126FEC218
    77E841B9DBC00A6FED45E2006E87A3CAFEE9008C702971F244DBEC077C9ADB31
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=911339476928386091))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=911339476928386091))])
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.921Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.963Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=911339476928386091), payload=net.corda.node.services.statemachine.EndSessionMessage@5c69b94d), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2ae4e953, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=911339476928386091).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=4949501175416695997))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2ae4e953]


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.964Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=911339476928386091) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.964Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)]


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.977Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=911339476928386091) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-6018639005254534292, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=911339476928386091) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.981Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.982Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=2869177c-1890-4b76-9e54-644bbcf31039, invocation_id=7da07dde-8b28-4482-9ff1-90cc7613a6d4, invocation_timestamp=2020-02-19T10:57:17.825Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7da07dde-8b28-4482-9ff1-90cc7613a6d4, session_timestamp=2020-02-19T10:57:17.825Z, thread-id=148, tx_id=1F1D15935664768024BC5F06ED886278786DDFDA0B053099039C3772D7DB23CB}
[WARN ] 2020-02-19T10:57:17,999Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [2869177c-1890-4b76-9e54-644bbcf31039] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=2869177c-1890-4b76-9e54-644bbcf31039, invocation_id=7da07dde-8b28-4482-9ff1-90cc7613a6d4, invocation_timestamp=2020-02-19T10:57:17.825Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7da07dde-8b28-4482-9ff1-90cc7613a6d4, session_timestamp=2020-02-19T10:57:17.825Z, thread-id=148, tx_id=1F1D15935664768024BC5F06ED886278786DDFDA0B053099039C3772D7DB23CB}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=911339476928386091) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-19T10:57:18,001Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000002, flow-id=2869177c-1890-4b76-9e54-644bbcf31039, invocation_id=7da07dde-8b28-4482-9ff1-90cc7613a6d4, invocation_timestamp=2020-02-19T10:57:17.825Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7da07dde-8b28-4482-9ff1-90cc7613a6d4, session_timestamp=2020-02-19T10:57:17.825Z, thread-id=148, tx_id=1F1D15935664768024BC5F06ED886278786DDFDA0B053099039C3772D7DB23CB}
[WARN ] 2020-02-19T10:57:18,037Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [2869177c-1890-4b76-9e54-644bbcf31039] errored, dumping all transitions:

 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.847Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[2869177c-1890-4b76-9e54-644bbcf31039], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7da07dde-8b28-4482-9ff1-90cc7613a6d4, timestamp: 2020-02-19T10:57:17.825Z, entityType: Invocation, sessionId=7da07dde-8b28-4482-9ff1-90cc7613a6d4, timestamp: 2020-02-19T10:57:17.825Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=024429C09754D54FD615412D1C82F21C23BBD503B8B4F572C0353296D6CEC8C2), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4708b0ea])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4708b0ea])
    SignalFlowHasStarted(flowId=[2869177c-1890-4b76-9e54-644bbcf31039])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=4949501175416695997), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=911339476928386091), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-4949501175416695997--287133916660666707-0-0), senderUUID=3dca9003-0996-4073-8e53-a099c37520ed))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=911339476928386091): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4949501175416695997)), errors=[], deduplicationSeed=D-4949501175416695997--287133916660666707)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4708b0ea]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.851Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.854Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.869Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=911339476928386091))]), maySkipCheckpoint=false, fiber=99481C11A95DD596D179A73EB42DA6A01A70807130667DD5986139EEB30A24E3, )
  Actions: 
    PersistCheckpoint(id=[2869177c-1890-4b76-9e54-644bbcf31039], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7da07dde-8b28-4482-9ff1-90cc7613a6d4, timestamp: 2020-02-19T10:57:17.825Z, entityType: Invocation, sessionId=7da07dde-8b28-4482-9ff1-90cc7613a6d4, timestamp: 2020-02-19T10:57:17.825Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=911339476928386091)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4949501175416695997)), errors=[], deduplicationSeed=D-4949501175416695997--287133916660666707)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=911339476928386091))]), frozenFiber=99481C11A95DD596D179A73EB42DA6A01A70807130667DD5986139EEB30A24E3), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=024429C09754D54FD615412D1C82F21C23BBD503B8B4F572C0353296D6CEC8C2)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=911339476928386091))]), frozenFiber=99481C11A95DD596D179A73EB42DA6A01A70807130667DD5986139EEB30A24E3)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.872Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=911339476928386091).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.883Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.904Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=911339476928386091))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=22DBBDF3597F5DF2A353311CED5663E9EF200948EF8ED90482670D1126FEC218, )
  Actions: 
    PersistCheckpoint(id=[2869177c-1890-4b76-9e54-644bbcf31039], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7da07dde-8b28-4482-9ff1-90cc7613a6d4, timestamp: 2020-02-19T10:57:17.825Z, entityType: Invocation, sessionId=7da07dde-8b28-4482-9ff1-90cc7613a6d4, timestamp: 2020-02-19T10:57:17.825Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=911339476928386091)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4949501175416695997)), errors=[], deduplicationSeed=D-4949501175416695997--287133916660666707)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=911339476928386091))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=22DBBDF3597F5DF2A353311CED5663E9EF200948EF8ED90482670D1126FEC218), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.frozenFiber.hash: 
    99481C11A95DD596D179A73EB42DA6A01A70807130667DD5986139EEB30A24E3
    22DBBDF3597F5DF2A353311CED5663E9EF200948EF8ED90482670D1126FEC218
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=911339476928386091))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=911339476928386091))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.908Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=4949501175416695997), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-4949501175416695997--287133916660666707-2-0), senderUUID=3dca9003-0996-4073-8e53-a099c37520ed))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.910Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.916Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.921Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=911339476928386091))]), maySkipCheckpoint=false, fiber=77E841B9DBC00A6FED45E2006E87A3CAFEE9008C702971F244DBEC077C9ADB31, )
  Actions: 
    PersistCheckpoint(id=[2869177c-1890-4b76-9e54-644bbcf31039], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7da07dde-8b28-4482-9ff1-90cc7613a6d4, timestamp: 2020-02-19T10:57:17.825Z, entityType: Invocation, sessionId=7da07dde-8b28-4482-9ff1-90cc7613a6d4, timestamp: 2020-02-19T10:57:17.825Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=911339476928386091)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4949501175416695997)), errors=[], deduplicationSeed=D-4949501175416695997--287133916660666707)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=911339476928386091))]), frozenFiber=77E841B9DBC00A6FED45E2006E87A3CAFEE9008C702971F244DBEC077C9ADB31), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.frozenFiber.hash: 
    22DBBDF3597F5DF2A353311CED5663E9EF200948EF8ED90482670D1126FEC218
    77E841B9DBC00A6FED45E2006E87A3CAFEE9008C702971F244DBEC077C9ADB31
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=911339476928386091))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=911339476928386091))])
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.921Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.963Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=911339476928386091), payload=net.corda.node.services.statemachine.EndSessionMessage@5c69b94d), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2ae4e953, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=911339476928386091).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=4949501175416695997))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2ae4e953]


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.964Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=911339476928386091) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.964Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)]


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.977Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=911339476928386091) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-6018639005254534292, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=911339476928386091) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.981Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:17.982Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [2869177c-1890-4b76-9e54-644bbcf31039] ---
  Timestamp: 2020-02-19T10:57:18.028Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-6018639005254534292)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-4949501175416695997--287133916660666707)], senderUUID=3dca9003-0996-4073-8e53-a099c37520ed)
    CreateTransaction
    RemoveCheckpoint(id=[2869177c-1890-4b76-9e54-644bbcf31039])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2ae4e953])
    ReleaseSoftLocks(uuid=2869177c-1890-4b76-9e54-644bbcf31039)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2ae4e953])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=911339476928386091)])
    RemoveFlow(flowId=[2869177c-1890-4b76-9e54-644bbcf31039], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-6018639005254534292, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=911339476928386091) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7da07dde-8b28-4482-9ff1-90cc7613a6d4, timestamp: 2020-02-19T10:57:17.825Z, entityType: Invocation, sessionId=7da07dde-8b28-4482-9ff1-90cc7613a6d4, timestamp: 2020-02-19T10:57:17.825Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=911339476928386091)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-4949501175416695997--287133916660666707)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=911339476928386091))]), frozenFiber=77E841B9DBC00A6FED45E2006E87A3CAFEE9008C702971F244DBEC077C9ADB31), errorState=Errored(errors=[FlowError(errorId=-6018639005254534292, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=911339476928386091) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.EcoIssueFlowResponder@4da6d0fa, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=3dca9003-0996-4073-8e53-a099c37520ed))
  Continuation: Abort
  Diff between previous and next state:
isRemoved: 
    false
    true
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2ae4e953]
    []
 {fiber-id=10000002, flow-id=2869177c-1890-4b76-9e54-644bbcf31039, invocation_id=7da07dde-8b28-4482-9ff1-90cc7613a6d4, invocation_timestamp=2020-02-19T10:57:17.825Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7da07dde-8b28-4482-9ff1-90cc7613a6d4, session_timestamp=2020-02-19T10:57:17.825Z, thread-id=148, tx_id=1F1D15935664768024BC5F06ED886278786DDFDA0B053099039C3772D7DB23CB}
[WARN ] 2020-02-19T10:57:18,037Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [2869177c-1890-4b76-9e54-644bbcf31039] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=2869177c-1890-4b76-9e54-644bbcf31039, invocation_id=7da07dde-8b28-4482-9ff1-90cc7613a6d4, invocation_timestamp=2020-02-19T10:57:17.825Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7da07dde-8b28-4482-9ff1-90cc7613a6d4, session_timestamp=2020-02-19T10:57:17.825Z, thread-id=148, tx_id=1F1D15935664768024BC5F06ED886278786DDFDA0B053099039C3772D7DB23CB}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=911339476928386091) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-19T10:58:05,424Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in D:\FTI\Git\CorDApp\bootcamp-cordapp ... {}
[INFO ] 2020-02-19T10:58:10,403Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-105800.626\nodes\0\cordapps] {}
[INFO ] 2020-02-19T10:58:10,409Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-105800.626/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T10:58:10,445Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-105800.626/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T10:58:10,524Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T10:58:11,116Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T10:58:11,190Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:58:11,191Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:58:11,348Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T10:58:00.574Z
      epoch=1
  } {}
[INFO ] 2020-02-19T10:58:15,332Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T10:58:15,337Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-105800.626\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T10:58:15,337Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T10:58:15,340Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T10:58:15,407Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:58:15,413Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:58:16,989Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:58:17,534Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T10:58:17,582Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T10:58:17,602Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T10:58:17,602Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T10:58:17,864Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T10:58:17,875Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T10:58:17,875Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109897875) {}
[INFO ] 2020-02-19T10:58:17,884Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:58:18,038Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109897875) {}
[INFO ] 2020-02-19T10:58:18,107Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T10:58:18,122Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109897875) {}
[INFO ] 2020-02-19T10:58:18,150Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:58:18,256Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A uploader=app filename=null {}
[INFO ] 2020-02-19T10:58:18,260Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-19T10:58:18,263Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-19T10:58:18,555Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109897875) {}
[INFO ] 2020-02-19T10:58:18,570Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109897875) {}
[INFO ] 2020-02-19T10:58:18,572Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:58:18,572Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109897875) {}
[INFO ] 2020-02-19T10:58:18,572Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:58:18,584Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-105800.626\nodes\1\cordapps] {}
[INFO ] 2020-02-19T10:58:18,584Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-105800.626/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T10:58:18,585Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-105800.626/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T10:58:18,616Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T10:58:18,626Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T10:58:18,674Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:58:18,674Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:58:18,679Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T10:58:00.574Z
      epoch=1
  } {}
[INFO ] 2020-02-19T10:58:19,308Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T10:58:19,312Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-105800.626\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T10:58:19,313Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T10:58:19,314Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T10:58:19,322Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:58:19,322Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:58:19,423Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:58:19,439Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T10:58:19,443Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T10:58:19,444Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-19T10:58:19,476Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:58:19,476Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:58:19,615Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:58:19,621Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T10:58:19,621Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109899621) {}
[INFO ] 2020-02-19T10:58:19,623Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:58:19,633Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109899621) {}
[INFO ] 2020-02-19T10:58:19,649Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T10:58:19,653Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109899621) {}
[INFO ] 2020-02-19T10:58:19,659Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:58:19,800Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A uploader=app filename=null {}
[INFO ] 2020-02-19T10:58:19,815Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109899621) {}
[INFO ] 2020-02-19T10:58:19,818Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109897875) {}
[INFO ] 2020-02-19T10:58:19,820Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:58:19,831Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109899621) {}
[INFO ] 2020-02-19T10:58:19,833Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:58:19,845Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109899621) {}
[INFO ] 2020-02-19T10:58:19,845Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:58:19,845Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109899621) {}
[INFO ] 2020-02-19T10:58:19,845Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:58:19,855Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-105800.626\nodes\2\cordapps] {}
[INFO ] 2020-02-19T10:58:19,855Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-105800.626/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T10:58:19,856Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-105800.626/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T10:58:19,882Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T10:58:19,897Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T10:58:19,928Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:58:19,928Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:58:19,931Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T10:58:00.574Z
      epoch=1
  } {}
[INFO ] 2020-02-19T10:58:20,403Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T10:58:20,406Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-105800.626\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T10:58:20,407Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T10:58:20,410Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T10:58:20,414Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:58:20,414Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:58:20,511Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:58:20,523Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T10:58:20,527Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T10:58:20,528Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-19T10:58:20,551Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:58:20,552Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:58:20,684Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:58:20,690Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T10:58:20,691Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109900690) {}
[INFO ] 2020-02-19T10:58:20,693Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:58:20,704Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109900690) {}
[INFO ] 2020-02-19T10:58:20,720Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T10:58:20,725Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109900690) {}
[INFO ] 2020-02-19T10:58:20,732Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:58:20,876Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A uploader=app filename=null {}
[INFO ] 2020-02-19T10:58:20,887Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109900690) {}
[INFO ] 2020-02-19T10:58:20,890Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109897875) {}
[INFO ] 2020-02-19T10:58:20,892Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:58:20,921Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109900690) {}
[INFO ] 2020-02-19T10:58:20,922Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:58:20,930Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109899621) {}
[INFO ] 2020-02-19T10:58:20,932Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:58:20,939Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109900690) {}
[INFO ] 2020-02-19T10:58:20,941Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:58:20,948Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109900690) {}
[INFO ] 2020-02-19T10:58:20,949Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:58:20,949Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109900690) {}
[INFO ] 2020-02-19T10:58:20,949Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-19T10:58:21,145Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=271131da-e145-4d8c-9223-260a0a3a0ba7, invocation_id=1b949619-6d26-438b-9ce8-acf369751c99, invocation_timestamp=2020-02-19T10:58:20.973Z, origin=Only For Testing, session_id=1b949619-6d26-438b-9ce8-acf369751c99, session_timestamp=2020-02-19T10:58:20.973Z, thread-id=147}
[WARN ] 2020-02-19T10:58:21,145Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.EcoIssueContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=271131da-e145-4d8c-9223-260a0a3a0ba7, invocation_id=1b949619-6d26-438b-9ce8-acf369751c99, invocation_timestamp=2020-02-19T10:58:20.973Z, origin=Only For Testing, session_id=1b949619-6d26-438b-9ce8-acf369751c99, session_timestamp=2020-02-19T10:58:20.973Z, thread-id=147}
[INFO ] 2020-02-19T10:58:22,401Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=271131da-e145-4d8c-9223-260a0a3a0ba7, invocation_id=1b949619-6d26-438b-9ce8-acf369751c99, invocation_timestamp=2020-02-19T10:58:20.973Z, origin=Only For Testing, session_id=1b949619-6d26-438b-9ce8-acf369751c99, session_timestamp=2020-02-19T10:58:20.973Z, thread-id=147, tx_id=F85C7316C93D226639EF6E832443E6E5E995345335B3CDF2CCBD2DDA20CDECF1}
[INFO ] 2020-02-19T10:58:22,401Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=271131da-e145-4d8c-9223-260a0a3a0ba7, invocation_id=1b949619-6d26-438b-9ce8-acf369751c99, invocation_timestamp=2020-02-19T10:58:20.973Z, origin=Only For Testing, session_id=1b949619-6d26-438b-9ce8-acf369751c99, session_timestamp=2020-02-19T10:58:20.973Z, thread-id=147, tx_id=F85C7316C93D226639EF6E832443E6E5E995345335B3CDF2CCBD2DDA20CDECF1}
[INFO ] 2020-02-19T10:58:22,458Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=271131da-e145-4d8c-9223-260a0a3a0ba7, invocation_id=1b949619-6d26-438b-9ce8-acf369751c99, invocation_timestamp=2020-02-19T10:58:20.973Z, origin=Only For Testing, session_id=1b949619-6d26-438b-9ce8-acf369751c99, session_timestamp=2020-02-19T10:58:20.973Z, thread-id=147, tx_id=F85C7316C93D226639EF6E832443E6E5E995345335B3CDF2CCBD2DDA20CDECF1}
[INFO ] 2020-02-19T10:58:22,640Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=f49b9b88-5156-401b-bb91-7268b8f0870e, invocation_id=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, invocation_timestamp=2020-02-19T10:58:22.575Z, origin=O=Mock Company 1, L=London, C=GB, session_id=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, session_timestamp=2020-02-19T10:58:22.575Z, thread-id=147, tx_id=F85C7316C93D226639EF6E832443E6E5E995345335B3CDF2CCBD2DDA20CDECF1}
[WARN ] 2020-02-19T10:58:22,652Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=f49b9b88-5156-401b-bb91-7268b8f0870e, invocation_id=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, invocation_timestamp=2020-02-19T10:58:22.575Z, origin=O=Mock Company 1, L=London, C=GB, session_id=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, session_timestamp=2020-02-19T10:58:22.575Z, thread-id=147, tx_id=F85C7316C93D226639EF6E832443E6E5E995345335B3CDF2CCBD2DDA20CDECF1}
[INFO ] 2020-02-19T10:58:22,677Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=f49b9b88-5156-401b-bb91-7268b8f0870e, invocation_id=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, invocation_timestamp=2020-02-19T10:58:22.575Z, origin=O=Mock Company 1, L=London, C=GB, session_id=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, session_timestamp=2020-02-19T10:58:22.575Z, thread-id=147, tx_id=F85C7316C93D226639EF6E832443E6E5E995345335B3CDF2CCBD2DDA20CDECF1}
[INFO ] 2020-02-19T10:58:22,702Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=271131da-e145-4d8c-9223-260a0a3a0ba7, invocation_id=1b949619-6d26-438b-9ce8-acf369751c99, invocation_timestamp=2020-02-19T10:58:20.973Z, origin=Only For Testing, session_id=1b949619-6d26-438b-9ce8-acf369751c99, session_timestamp=2020-02-19T10:58:20.973Z, thread-id=147, tx_id=F85C7316C93D226639EF6E832443E6E5E995345335B3CDF2CCBD2DDA20CDECF1}
[INFO ] 2020-02-19T10:58:22,702Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=271131da-e145-4d8c-9223-260a0a3a0ba7, invocation_id=1b949619-6d26-438b-9ce8-acf369751c99, invocation_timestamp=2020-02-19T10:58:20.973Z, origin=Only For Testing, session_id=1b949619-6d26-438b-9ce8-acf369751c99, session_timestamp=2020-02-19T10:58:20.973Z, thread-id=147, tx_id=F85C7316C93D226639EF6E832443E6E5E995345335B3CDF2CCBD2DDA20CDECF1}
[INFO ] 2020-02-19T10:58:22,733Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000002, flow-id=f49b9b88-5156-401b-bb91-7268b8f0870e, invocation_id=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, invocation_timestamp=2020-02-19T10:58:22.575Z, origin=O=Mock Company 1, L=London, C=GB, session_id=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, session_timestamp=2020-02-19T10:58:22.575Z, thread-id=147, tx_id=F85C7316C93D226639EF6E832443E6E5E995345335B3CDF2CCBD2DDA20CDECF1}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4914756700210523510) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-19T10:58:22,736Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [f49b9b88-5156-401b-bb91-7268b8f0870e] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, timestamp: 2020-02-19T10:58:22.575Z, entityType: Invocation, sessionId=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, timestamp: 2020-02-19T10:58:22.575Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4914756700210523510)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-8760117451538241222--7571235321805846563)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4914756700210523510))]), frozenFiber=81B8AED6D2B168D15015C12E44B6D1C273F66F15387AEF5FBA25920EBD971AC5), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.EcoIssueFlowResponder@660b14d9, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@29f3d1a5], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=e4292524-441e-4a98-8fdc-b6c712b792c5) {fiber-id=10000002, flow-id=f49b9b88-5156-401b-bb91-7268b8f0870e, invocation_id=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, invocation_timestamp=2020-02-19T10:58:22.575Z, origin=O=Mock Company 1, L=London, C=GB, session_id=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, session_timestamp=2020-02-19T10:58:22.575Z, thread-id=147, tx_id=F85C7316C93D226639EF6E832443E6E5E995345335B3CDF2CCBD2DDA20CDECF1}
[INFO ] 2020-02-19T10:58:22,739Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [f49b9b88-5156-401b-bb91-7268b8f0870e] has error [0] {fiber-id=10000002, flow-id=f49b9b88-5156-401b-bb91-7268b8f0870e, invocation_id=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, invocation_timestamp=2020-02-19T10:58:22.575Z, origin=O=Mock Company 1, L=London, C=GB, session_id=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, session_timestamp=2020-02-19T10:58:22.575Z, thread-id=147, tx_id=F85C7316C93D226639EF6E832443E6E5E995345335B3CDF2CCBD2DDA20CDECF1}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4914756700210523510) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-19T10:58:22,741Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [f49b9b88-5156-401b-bb91-7268b8f0870e] error allowed to propagate {fiber-id=10000002, flow-id=f49b9b88-5156-401b-bb91-7268b8f0870e, invocation_id=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, invocation_timestamp=2020-02-19T10:58:22.575Z, origin=O=Mock Company 1, L=London, C=GB, session_id=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, session_timestamp=2020-02-19T10:58:22.575Z, thread-id=147, tx_id=F85C7316C93D226639EF6E832443E6E5E995345335B3CDF2CCBD2DDA20CDECF1}
[WARN ] 2020-02-19T10:58:22,770Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [f49b9b88-5156-401b-bb91-7268b8f0870e] errored, dumping all transitions:

 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.604Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[f49b9b88-5156-401b-bb91-7268b8f0870e], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, timestamp: 2020-02-19T10:58:22.575Z, entityType: Invocation, sessionId=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, timestamp: 2020-02-19T10:58:22.575Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=888DBBB35EDB241D33F9D2EE3E52CCBA74891692728D5E32B50B17F6A0BBF8FA), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1a953905])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1a953905])
    SignalFlowHasStarted(flowId=[f49b9b88-5156-401b-bb91-7268b8f0870e])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8760117451538241222), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-4914756700210523510), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8760117451538241222--7571235321805846563-0-0), senderUUID=e4292524-441e-4a98-8fdc-b6c712b792c5))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1a953905]
    []
checkpoint.sessions.SessionId(toLong=-4914756700210523510): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8760117451538241222)), errors=[], deduplicationSeed=D-8760117451538241222--7571235321805846563)


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.608Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.612Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.632Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4914756700210523510))]), maySkipCheckpoint=false, fiber=46AE124E2B4CD9DD7F1631B1D6A615DC0478DC20ACE66E554FAA795971805D60, )
  Actions: 
    PersistCheckpoint(id=[f49b9b88-5156-401b-bb91-7268b8f0870e], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, timestamp: 2020-02-19T10:58:22.575Z, entityType: Invocation, sessionId=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, timestamp: 2020-02-19T10:58:22.575Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4914756700210523510)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8760117451538241222)), errors=[], deduplicationSeed=D-8760117451538241222--7571235321805846563)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4914756700210523510))]), frozenFiber=46AE124E2B4CD9DD7F1631B1D6A615DC0478DC20ACE66E554FAA795971805D60), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=888DBBB35EDB241D33F9D2EE3E52CCBA74891692728D5E32B50B17F6A0BBF8FA)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4914756700210523510))]), frozenFiber=46AE124E2B4CD9DD7F1631B1D6A615DC0478DC20ACE66E554FAA795971805D60)


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.635Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-4914756700210523510).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.652Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.670Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4914756700210523510))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=FCFBACE84D6D1B55B99448305ECEECB85B403866E8FF05863760EF37EA4782E3, )
  Actions: 
    PersistCheckpoint(id=[f49b9b88-5156-401b-bb91-7268b8f0870e], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, timestamp: 2020-02-19T10:58:22.575Z, entityType: Invocation, sessionId=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, timestamp: 2020-02-19T10:58:22.575Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4914756700210523510)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8760117451538241222)), errors=[], deduplicationSeed=D-8760117451538241222--7571235321805846563)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4914756700210523510))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=FCFBACE84D6D1B55B99448305ECEECB85B403866E8FF05863760EF37EA4782E3), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    1
    2
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4914756700210523510))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4914756700210523510))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    46AE124E2B4CD9DD7F1631B1D6A615DC0478DC20ACE66E554FAA795971805D60
    FCFBACE84D6D1B55B99448305ECEECB85B403866E8FF05863760EF37EA4782E3


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.675Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8760117451538241222), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8760117451538241222--7571235321805846563-2-0), senderUUID=e4292524-441e-4a98-8fdc-b6c712b792c5))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.677Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.683Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.687Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4914756700210523510))]), maySkipCheckpoint=false, fiber=81B8AED6D2B168D15015C12E44B6D1C273F66F15387AEF5FBA25920EBD971AC5, )
  Actions: 
    PersistCheckpoint(id=[f49b9b88-5156-401b-bb91-7268b8f0870e], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, timestamp: 2020-02-19T10:58:22.575Z, entityType: Invocation, sessionId=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, timestamp: 2020-02-19T10:58:22.575Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4914756700210523510)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8760117451538241222)), errors=[], deduplicationSeed=D-8760117451538241222--7571235321805846563)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4914756700210523510))]), frozenFiber=81B8AED6D2B168D15015C12E44B6D1C273F66F15387AEF5FBA25920EBD971AC5), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    2
    3
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4914756700210523510))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4914756700210523510))])
checkpoint.flowState.frozenFiber.hash: 
    FCFBACE84D6D1B55B99448305ECEECB85B403866E8FF05863760EF37EA4782E3
    81B8AED6D2B168D15015C12E44B6D1C273F66F15387AEF5FBA25920EBD971AC5


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.687Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.731Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4914756700210523510), payload=net.corda.node.services.statemachine.EndSessionMessage@3b087f4d), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@29f3d1a5, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@29f3d1a5]
checkpoint.sessions.SessionId(toLong=-4914756700210523510).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=8760117451538241222))
    Ended


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.732Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4914756700210523510) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.732Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)]


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.743Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4914756700210523510) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=6960895424791721954, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4914756700210523510) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.747Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.749Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=f49b9b88-5156-401b-bb91-7268b8f0870e, invocation_id=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, invocation_timestamp=2020-02-19T10:58:22.575Z, origin=O=Mock Company 1, L=London, C=GB, session_id=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, session_timestamp=2020-02-19T10:58:22.575Z, thread-id=147, tx_id=F85C7316C93D226639EF6E832443E6E5E995345335B3CDF2CCBD2DDA20CDECF1}
[WARN ] 2020-02-19T10:58:22,770Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [f49b9b88-5156-401b-bb91-7268b8f0870e] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=f49b9b88-5156-401b-bb91-7268b8f0870e, invocation_id=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, invocation_timestamp=2020-02-19T10:58:22.575Z, origin=O=Mock Company 1, L=London, C=GB, session_id=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, session_timestamp=2020-02-19T10:58:22.575Z, thread-id=147, tx_id=F85C7316C93D226639EF6E832443E6E5E995345335B3CDF2CCBD2DDA20CDECF1}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4914756700210523510) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-19T10:58:22,772Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000002, flow-id=f49b9b88-5156-401b-bb91-7268b8f0870e, invocation_id=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, invocation_timestamp=2020-02-19T10:58:22.575Z, origin=O=Mock Company 1, L=London, C=GB, session_id=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, session_timestamp=2020-02-19T10:58:22.575Z, thread-id=147, tx_id=F85C7316C93D226639EF6E832443E6E5E995345335B3CDF2CCBD2DDA20CDECF1}
[WARN ] 2020-02-19T10:58:22,807Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [f49b9b88-5156-401b-bb91-7268b8f0870e] errored, dumping all transitions:

 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.604Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[f49b9b88-5156-401b-bb91-7268b8f0870e], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, timestamp: 2020-02-19T10:58:22.575Z, entityType: Invocation, sessionId=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, timestamp: 2020-02-19T10:58:22.575Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=888DBBB35EDB241D33F9D2EE3E52CCBA74891692728D5E32B50B17F6A0BBF8FA), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1a953905])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1a953905])
    SignalFlowHasStarted(flowId=[f49b9b88-5156-401b-bb91-7268b8f0870e])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8760117451538241222), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-4914756700210523510), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8760117451538241222--7571235321805846563-0-0), senderUUID=e4292524-441e-4a98-8fdc-b6c712b792c5))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1a953905]
    []
checkpoint.sessions.SessionId(toLong=-4914756700210523510): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8760117451538241222)), errors=[], deduplicationSeed=D-8760117451538241222--7571235321805846563)


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.608Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.612Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.632Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4914756700210523510))]), maySkipCheckpoint=false, fiber=46AE124E2B4CD9DD7F1631B1D6A615DC0478DC20ACE66E554FAA795971805D60, )
  Actions: 
    PersistCheckpoint(id=[f49b9b88-5156-401b-bb91-7268b8f0870e], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, timestamp: 2020-02-19T10:58:22.575Z, entityType: Invocation, sessionId=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, timestamp: 2020-02-19T10:58:22.575Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4914756700210523510)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8760117451538241222)), errors=[], deduplicationSeed=D-8760117451538241222--7571235321805846563)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4914756700210523510))]), frozenFiber=46AE124E2B4CD9DD7F1631B1D6A615DC0478DC20ACE66E554FAA795971805D60), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=888DBBB35EDB241D33F9D2EE3E52CCBA74891692728D5E32B50B17F6A0BBF8FA)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4914756700210523510))]), frozenFiber=46AE124E2B4CD9DD7F1631B1D6A615DC0478DC20ACE66E554FAA795971805D60)


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.635Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-4914756700210523510).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.652Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.670Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4914756700210523510))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=FCFBACE84D6D1B55B99448305ECEECB85B403866E8FF05863760EF37EA4782E3, )
  Actions: 
    PersistCheckpoint(id=[f49b9b88-5156-401b-bb91-7268b8f0870e], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, timestamp: 2020-02-19T10:58:22.575Z, entityType: Invocation, sessionId=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, timestamp: 2020-02-19T10:58:22.575Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4914756700210523510)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8760117451538241222)), errors=[], deduplicationSeed=D-8760117451538241222--7571235321805846563)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4914756700210523510))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=FCFBACE84D6D1B55B99448305ECEECB85B403866E8FF05863760EF37EA4782E3), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    1
    2
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4914756700210523510))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4914756700210523510))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    46AE124E2B4CD9DD7F1631B1D6A615DC0478DC20ACE66E554FAA795971805D60
    FCFBACE84D6D1B55B99448305ECEECB85B403866E8FF05863760EF37EA4782E3


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.675Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8760117451538241222), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8760117451538241222--7571235321805846563-2-0), senderUUID=e4292524-441e-4a98-8fdc-b6c712b792c5))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.677Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.683Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.687Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4914756700210523510))]), maySkipCheckpoint=false, fiber=81B8AED6D2B168D15015C12E44B6D1C273F66F15387AEF5FBA25920EBD971AC5, )
  Actions: 
    PersistCheckpoint(id=[f49b9b88-5156-401b-bb91-7268b8f0870e], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, timestamp: 2020-02-19T10:58:22.575Z, entityType: Invocation, sessionId=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, timestamp: 2020-02-19T10:58:22.575Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4914756700210523510)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8760117451538241222)), errors=[], deduplicationSeed=D-8760117451538241222--7571235321805846563)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4914756700210523510))]), frozenFiber=81B8AED6D2B168D15015C12E44B6D1C273F66F15387AEF5FBA25920EBD971AC5), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    2
    3
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4914756700210523510))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4914756700210523510))])
checkpoint.flowState.frozenFiber.hash: 
    FCFBACE84D6D1B55B99448305ECEECB85B403866E8FF05863760EF37EA4782E3
    81B8AED6D2B168D15015C12E44B6D1C273F66F15387AEF5FBA25920EBD971AC5


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.687Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.731Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4914756700210523510), payload=net.corda.node.services.statemachine.EndSessionMessage@3b087f4d), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@29f3d1a5, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@29f3d1a5]
checkpoint.sessions.SessionId(toLong=-4914756700210523510).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=8760117451538241222))
    Ended


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.732Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4914756700210523510) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.732Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)]


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.743Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4914756700210523510) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=6960895424791721954, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4914756700210523510) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.747Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.749Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [f49b9b88-5156-401b-bb91-7268b8f0870e] ---
  Timestamp: 2020-02-19T10:58:22.795Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=6960895424791721954)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-8760117451538241222--7571235321805846563)], senderUUID=e4292524-441e-4a98-8fdc-b6c712b792c5)
    CreateTransaction
    RemoveCheckpoint(id=[f49b9b88-5156-401b-bb91-7268b8f0870e])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@29f3d1a5])
    ReleaseSoftLocks(uuid=f49b9b88-5156-401b-bb91-7268b8f0870e)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@29f3d1a5])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-4914756700210523510)])
    RemoveFlow(flowId=[f49b9b88-5156-401b-bb91-7268b8f0870e], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=6960895424791721954, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4914756700210523510) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, timestamp: 2020-02-19T10:58:22.575Z, entityType: Invocation, sessionId=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, timestamp: 2020-02-19T10:58:22.575Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4914756700210523510)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-8760117451538241222--7571235321805846563)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4914756700210523510))]), frozenFiber=81B8AED6D2B168D15015C12E44B6D1C273F66F15387AEF5FBA25920EBD971AC5), errorState=Errored(errors=[FlowError(errorId=6960895424791721954, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4914756700210523510) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.EcoIssueFlowResponder@660b14d9, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=e4292524-441e-4a98-8fdc-b6c712b792c5))
  Continuation: Abort
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@29f3d1a5]
    []
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {fiber-id=10000002, flow-id=f49b9b88-5156-401b-bb91-7268b8f0870e, invocation_id=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, invocation_timestamp=2020-02-19T10:58:22.575Z, origin=O=Mock Company 1, L=London, C=GB, session_id=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, session_timestamp=2020-02-19T10:58:22.575Z, thread-id=147, tx_id=F85C7316C93D226639EF6E832443E6E5E995345335B3CDF2CCBD2DDA20CDECF1}
[WARN ] 2020-02-19T10:58:22,807Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [f49b9b88-5156-401b-bb91-7268b8f0870e] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=f49b9b88-5156-401b-bb91-7268b8f0870e, invocation_id=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, invocation_timestamp=2020-02-19T10:58:22.575Z, origin=O=Mock Company 1, L=London, C=GB, session_id=5b220c43-50e4-4fde-90c5-1f06cd3d74ec, session_timestamp=2020-02-19T10:58:22.575Z, thread-id=147, tx_id=F85C7316C93D226639EF6E832443E6E5E995345335B3CDF2CCBD2DDA20CDECF1}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4914756700210523510) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-19T10:58:37,919Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in D:\FTI\Git\CorDApp\bootcamp-cordapp ... {}
[INFO ] 2020-02-19T10:58:39,967Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-105832.683\nodes\0\cordapps] {}
[INFO ] 2020-02-19T10:58:39,974Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-105832.683/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T10:58:40,019Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-105832.683/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T10:58:40,119Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T10:58:40,845Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T10:58:40,925Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:58:40,926Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:58:41,082Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T10:58:32.635Z
      epoch=1
  } {}
[INFO ] 2020-02-19T10:58:45,340Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T10:58:45,362Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-105832.683\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T10:58:45,362Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T10:58:45,364Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T10:58:45,445Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:58:45,453Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:58:47,102Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:58:47,637Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T10:58:47,690Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T10:58:47,712Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T10:58:47,712Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T10:58:48,014Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T10:58:48,028Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T10:58:48,029Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109928028) {}
[INFO ] 2020-02-19T10:58:48,035Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:58:48,186Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109928028) {}
[INFO ] 2020-02-19T10:58:48,238Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T10:58:48,257Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109928028) {}
[INFO ] 2020-02-19T10:58:48,285Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:58:48,381Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A uploader=app filename=null {}
[INFO ] 2020-02-19T10:58:48,384Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-19T10:58:48,387Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-19T10:58:48,717Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109928028) {}
[INFO ] 2020-02-19T10:58:48,734Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109928028) {}
[INFO ] 2020-02-19T10:58:48,736Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:58:48,736Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109928028) {}
[INFO ] 2020-02-19T10:58:48,736Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:58:48,748Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-105832.683\nodes\1\cordapps] {}
[INFO ] 2020-02-19T10:58:48,749Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-105832.683/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T10:58:48,749Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-105832.683/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T10:58:48,774Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T10:58:48,783Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T10:58:48,822Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:58:48,822Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:58:48,827Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T10:58:32.635Z
      epoch=1
  } {}
[INFO ] 2020-02-19T10:58:49,503Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T10:58:49,507Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-105832.683\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T10:58:49,507Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T10:58:49,509Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T10:58:49,512Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:58:49,512Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:58:49,630Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:58:49,643Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T10:58:49,646Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T10:58:49,647Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-19T10:58:49,677Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:58:49,677Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:58:49,825Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:58:49,830Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T10:58:49,830Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109929830) {}
[INFO ] 2020-02-19T10:58:49,832Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:58:49,843Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109929830) {}
[INFO ] 2020-02-19T10:58:49,860Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T10:58:49,863Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109929830) {}
[INFO ] 2020-02-19T10:58:49,868Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:58:49,982Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A uploader=app filename=null {}
[INFO ] 2020-02-19T10:58:49,991Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109929830) {}
[INFO ] 2020-02-19T10:58:49,994Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109928028) {}
[INFO ] 2020-02-19T10:58:49,996Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:58:50,006Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109929830) {}
[INFO ] 2020-02-19T10:58:50,008Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:58:50,020Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109929830) {}
[INFO ] 2020-02-19T10:58:50,020Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:58:50,020Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109929830) {}
[INFO ] 2020-02-19T10:58:50,020Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:58:50,031Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-105832.683\nodes\2\cordapps] {}
[INFO ] 2020-02-19T10:58:50,032Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-105832.683/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T10:58:50,032Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-105832.683/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T10:58:50,054Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T10:58:50,064Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T10:58:50,093Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:58:50,093Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T10:58:50,097Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T10:58:32.635Z
      epoch=1
  } {}
[INFO ] 2020-02-19T10:58:50,594Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T10:58:50,597Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-105832.683\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T10:58:50,597Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T10:58:50,598Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T10:58:50,603Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:58:50,604Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:58:50,700Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T10:58:50,711Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T10:58:50,714Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T10:58:50,715Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-19T10:58:50,738Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:58:50,739Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:58:50,875Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T10:58:50,879Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T10:58:50,879Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109930879) {}
[INFO ] 2020-02-19T10:58:50,904Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:58:50,912Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109930879) {}
[INFO ] 2020-02-19T10:58:50,927Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T10:58:50,931Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109930879) {}
[INFO ] 2020-02-19T10:58:50,937Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:58:51,049Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A uploader=app filename=null {}
[INFO ] 2020-02-19T10:58:51,056Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109930879) {}
[INFO ] 2020-02-19T10:58:51,059Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582109928028) {}
[INFO ] 2020-02-19T10:58:51,061Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:58:51,073Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109930879) {}
[INFO ] 2020-02-19T10:58:51,075Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:58:51,087Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582109929830) {}
[INFO ] 2020-02-19T10:58:51,089Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:58:51,099Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109930879) {}
[INFO ] 2020-02-19T10:58:51,101Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T10:58:51,110Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109930879) {}
[INFO ] 2020-02-19T10:58:51,110Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T10:58:51,110Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582109930879) {}
[INFO ] 2020-02-19T10:58:51,110Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-19T10:58:51,330Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d101051d-3dc8-456e-9d9c-96de5c0bf38f, invocation_id=ee38250e-1567-42a0-be43-9579a5344ac3, invocation_timestamp=2020-02-19T10:58:51.141Z, origin=Only For Testing, session_id=ee38250e-1567-42a0-be43-9579a5344ac3, session_timestamp=2020-02-19T10:58:51.141Z, thread-id=147}
[WARN ] 2020-02-19T10:58:51,330Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.EcoIssueContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d101051d-3dc8-456e-9d9c-96de5c0bf38f, invocation_id=ee38250e-1567-42a0-be43-9579a5344ac3, invocation_timestamp=2020-02-19T10:58:51.141Z, origin=Only For Testing, session_id=ee38250e-1567-42a0-be43-9579a5344ac3, session_timestamp=2020-02-19T10:58:51.141Z, thread-id=147}
[INFO ] 2020-02-19T10:58:52,603Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d101051d-3dc8-456e-9d9c-96de5c0bf38f, invocation_id=ee38250e-1567-42a0-be43-9579a5344ac3, invocation_timestamp=2020-02-19T10:58:51.141Z, origin=Only For Testing, session_id=ee38250e-1567-42a0-be43-9579a5344ac3, session_timestamp=2020-02-19T10:58:51.141Z, thread-id=147, tx_id=1738EA2E7EE8F1A7B3B17212762FA85C87B92D4BC0641A0DCF5E81E7DF0385B1}
[INFO ] 2020-02-19T10:58:52,603Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d101051d-3dc8-456e-9d9c-96de5c0bf38f, invocation_id=ee38250e-1567-42a0-be43-9579a5344ac3, invocation_timestamp=2020-02-19T10:58:51.141Z, origin=Only For Testing, session_id=ee38250e-1567-42a0-be43-9579a5344ac3, session_timestamp=2020-02-19T10:58:51.141Z, thread-id=147, tx_id=1738EA2E7EE8F1A7B3B17212762FA85C87B92D4BC0641A0DCF5E81E7DF0385B1}
[INFO ] 2020-02-19T10:58:52,657Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d101051d-3dc8-456e-9d9c-96de5c0bf38f, invocation_id=ee38250e-1567-42a0-be43-9579a5344ac3, invocation_timestamp=2020-02-19T10:58:51.141Z, origin=Only For Testing, session_id=ee38250e-1567-42a0-be43-9579a5344ac3, session_timestamp=2020-02-19T10:58:51.141Z, thread-id=147, tx_id=1738EA2E7EE8F1A7B3B17212762FA85C87B92D4BC0641A0DCF5E81E7DF0385B1}
[INFO ] 2020-02-19T10:58:52,846Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=a28215e6-418a-4b41-a7d8-e475b0248efe, invocation_id=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, invocation_timestamp=2020-02-19T10:58:52.778Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, session_timestamp=2020-02-19T10:58:52.778Z, thread-id=147, tx_id=1738EA2E7EE8F1A7B3B17212762FA85C87B92D4BC0641A0DCF5E81E7DF0385B1}
[WARN ] 2020-02-19T10:58:52,859Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=a28215e6-418a-4b41-a7d8-e475b0248efe, invocation_id=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, invocation_timestamp=2020-02-19T10:58:52.778Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, session_timestamp=2020-02-19T10:58:52.778Z, thread-id=147, tx_id=1738EA2E7EE8F1A7B3B17212762FA85C87B92D4BC0641A0DCF5E81E7DF0385B1}
[INFO ] 2020-02-19T10:58:52,894Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=a28215e6-418a-4b41-a7d8-e475b0248efe, invocation_id=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, invocation_timestamp=2020-02-19T10:58:52.778Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, session_timestamp=2020-02-19T10:58:52.778Z, thread-id=147, tx_id=1738EA2E7EE8F1A7B3B17212762FA85C87B92D4BC0641A0DCF5E81E7DF0385B1}
[INFO ] 2020-02-19T10:58:52,923Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d101051d-3dc8-456e-9d9c-96de5c0bf38f, invocation_id=ee38250e-1567-42a0-be43-9579a5344ac3, invocation_timestamp=2020-02-19T10:58:51.141Z, origin=Only For Testing, session_id=ee38250e-1567-42a0-be43-9579a5344ac3, session_timestamp=2020-02-19T10:58:51.141Z, thread-id=147, tx_id=1738EA2E7EE8F1A7B3B17212762FA85C87B92D4BC0641A0DCF5E81E7DF0385B1}
[INFO ] 2020-02-19T10:58:52,923Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d101051d-3dc8-456e-9d9c-96de5c0bf38f, invocation_id=ee38250e-1567-42a0-be43-9579a5344ac3, invocation_timestamp=2020-02-19T10:58:51.141Z, origin=Only For Testing, session_id=ee38250e-1567-42a0-be43-9579a5344ac3, session_timestamp=2020-02-19T10:58:51.141Z, thread-id=147, tx_id=1738EA2E7EE8F1A7B3B17212762FA85C87B92D4BC0641A0DCF5E81E7DF0385B1}
[INFO ] 2020-02-19T10:58:52,955Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000002, flow-id=a28215e6-418a-4b41-a7d8-e475b0248efe, invocation_id=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, invocation_timestamp=2020-02-19T10:58:52.778Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, session_timestamp=2020-02-19T10:58:52.778Z, thread-id=147, tx_id=1738EA2E7EE8F1A7B3B17212762FA85C87B92D4BC0641A0DCF5E81E7DF0385B1}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=8422217955834481389) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-19T10:58:52,959Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [a28215e6-418a-4b41-a7d8-e475b0248efe] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, timestamp: 2020-02-19T10:58:52.778Z, entityType: Invocation, sessionId=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, timestamp: 2020-02-19T10:58:52.778Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=8422217955834481389)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--2320183358810722437--6857602215160563356)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8422217955834481389))]), frozenFiber=1B3C8774BD075D392DC5F10A1E827322D6B28F7539EB30195925A970FB969F59), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.EcoIssueFlowResponder@457bc1d3, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@75160ff4], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=5ad9f435-dbeb-49f2-b719-44107543c05b) {fiber-id=10000002, flow-id=a28215e6-418a-4b41-a7d8-e475b0248efe, invocation_id=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, invocation_timestamp=2020-02-19T10:58:52.778Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, session_timestamp=2020-02-19T10:58:52.778Z, thread-id=147, tx_id=1738EA2E7EE8F1A7B3B17212762FA85C87B92D4BC0641A0DCF5E81E7DF0385B1}
[INFO ] 2020-02-19T10:58:52,962Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [a28215e6-418a-4b41-a7d8-e475b0248efe] has error [0] {fiber-id=10000002, flow-id=a28215e6-418a-4b41-a7d8-e475b0248efe, invocation_id=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, invocation_timestamp=2020-02-19T10:58:52.778Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, session_timestamp=2020-02-19T10:58:52.778Z, thread-id=147, tx_id=1738EA2E7EE8F1A7B3B17212762FA85C87B92D4BC0641A0DCF5E81E7DF0385B1}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=8422217955834481389) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-19T10:58:52,963Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [a28215e6-418a-4b41-a7d8-e475b0248efe] error allowed to propagate {fiber-id=10000002, flow-id=a28215e6-418a-4b41-a7d8-e475b0248efe, invocation_id=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, invocation_timestamp=2020-02-19T10:58:52.778Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, session_timestamp=2020-02-19T10:58:52.778Z, thread-id=147, tx_id=1738EA2E7EE8F1A7B3B17212762FA85C87B92D4BC0641A0DCF5E81E7DF0385B1}
[WARN ] 2020-02-19T10:58:52,992Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [a28215e6-418a-4b41-a7d8-e475b0248efe] errored, dumping all transitions:

 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.809Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[a28215e6-418a-4b41-a7d8-e475b0248efe], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, timestamp: 2020-02-19T10:58:52.778Z, entityType: Invocation, sessionId=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, timestamp: 2020-02-19T10:58:52.778Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=3BD913988D136E15BF46784CE781703120846C1EE120A65D7B6DFC757DDF6FFC), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@62336fd0])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@62336fd0])
    SignalFlowHasStarted(flowId=[a28215e6-418a-4b41-a7d8-e475b0248efe])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2320183358810722437), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=8422217955834481389), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--2320183358810722437--6857602215160563356-0-0), senderUUID=5ad9f435-dbeb-49f2-b719-44107543c05b))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8422217955834481389): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2320183358810722437)), errors=[], deduplicationSeed=D--2320183358810722437--6857602215160563356)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@62336fd0]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.813Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.817Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.840Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8422217955834481389))]), maySkipCheckpoint=false, fiber=23DC1F56E9C7282C8AA33CC4DBA16B702195101E715457AB260863E009A3749A, )
  Actions: 
    PersistCheckpoint(id=[a28215e6-418a-4b41-a7d8-e475b0248efe], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, timestamp: 2020-02-19T10:58:52.778Z, entityType: Invocation, sessionId=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, timestamp: 2020-02-19T10:58:52.778Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=8422217955834481389)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2320183358810722437)), errors=[], deduplicationSeed=D--2320183358810722437--6857602215160563356)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8422217955834481389))]), frozenFiber=23DC1F56E9C7282C8AA33CC4DBA16B702195101E715457AB260863E009A3749A), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=3BD913988D136E15BF46784CE781703120846C1EE120A65D7B6DFC757DDF6FFC)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8422217955834481389))]), frozenFiber=23DC1F56E9C7282C8AA33CC4DBA16B702195101E715457AB260863E009A3749A)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.843Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8422217955834481389).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.859Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.885Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8422217955834481389))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=793E713C885A83C269FD695FE75D64BEB3D996C612F4D11B7CD6B6C88894D60E, )
  Actions: 
    PersistCheckpoint(id=[a28215e6-418a-4b41-a7d8-e475b0248efe], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, timestamp: 2020-02-19T10:58:52.778Z, entityType: Invocation, sessionId=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, timestamp: 2020-02-19T10:58:52.778Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=8422217955834481389)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2320183358810722437)), errors=[], deduplicationSeed=D--2320183358810722437--6857602215160563356)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8422217955834481389))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=793E713C885A83C269FD695FE75D64BEB3D996C612F4D11B7CD6B6C88894D60E), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8422217955834481389))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8422217955834481389))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    23DC1F56E9C7282C8AA33CC4DBA16B702195101E715457AB260863E009A3749A
    793E713C885A83C269FD695FE75D64BEB3D996C612F4D11B7CD6B6C88894D60E
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.891Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2320183358810722437), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--2320183358810722437--6857602215160563356-2-0), senderUUID=5ad9f435-dbeb-49f2-b719-44107543c05b))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.893Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.903Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.909Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8422217955834481389))]), maySkipCheckpoint=false, fiber=1B3C8774BD075D392DC5F10A1E827322D6B28F7539EB30195925A970FB969F59, )
  Actions: 
    PersistCheckpoint(id=[a28215e6-418a-4b41-a7d8-e475b0248efe], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, timestamp: 2020-02-19T10:58:52.778Z, entityType: Invocation, sessionId=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, timestamp: 2020-02-19T10:58:52.778Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=8422217955834481389)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2320183358810722437)), errors=[], deduplicationSeed=D--2320183358810722437--6857602215160563356)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8422217955834481389))]), frozenFiber=1B3C8774BD075D392DC5F10A1E827322D6B28F7539EB30195925A970FB969F59), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8422217955834481389))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8422217955834481389))])
checkpoint.flowState.frozenFiber.hash: 
    793E713C885A83C269FD695FE75D64BEB3D996C612F4D11B7CD6B6C88894D60E
    1B3C8774BD075D392DC5F10A1E827322D6B28F7539EB30195925A970FB969F59
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.909Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.954Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8422217955834481389), payload=net.corda.node.services.statemachine.EndSessionMessage@71e24d6e), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@75160ff4, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8422217955834481389).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-2320183358810722437))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@75160ff4]


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.955Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=8422217955834481389) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.955Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)]


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.965Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=8422217955834481389) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=340364888292963362, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=8422217955834481389) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.970Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.972Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=a28215e6-418a-4b41-a7d8-e475b0248efe, invocation_id=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, invocation_timestamp=2020-02-19T10:58:52.778Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, session_timestamp=2020-02-19T10:58:52.778Z, thread-id=147, tx_id=1738EA2E7EE8F1A7B3B17212762FA85C87B92D4BC0641A0DCF5E81E7DF0385B1}
[WARN ] 2020-02-19T10:58:52,992Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [a28215e6-418a-4b41-a7d8-e475b0248efe] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=a28215e6-418a-4b41-a7d8-e475b0248efe, invocation_id=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, invocation_timestamp=2020-02-19T10:58:52.778Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, session_timestamp=2020-02-19T10:58:52.778Z, thread-id=147, tx_id=1738EA2E7EE8F1A7B3B17212762FA85C87B92D4BC0641A0DCF5E81E7DF0385B1}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=8422217955834481389) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-19T10:58:52,995Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000002, flow-id=a28215e6-418a-4b41-a7d8-e475b0248efe, invocation_id=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, invocation_timestamp=2020-02-19T10:58:52.778Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, session_timestamp=2020-02-19T10:58:52.778Z, thread-id=147, tx_id=1738EA2E7EE8F1A7B3B17212762FA85C87B92D4BC0641A0DCF5E81E7DF0385B1}
[WARN ] 2020-02-19T10:58:53,046Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [a28215e6-418a-4b41-a7d8-e475b0248efe] errored, dumping all transitions:

 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.809Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[a28215e6-418a-4b41-a7d8-e475b0248efe], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, timestamp: 2020-02-19T10:58:52.778Z, entityType: Invocation, sessionId=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, timestamp: 2020-02-19T10:58:52.778Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=3BD913988D136E15BF46784CE781703120846C1EE120A65D7B6DFC757DDF6FFC), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@62336fd0])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@62336fd0])
    SignalFlowHasStarted(flowId=[a28215e6-418a-4b41-a7d8-e475b0248efe])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2320183358810722437), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=8422217955834481389), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--2320183358810722437--6857602215160563356-0-0), senderUUID=5ad9f435-dbeb-49f2-b719-44107543c05b))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8422217955834481389): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2320183358810722437)), errors=[], deduplicationSeed=D--2320183358810722437--6857602215160563356)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@62336fd0]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.813Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.817Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.840Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8422217955834481389))]), maySkipCheckpoint=false, fiber=23DC1F56E9C7282C8AA33CC4DBA16B702195101E715457AB260863E009A3749A, )
  Actions: 
    PersistCheckpoint(id=[a28215e6-418a-4b41-a7d8-e475b0248efe], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, timestamp: 2020-02-19T10:58:52.778Z, entityType: Invocation, sessionId=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, timestamp: 2020-02-19T10:58:52.778Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=8422217955834481389)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2320183358810722437)), errors=[], deduplicationSeed=D--2320183358810722437--6857602215160563356)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8422217955834481389))]), frozenFiber=23DC1F56E9C7282C8AA33CC4DBA16B702195101E715457AB260863E009A3749A), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=3BD913988D136E15BF46784CE781703120846C1EE120A65D7B6DFC757DDF6FFC)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8422217955834481389))]), frozenFiber=23DC1F56E9C7282C8AA33CC4DBA16B702195101E715457AB260863E009A3749A)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.843Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8422217955834481389).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.859Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.885Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8422217955834481389))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=793E713C885A83C269FD695FE75D64BEB3D996C612F4D11B7CD6B6C88894D60E, )
  Actions: 
    PersistCheckpoint(id=[a28215e6-418a-4b41-a7d8-e475b0248efe], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, timestamp: 2020-02-19T10:58:52.778Z, entityType: Invocation, sessionId=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, timestamp: 2020-02-19T10:58:52.778Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=8422217955834481389)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2320183358810722437)), errors=[], deduplicationSeed=D--2320183358810722437--6857602215160563356)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8422217955834481389))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=793E713C885A83C269FD695FE75D64BEB3D996C612F4D11B7CD6B6C88894D60E), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8422217955834481389))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8422217955834481389))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    23DC1F56E9C7282C8AA33CC4DBA16B702195101E715457AB260863E009A3749A
    793E713C885A83C269FD695FE75D64BEB3D996C612F4D11B7CD6B6C88894D60E
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.891Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2320183358810722437), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--2320183358810722437--6857602215160563356-2-0), senderUUID=5ad9f435-dbeb-49f2-b719-44107543c05b))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.893Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.903Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.909Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8422217955834481389))]), maySkipCheckpoint=false, fiber=1B3C8774BD075D392DC5F10A1E827322D6B28F7539EB30195925A970FB969F59, )
  Actions: 
    PersistCheckpoint(id=[a28215e6-418a-4b41-a7d8-e475b0248efe], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, timestamp: 2020-02-19T10:58:52.778Z, entityType: Invocation, sessionId=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, timestamp: 2020-02-19T10:58:52.778Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=8422217955834481389)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2320183358810722437)), errors=[], deduplicationSeed=D--2320183358810722437--6857602215160563356)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8422217955834481389))]), frozenFiber=1B3C8774BD075D392DC5F10A1E827322D6B28F7539EB30195925A970FB969F59), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8422217955834481389))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8422217955834481389))])
checkpoint.flowState.frozenFiber.hash: 
    793E713C885A83C269FD695FE75D64BEB3D996C612F4D11B7CD6B6C88894D60E
    1B3C8774BD075D392DC5F10A1E827322D6B28F7539EB30195925A970FB969F59
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.909Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.954Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8422217955834481389), payload=net.corda.node.services.statemachine.EndSessionMessage@71e24d6e), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@75160ff4, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8422217955834481389).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-2320183358810722437))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@75160ff4]


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.955Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=8422217955834481389) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.955Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)]


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.965Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=8422217955834481389) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=340364888292963362, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=8422217955834481389) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.970Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:52.972Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [a28215e6-418a-4b41-a7d8-e475b0248efe] ---
  Timestamp: 2020-02-19T10:58:53.034Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=340364888292963362)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--2320183358810722437--6857602215160563356)], senderUUID=5ad9f435-dbeb-49f2-b719-44107543c05b)
    CreateTransaction
    RemoveCheckpoint(id=[a28215e6-418a-4b41-a7d8-e475b0248efe])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@75160ff4])
    ReleaseSoftLocks(uuid=a28215e6-418a-4b41-a7d8-e475b0248efe)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@75160ff4])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=8422217955834481389)])
    RemoveFlow(flowId=[a28215e6-418a-4b41-a7d8-e475b0248efe], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=340364888292963362, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=8422217955834481389) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, timestamp: 2020-02-19T10:58:52.778Z, entityType: Invocation, sessionId=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, timestamp: 2020-02-19T10:58:52.778Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=8422217955834481389)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--2320183358810722437--6857602215160563356)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=8422217955834481389))]), frozenFiber=1B3C8774BD075D392DC5F10A1E827322D6B28F7539EB30195925A970FB969F59), errorState=Errored(errors=[FlowError(errorId=340364888292963362, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=8422217955834481389) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.EcoIssueFlowResponder@457bc1d3, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=5ad9f435-dbeb-49f2-b719-44107543c05b))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@75160ff4]
    []
isRemoved: 
    false
    true
 {fiber-id=10000002, flow-id=a28215e6-418a-4b41-a7d8-e475b0248efe, invocation_id=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, invocation_timestamp=2020-02-19T10:58:52.778Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, session_timestamp=2020-02-19T10:58:52.778Z, thread-id=147, tx_id=1738EA2E7EE8F1A7B3B17212762FA85C87B92D4BC0641A0DCF5E81E7DF0385B1}
[WARN ] 2020-02-19T10:58:53,046Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [a28215e6-418a-4b41-a7d8-e475b0248efe] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=a28215e6-418a-4b41-a7d8-e475b0248efe, invocation_id=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, invocation_timestamp=2020-02-19T10:58:52.778Z, origin=O=Mock Company 1, L=London, C=GB, session_id=1f6f93ae-07ea-4dc0-9e0c-fa65b6c85539, session_timestamp=2020-02-19T10:58:52.778Z, thread-id=147, tx_id=1738EA2E7EE8F1A7B3B17212762FA85C87B92D4BC0641A0DCF5E81E7DF0385B1}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=8422217955834481389) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-19T11:00:21,438Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in D:\FTI\Git\CorDApp\bootcamp-cordapp ... {}
[INFO ] 2020-02-19T11:00:26,519Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-110016.625\nodes\0\cordapps] {}
[INFO ] 2020-02-19T11:00:26,525Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110016.625/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T11:00:26,549Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110016.625/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T11:00:26,622Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T11:00:27,188Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T11:00:27,253Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:00:27,254Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:00:27,373Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T11:00:16.580Z
      epoch=1
  } {}
[INFO ] 2020-02-19T11:00:31,168Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T11:00:31,175Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-110016.625\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T11:00:31,175Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T11:00:31,178Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T11:00:31,266Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:00:31,272Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:00:33,051Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:00:33,614Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T11:00:33,689Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T11:00:33,715Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:00:33,715Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:00:34,037Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:00:34,049Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T11:00:34,050Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110034049) {}
[INFO ] 2020-02-19T11:00:34,056Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:00:34,218Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110034049) {}
[INFO ] 2020-02-19T11:00:34,285Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T11:00:34,304Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110034049) {}
[INFO ] 2020-02-19T11:00:34,337Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:00:34,478Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A uploader=app filename=null {}
[INFO ] 2020-02-19T11:00:34,482Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-19T11:00:34,487Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-19T11:00:34,843Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110034049) {}
[INFO ] 2020-02-19T11:00:34,859Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110034049) {}
[INFO ] 2020-02-19T11:00:34,860Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:00:34,860Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110034049) {}
[INFO ] 2020-02-19T11:00:34,861Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:00:34,872Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-110016.625\nodes\1\cordapps] {}
[INFO ] 2020-02-19T11:00:34,873Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110016.625/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T11:00:34,873Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110016.625/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T11:00:34,897Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T11:00:34,907Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T11:00:34,945Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:00:34,945Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:00:34,950Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T11:00:16.580Z
      epoch=1
  } {}
[INFO ] 2020-02-19T11:00:35,622Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T11:00:35,625Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-110016.625\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T11:00:35,625Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T11:00:35,627Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T11:00:35,631Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:00:35,631Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:00:35,739Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:00:35,750Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T11:00:35,753Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T11:00:35,754Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-19T11:00:35,783Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T11:00:35,784Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T11:00:35,903Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T11:00:35,909Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T11:00:35,909Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110035909) {}
[INFO ] 2020-02-19T11:00:35,912Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:00:35,922Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110035909) {}
[INFO ] 2020-02-19T11:00:35,935Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T11:00:35,940Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110035909) {}
[INFO ] 2020-02-19T11:00:35,946Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:00:36,095Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A uploader=app filename=null {}
[INFO ] 2020-02-19T11:00:36,103Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110035909) {}
[INFO ] 2020-02-19T11:00:36,105Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110034049) {}
[INFO ] 2020-02-19T11:00:36,107Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:00:36,120Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110035909) {}
[INFO ] 2020-02-19T11:00:36,122Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:00:36,133Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110035909) {}
[INFO ] 2020-02-19T11:00:36,133Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:00:36,133Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110035909) {}
[INFO ] 2020-02-19T11:00:36,134Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:00:36,148Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-110016.625\nodes\2\cordapps] {}
[INFO ] 2020-02-19T11:00:36,149Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110016.625/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T11:00:36,149Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110016.625/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T11:00:36,171Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T11:00:36,186Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T11:00:36,216Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:00:36,216Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:00:36,219Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T11:00:16.580Z
      epoch=1
  } {}
[INFO ] 2020-02-19T11:00:36,790Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T11:00:36,796Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-110016.625\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T11:00:36,796Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T11:00:36,798Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T11:00:36,804Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:00:36,804Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:00:36,928Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:00:36,944Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T11:00:36,948Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T11:00:36,950Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-19T11:00:36,983Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T11:00:36,984Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T11:00:37,152Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T11:00:37,157Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T11:00:37,157Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110037157) {}
[INFO ] 2020-02-19T11:00:37,160Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:00:37,170Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110037157) {}
[INFO ] 2020-02-19T11:00:37,185Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T11:00:37,189Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110037157) {}
[INFO ] 2020-02-19T11:00:37,195Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:00:37,318Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A uploader=app filename=null {}
[INFO ] 2020-02-19T11:00:37,344Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110037157) {}
[INFO ] 2020-02-19T11:00:37,347Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110034049) {}
[INFO ] 2020-02-19T11:00:37,348Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:00:37,360Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110037157) {}
[INFO ] 2020-02-19T11:00:37,362Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:00:37,373Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110035909) {}
[INFO ] 2020-02-19T11:00:37,375Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:00:37,384Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110037157) {}
[INFO ] 2020-02-19T11:00:37,385Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:00:37,394Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110037157) {}
[INFO ] 2020-02-19T11:00:37,394Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:00:37,394Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110037157) {}
[INFO ] 2020-02-19T11:00:37,394Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-19T11:00:37,608Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d852c7ad-12ac-4f55-8f83-4e0e60c527eb, invocation_id=5fccb5f9-ead4-4c92-8077-e065d2c3c123, invocation_timestamp=2020-02-19T11:00:37.421Z, origin=Only For Testing, session_id=5fccb5f9-ead4-4c92-8077-e065d2c3c123, session_timestamp=2020-02-19T11:00:37.421Z, thread-id=147}
[WARN ] 2020-02-19T11:00:37,608Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.EcoIssueContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d852c7ad-12ac-4f55-8f83-4e0e60c527eb, invocation_id=5fccb5f9-ead4-4c92-8077-e065d2c3c123, invocation_timestamp=2020-02-19T11:00:37.421Z, origin=Only For Testing, session_id=5fccb5f9-ead4-4c92-8077-e065d2c3c123, session_timestamp=2020-02-19T11:00:37.421Z, thread-id=147}
[INFO ] 2020-02-19T11:00:39,102Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d852c7ad-12ac-4f55-8f83-4e0e60c527eb, invocation_id=5fccb5f9-ead4-4c92-8077-e065d2c3c123, invocation_timestamp=2020-02-19T11:00:37.421Z, origin=Only For Testing, session_id=5fccb5f9-ead4-4c92-8077-e065d2c3c123, session_timestamp=2020-02-19T11:00:37.421Z, thread-id=147, tx_id=344F15FE98D91ACBA4BC7C44840B9580638AA5B0F8364BBD448EB29381A552EA}
[INFO ] 2020-02-19T11:00:39,102Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d852c7ad-12ac-4f55-8f83-4e0e60c527eb, invocation_id=5fccb5f9-ead4-4c92-8077-e065d2c3c123, invocation_timestamp=2020-02-19T11:00:37.421Z, origin=Only For Testing, session_id=5fccb5f9-ead4-4c92-8077-e065d2c3c123, session_timestamp=2020-02-19T11:00:37.421Z, thread-id=147, tx_id=344F15FE98D91ACBA4BC7C44840B9580638AA5B0F8364BBD448EB29381A552EA}
[INFO ] 2020-02-19T11:00:39,161Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d852c7ad-12ac-4f55-8f83-4e0e60c527eb, invocation_id=5fccb5f9-ead4-4c92-8077-e065d2c3c123, invocation_timestamp=2020-02-19T11:00:37.421Z, origin=Only For Testing, session_id=5fccb5f9-ead4-4c92-8077-e065d2c3c123, session_timestamp=2020-02-19T11:00:37.421Z, thread-id=147, tx_id=344F15FE98D91ACBA4BC7C44840B9580638AA5B0F8364BBD448EB29381A552EA}
[INFO ] 2020-02-19T11:00:39,325Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=a19ca80a-7704-4e1a-bfbf-8b998b1f8b67, invocation_id=fbf051b2-ac01-449d-bcf7-46af56cff035, invocation_timestamp=2020-02-19T11:00:39.272Z, origin=O=Mock Company 1, L=London, C=GB, session_id=fbf051b2-ac01-449d-bcf7-46af56cff035, session_timestamp=2020-02-19T11:00:39.272Z, thread-id=147, tx_id=344F15FE98D91ACBA4BC7C44840B9580638AA5B0F8364BBD448EB29381A552EA}
[WARN ] 2020-02-19T11:00:39,336Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=a19ca80a-7704-4e1a-bfbf-8b998b1f8b67, invocation_id=fbf051b2-ac01-449d-bcf7-46af56cff035, invocation_timestamp=2020-02-19T11:00:39.272Z, origin=O=Mock Company 1, L=London, C=GB, session_id=fbf051b2-ac01-449d-bcf7-46af56cff035, session_timestamp=2020-02-19T11:00:39.272Z, thread-id=147, tx_id=344F15FE98D91ACBA4BC7C44840B9580638AA5B0F8364BBD448EB29381A552EA}
[INFO ] 2020-02-19T11:00:39,366Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=a19ca80a-7704-4e1a-bfbf-8b998b1f8b67, invocation_id=fbf051b2-ac01-449d-bcf7-46af56cff035, invocation_timestamp=2020-02-19T11:00:39.272Z, origin=O=Mock Company 1, L=London, C=GB, session_id=fbf051b2-ac01-449d-bcf7-46af56cff035, session_timestamp=2020-02-19T11:00:39.272Z, thread-id=147, tx_id=344F15FE98D91ACBA4BC7C44840B9580638AA5B0F8364BBD448EB29381A552EA}
[INFO ] 2020-02-19T11:00:39,391Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d852c7ad-12ac-4f55-8f83-4e0e60c527eb, invocation_id=5fccb5f9-ead4-4c92-8077-e065d2c3c123, invocation_timestamp=2020-02-19T11:00:37.421Z, origin=Only For Testing, session_id=5fccb5f9-ead4-4c92-8077-e065d2c3c123, session_timestamp=2020-02-19T11:00:37.421Z, thread-id=147, tx_id=344F15FE98D91ACBA4BC7C44840B9580638AA5B0F8364BBD448EB29381A552EA}
[INFO ] 2020-02-19T11:00:39,391Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d852c7ad-12ac-4f55-8f83-4e0e60c527eb, invocation_id=5fccb5f9-ead4-4c92-8077-e065d2c3c123, invocation_timestamp=2020-02-19T11:00:37.421Z, origin=Only For Testing, session_id=5fccb5f9-ead4-4c92-8077-e065d2c3c123, session_timestamp=2020-02-19T11:00:37.421Z, thread-id=147, tx_id=344F15FE98D91ACBA4BC7C44840B9580638AA5B0F8364BBD448EB29381A552EA}
[INFO ] 2020-02-19T11:00:39,431Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000002, flow-id=a19ca80a-7704-4e1a-bfbf-8b998b1f8b67, invocation_id=fbf051b2-ac01-449d-bcf7-46af56cff035, invocation_timestamp=2020-02-19T11:00:39.272Z, origin=O=Mock Company 1, L=London, C=GB, session_id=fbf051b2-ac01-449d-bcf7-46af56cff035, session_timestamp=2020-02-19T11:00:39.272Z, thread-id=147, tx_id=344F15FE98D91ACBA4BC7C44840B9580638AA5B0F8364BBD448EB29381A552EA}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3141468589333702069) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-19T11:00:39,435Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=fbf051b2-ac01-449d-bcf7-46af56cff035, timestamp: 2020-02-19T11:00:39.272Z, entityType: Invocation, sessionId=fbf051b2-ac01-449d-bcf7-46af56cff035, timestamp: 2020-02-19T11:00:39.272Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3141468589333702069)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-4062233690476868824-702946731595943424)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3141468589333702069))]), frozenFiber=2266A6366B8D796743A21D6239B387B8C0258938E2546A2C9C6096F0B117BD20), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.EcoIssueFlowResponder@5241f362, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6caeec12], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=93320480-8754-47ba-a613-be96f7340bed) {fiber-id=10000002, flow-id=a19ca80a-7704-4e1a-bfbf-8b998b1f8b67, invocation_id=fbf051b2-ac01-449d-bcf7-46af56cff035, invocation_timestamp=2020-02-19T11:00:39.272Z, origin=O=Mock Company 1, L=London, C=GB, session_id=fbf051b2-ac01-449d-bcf7-46af56cff035, session_timestamp=2020-02-19T11:00:39.272Z, thread-id=147, tx_id=344F15FE98D91ACBA4BC7C44840B9580638AA5B0F8364BBD448EB29381A552EA}
[INFO ] 2020-02-19T11:00:39,437Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] has error [0] {fiber-id=10000002, flow-id=a19ca80a-7704-4e1a-bfbf-8b998b1f8b67, invocation_id=fbf051b2-ac01-449d-bcf7-46af56cff035, invocation_timestamp=2020-02-19T11:00:39.272Z, origin=O=Mock Company 1, L=London, C=GB, session_id=fbf051b2-ac01-449d-bcf7-46af56cff035, session_timestamp=2020-02-19T11:00:39.272Z, thread-id=147, tx_id=344F15FE98D91ACBA4BC7C44840B9580638AA5B0F8364BBD448EB29381A552EA}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3141468589333702069) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-19T11:00:39,439Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] error allowed to propagate {fiber-id=10000002, flow-id=a19ca80a-7704-4e1a-bfbf-8b998b1f8b67, invocation_id=fbf051b2-ac01-449d-bcf7-46af56cff035, invocation_timestamp=2020-02-19T11:00:39.272Z, origin=O=Mock Company 1, L=London, C=GB, session_id=fbf051b2-ac01-449d-bcf7-46af56cff035, session_timestamp=2020-02-19T11:00:39.272Z, thread-id=147, tx_id=344F15FE98D91ACBA4BC7C44840B9580638AA5B0F8364BBD448EB29381A552EA}
[WARN ] 2020-02-19T11:00:39,465Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] errored, dumping all transitions:

 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.296Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[a19ca80a-7704-4e1a-bfbf-8b998b1f8b67], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=fbf051b2-ac01-449d-bcf7-46af56cff035, timestamp: 2020-02-19T11:00:39.272Z, entityType: Invocation, sessionId=fbf051b2-ac01-449d-bcf7-46af56cff035, timestamp: 2020-02-19T11:00:39.272Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=B96DC5D5B60D3FE3D1DBD327E71A9A37939C86EC7624B3E6C4F7CD68D2DE6469), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1080fb75])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1080fb75])
    SignalFlowHasStarted(flowId=[a19ca80a-7704-4e1a-bfbf-8b998b1f8b67])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=4062233690476868824), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-3141468589333702069), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-4062233690476868824-702946731595943424-0-0), senderUUID=93320480-8754-47ba-a613-be96f7340bed))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1080fb75]
    []
isAnyCheckpointPersisted: 
    false
    true
checkpoint.sessions.SessionId(toLong=-3141468589333702069): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4062233690476868824)), errors=[], deduplicationSeed=D-4062233690476868824-702946731595943424)


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.300Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.303Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.318Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3141468589333702069))]), maySkipCheckpoint=false, fiber=C3A27990798045623C6DD5C1CA6BDE80C25AC63A0F0C18CF03F6E33E0D938503, )
  Actions: 
    PersistCheckpoint(id=[a19ca80a-7704-4e1a-bfbf-8b998b1f8b67], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=fbf051b2-ac01-449d-bcf7-46af56cff035, timestamp: 2020-02-19T11:00:39.272Z, entityType: Invocation, sessionId=fbf051b2-ac01-449d-bcf7-46af56cff035, timestamp: 2020-02-19T11:00:39.272Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3141468589333702069)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4062233690476868824)), errors=[], deduplicationSeed=D-4062233690476868824-702946731595943424)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3141468589333702069))]), frozenFiber=C3A27990798045623C6DD5C1CA6BDE80C25AC63A0F0C18CF03F6E33E0D938503), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=B96DC5D5B60D3FE3D1DBD327E71A9A37939C86EC7624B3E6C4F7CD68D2DE6469)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3141468589333702069))]), frozenFiber=C3A27990798045623C6DD5C1CA6BDE80C25AC63A0F0C18CF03F6E33E0D938503)


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.321Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-3141468589333702069).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.337Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.359Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3141468589333702069))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=E04ECF17F62BAA9B9BFFBA6BE931D47E7A9BF286B3B8AD65730ADF99DF61C208, )
  Actions: 
    PersistCheckpoint(id=[a19ca80a-7704-4e1a-bfbf-8b998b1f8b67], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=fbf051b2-ac01-449d-bcf7-46af56cff035, timestamp: 2020-02-19T11:00:39.272Z, entityType: Invocation, sessionId=fbf051b2-ac01-449d-bcf7-46af56cff035, timestamp: 2020-02-19T11:00:39.272Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3141468589333702069)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4062233690476868824)), errors=[], deduplicationSeed=D-4062233690476868824-702946731595943424)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3141468589333702069))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=E04ECF17F62BAA9B9BFFBA6BE931D47E7A9BF286B3B8AD65730ADF99DF61C208), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    1
    2
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3141468589333702069))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3141468589333702069))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    C3A27990798045623C6DD5C1CA6BDE80C25AC63A0F0C18CF03F6E33E0D938503
    E04ECF17F62BAA9B9BFFBA6BE931D47E7A9BF286B3B8AD65730ADF99DF61C208


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.363Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=4062233690476868824), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-4062233690476868824-702946731595943424-2-0), senderUUID=93320480-8754-47ba-a613-be96f7340bed))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.366Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.373Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.377Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3141468589333702069))]), maySkipCheckpoint=false, fiber=2266A6366B8D796743A21D6239B387B8C0258938E2546A2C9C6096F0B117BD20, )
  Actions: 
    PersistCheckpoint(id=[a19ca80a-7704-4e1a-bfbf-8b998b1f8b67], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=fbf051b2-ac01-449d-bcf7-46af56cff035, timestamp: 2020-02-19T11:00:39.272Z, entityType: Invocation, sessionId=fbf051b2-ac01-449d-bcf7-46af56cff035, timestamp: 2020-02-19T11:00:39.272Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3141468589333702069)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4062233690476868824)), errors=[], deduplicationSeed=D-4062233690476868824-702946731595943424)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3141468589333702069))]), frozenFiber=2266A6366B8D796743A21D6239B387B8C0258938E2546A2C9C6096F0B117BD20), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    2
    3
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3141468589333702069))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3141468589333702069))])
checkpoint.flowState.frozenFiber.hash: 
    E04ECF17F62BAA9B9BFFBA6BE931D47E7A9BF286B3B8AD65730ADF99DF61C208
    2266A6366B8D796743A21D6239B387B8C0258938E2546A2C9C6096F0B117BD20


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.377Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.429Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3141468589333702069), payload=net.corda.node.services.statemachine.EndSessionMessage@2aea6432), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6caeec12, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6caeec12]
checkpoint.sessions.SessionId(toLong=-3141468589333702069).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=4062233690476868824))
    Ended


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.430Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3141468589333702069) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.431Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)]


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.441Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3141468589333702069) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=3495843964421941842, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3141468589333702069) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.446Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.447Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=a19ca80a-7704-4e1a-bfbf-8b998b1f8b67, invocation_id=fbf051b2-ac01-449d-bcf7-46af56cff035, invocation_timestamp=2020-02-19T11:00:39.272Z, origin=O=Mock Company 1, L=London, C=GB, session_id=fbf051b2-ac01-449d-bcf7-46af56cff035, session_timestamp=2020-02-19T11:00:39.272Z, thread-id=147, tx_id=344F15FE98D91ACBA4BC7C44840B9580638AA5B0F8364BBD448EB29381A552EA}
[WARN ] 2020-02-19T11:00:39,465Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=a19ca80a-7704-4e1a-bfbf-8b998b1f8b67, invocation_id=fbf051b2-ac01-449d-bcf7-46af56cff035, invocation_timestamp=2020-02-19T11:00:39.272Z, origin=O=Mock Company 1, L=London, C=GB, session_id=fbf051b2-ac01-449d-bcf7-46af56cff035, session_timestamp=2020-02-19T11:00:39.272Z, thread-id=147, tx_id=344F15FE98D91ACBA4BC7C44840B9580638AA5B0F8364BBD448EB29381A552EA}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3141468589333702069) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-19T11:00:39,468Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000002, flow-id=a19ca80a-7704-4e1a-bfbf-8b998b1f8b67, invocation_id=fbf051b2-ac01-449d-bcf7-46af56cff035, invocation_timestamp=2020-02-19T11:00:39.272Z, origin=O=Mock Company 1, L=London, C=GB, session_id=fbf051b2-ac01-449d-bcf7-46af56cff035, session_timestamp=2020-02-19T11:00:39.272Z, thread-id=147, tx_id=344F15FE98D91ACBA4BC7C44840B9580638AA5B0F8364BBD448EB29381A552EA}
[WARN ] 2020-02-19T11:00:39,506Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] errored, dumping all transitions:

 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.296Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[a19ca80a-7704-4e1a-bfbf-8b998b1f8b67], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=fbf051b2-ac01-449d-bcf7-46af56cff035, timestamp: 2020-02-19T11:00:39.272Z, entityType: Invocation, sessionId=fbf051b2-ac01-449d-bcf7-46af56cff035, timestamp: 2020-02-19T11:00:39.272Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=B96DC5D5B60D3FE3D1DBD327E71A9A37939C86EC7624B3E6C4F7CD68D2DE6469), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1080fb75])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1080fb75])
    SignalFlowHasStarted(flowId=[a19ca80a-7704-4e1a-bfbf-8b998b1f8b67])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=4062233690476868824), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-3141468589333702069), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-4062233690476868824-702946731595943424-0-0), senderUUID=93320480-8754-47ba-a613-be96f7340bed))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1080fb75]
    []
isAnyCheckpointPersisted: 
    false
    true
checkpoint.sessions.SessionId(toLong=-3141468589333702069): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4062233690476868824)), errors=[], deduplicationSeed=D-4062233690476868824-702946731595943424)


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.300Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.303Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.318Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3141468589333702069))]), maySkipCheckpoint=false, fiber=C3A27990798045623C6DD5C1CA6BDE80C25AC63A0F0C18CF03F6E33E0D938503, )
  Actions: 
    PersistCheckpoint(id=[a19ca80a-7704-4e1a-bfbf-8b998b1f8b67], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=fbf051b2-ac01-449d-bcf7-46af56cff035, timestamp: 2020-02-19T11:00:39.272Z, entityType: Invocation, sessionId=fbf051b2-ac01-449d-bcf7-46af56cff035, timestamp: 2020-02-19T11:00:39.272Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3141468589333702069)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4062233690476868824)), errors=[], deduplicationSeed=D-4062233690476868824-702946731595943424)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3141468589333702069))]), frozenFiber=C3A27990798045623C6DD5C1CA6BDE80C25AC63A0F0C18CF03F6E33E0D938503), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=B96DC5D5B60D3FE3D1DBD327E71A9A37939C86EC7624B3E6C4F7CD68D2DE6469)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3141468589333702069))]), frozenFiber=C3A27990798045623C6DD5C1CA6BDE80C25AC63A0F0C18CF03F6E33E0D938503)


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.321Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-3141468589333702069).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.337Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.359Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3141468589333702069))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=E04ECF17F62BAA9B9BFFBA6BE931D47E7A9BF286B3B8AD65730ADF99DF61C208, )
  Actions: 
    PersistCheckpoint(id=[a19ca80a-7704-4e1a-bfbf-8b998b1f8b67], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=fbf051b2-ac01-449d-bcf7-46af56cff035, timestamp: 2020-02-19T11:00:39.272Z, entityType: Invocation, sessionId=fbf051b2-ac01-449d-bcf7-46af56cff035, timestamp: 2020-02-19T11:00:39.272Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3141468589333702069)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4062233690476868824)), errors=[], deduplicationSeed=D-4062233690476868824-702946731595943424)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3141468589333702069))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=E04ECF17F62BAA9B9BFFBA6BE931D47E7A9BF286B3B8AD65730ADF99DF61C208), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    1
    2
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3141468589333702069))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3141468589333702069))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    C3A27990798045623C6DD5C1CA6BDE80C25AC63A0F0C18CF03F6E33E0D938503
    E04ECF17F62BAA9B9BFFBA6BE931D47E7A9BF286B3B8AD65730ADF99DF61C208


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.363Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=4062233690476868824), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-4062233690476868824-702946731595943424-2-0), senderUUID=93320480-8754-47ba-a613-be96f7340bed))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.366Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.373Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.377Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3141468589333702069))]), maySkipCheckpoint=false, fiber=2266A6366B8D796743A21D6239B387B8C0258938E2546A2C9C6096F0B117BD20, )
  Actions: 
    PersistCheckpoint(id=[a19ca80a-7704-4e1a-bfbf-8b998b1f8b67], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=fbf051b2-ac01-449d-bcf7-46af56cff035, timestamp: 2020-02-19T11:00:39.272Z, entityType: Invocation, sessionId=fbf051b2-ac01-449d-bcf7-46af56cff035, timestamp: 2020-02-19T11:00:39.272Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3141468589333702069)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4062233690476868824)), errors=[], deduplicationSeed=D-4062233690476868824-702946731595943424)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3141468589333702069))]), frozenFiber=2266A6366B8D796743A21D6239B387B8C0258938E2546A2C9C6096F0B117BD20), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    2
    3
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3141468589333702069))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3141468589333702069))])
checkpoint.flowState.frozenFiber.hash: 
    E04ECF17F62BAA9B9BFFBA6BE931D47E7A9BF286B3B8AD65730ADF99DF61C208
    2266A6366B8D796743A21D6239B387B8C0258938E2546A2C9C6096F0B117BD20


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.377Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.429Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3141468589333702069), payload=net.corda.node.services.statemachine.EndSessionMessage@2aea6432), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6caeec12, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6caeec12]
checkpoint.sessions.SessionId(toLong=-3141468589333702069).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=4062233690476868824))
    Ended


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.430Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3141468589333702069) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.431Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)]


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.441Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3141468589333702069) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=3495843964421941842, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3141468589333702069) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.446Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.447Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] ---
  Timestamp: 2020-02-19T11:00:39.494Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=3495843964421941842)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-4062233690476868824-702946731595943424)], senderUUID=93320480-8754-47ba-a613-be96f7340bed)
    CreateTransaction
    RemoveCheckpoint(id=[a19ca80a-7704-4e1a-bfbf-8b998b1f8b67])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6caeec12])
    ReleaseSoftLocks(uuid=a19ca80a-7704-4e1a-bfbf-8b998b1f8b67)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6caeec12])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-3141468589333702069)])
    RemoveFlow(flowId=[a19ca80a-7704-4e1a-bfbf-8b998b1f8b67], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=3495843964421941842, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3141468589333702069) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=fbf051b2-ac01-449d-bcf7-46af56cff035, timestamp: 2020-02-19T11:00:39.272Z, entityType: Invocation, sessionId=fbf051b2-ac01-449d-bcf7-46af56cff035, timestamp: 2020-02-19T11:00:39.272Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3141468589333702069)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-4062233690476868824-702946731595943424)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3141468589333702069))]), frozenFiber=2266A6366B8D796743A21D6239B387B8C0258938E2546A2C9C6096F0B117BD20), errorState=Errored(errors=[FlowError(errorId=3495843964421941842, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3141468589333702069) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.EcoIssueFlowResponder@5241f362, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=93320480-8754-47ba-a613-be96f7340bed))
  Continuation: Abort
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6caeec12]
    []
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {fiber-id=10000002, flow-id=a19ca80a-7704-4e1a-bfbf-8b998b1f8b67, invocation_id=fbf051b2-ac01-449d-bcf7-46af56cff035, invocation_timestamp=2020-02-19T11:00:39.272Z, origin=O=Mock Company 1, L=London, C=GB, session_id=fbf051b2-ac01-449d-bcf7-46af56cff035, session_timestamp=2020-02-19T11:00:39.272Z, thread-id=147, tx_id=344F15FE98D91ACBA4BC7C44840B9580638AA5B0F8364BBD448EB29381A552EA}
[WARN ] 2020-02-19T11:00:39,506Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [a19ca80a-7704-4e1a-bfbf-8b998b1f8b67] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=a19ca80a-7704-4e1a-bfbf-8b998b1f8b67, invocation_id=fbf051b2-ac01-449d-bcf7-46af56cff035, invocation_timestamp=2020-02-19T11:00:39.272Z, origin=O=Mock Company 1, L=London, C=GB, session_id=fbf051b2-ac01-449d-bcf7-46af56cff035, session_timestamp=2020-02-19T11:00:39.272Z, thread-id=147, tx_id=344F15FE98D91ACBA4BC7C44840B9580638AA5B0F8364BBD448EB29381A552EA}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3141468589333702069) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-19T11:00:54,558Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in D:\FTI\Git\CorDApp\bootcamp-cordapp ... {}
[INFO ] 2020-02-19T11:00:56,374Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-110049.277\nodes\0\cordapps] {}
[INFO ] 2020-02-19T11:00:56,378Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110049.277/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T11:00:56,399Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110049.277/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T11:00:56,471Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T11:00:57,045Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T11:00:57,134Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:00:57,135Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:00:57,315Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T11:00:49.217Z
      epoch=1
  } {}
[INFO ] 2020-02-19T11:01:01,591Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T11:01:01,596Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-110049.277\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T11:01:01,596Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T11:01:01,598Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T11:01:01,655Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:01:01,660Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:01:03,592Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:01:04,216Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T11:01:04,277Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T11:01:04,304Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:01:04,304Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:01:04,663Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:01:04,676Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T11:01:04,676Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110064676) {}
[INFO ] 2020-02-19T11:01:04,684Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:01:04,863Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110064676) {}
[INFO ] 2020-02-19T11:01:04,946Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T11:01:04,965Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110064676) {}
[INFO ] 2020-02-19T11:01:05,003Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:01:05,160Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A uploader=app filename=null {}
[INFO ] 2020-02-19T11:01:05,163Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-19T11:01:05,167Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-19T11:01:05,467Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110064676) {}
[INFO ] 2020-02-19T11:01:05,485Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110064676) {}
[INFO ] 2020-02-19T11:01:05,487Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:01:05,487Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110064676) {}
[INFO ] 2020-02-19T11:01:05,487Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:01:05,499Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-110049.277\nodes\1\cordapps] {}
[INFO ] 2020-02-19T11:01:05,500Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110049.277/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T11:01:05,500Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110049.277/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T11:01:05,524Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T11:01:05,532Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T11:01:05,572Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:01:05,572Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:01:05,576Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T11:00:49.217Z
      epoch=1
  } {}
[INFO ] 2020-02-19T11:01:06,235Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T11:01:06,238Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-110049.277\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T11:01:06,239Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T11:01:06,241Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T11:01:06,244Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:01:06,244Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:01:06,392Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:01:06,404Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T11:01:06,414Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T11:01:06,418Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-19T11:01:06,445Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T11:01:06,445Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T11:01:06,584Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T11:01:06,590Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T11:01:06,590Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110066590) {}
[INFO ] 2020-02-19T11:01:06,593Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:01:06,604Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110066590) {}
[INFO ] 2020-02-19T11:01:06,621Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T11:01:06,625Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110066590) {}
[INFO ] 2020-02-19T11:01:06,632Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:01:06,812Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A uploader=app filename=null {}
[INFO ] 2020-02-19T11:01:06,822Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110066590) {}
[INFO ] 2020-02-19T11:01:06,825Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110064676) {}
[INFO ] 2020-02-19T11:01:06,827Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:01:06,839Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110066590) {}
[INFO ] 2020-02-19T11:01:06,840Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:01:06,853Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110066590) {}
[INFO ] 2020-02-19T11:01:06,853Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:01:06,853Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110066590) {}
[INFO ] 2020-02-19T11:01:06,853Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:01:06,864Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-110049.277\nodes\2\cordapps] {}
[INFO ] 2020-02-19T11:01:06,865Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110049.277/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T11:01:06,865Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110049.277/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T11:01:06,889Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T11:01:06,898Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T11:01:06,925Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:01:06,925Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:01:06,929Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T11:00:49.217Z
      epoch=1
  } {}
[INFO ] 2020-02-19T11:01:07,444Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T11:01:07,447Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-110049.277\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T11:01:07,447Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T11:01:07,450Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T11:01:07,452Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:01:07,452Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:01:07,545Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:01:07,556Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T11:01:07,559Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T11:01:07,560Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-19T11:01:07,584Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T11:01:07,584Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T11:01:07,708Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T11:01:07,714Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T11:01:07,715Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110067714) {}
[INFO ] 2020-02-19T11:01:07,717Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:01:07,726Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110067714) {}
[INFO ] 2020-02-19T11:01:07,742Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T11:01:07,747Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110067714) {}
[INFO ] 2020-02-19T11:01:07,754Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:01:07,880Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A uploader=app filename=null {}
[INFO ] 2020-02-19T11:01:07,887Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110067714) {}
[INFO ] 2020-02-19T11:01:07,890Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110064676) {}
[INFO ] 2020-02-19T11:01:07,891Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:01:07,902Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110067714) {}
[INFO ] 2020-02-19T11:01:07,903Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:01:07,915Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110066590) {}
[INFO ] 2020-02-19T11:01:07,917Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:01:07,928Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110067714) {}
[INFO ] 2020-02-19T11:01:07,930Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:01:07,942Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110067714) {}
[INFO ] 2020-02-19T11:01:07,942Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:01:07,942Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110067714) {}
[INFO ] 2020-02-19T11:01:07,942Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-19T11:01:08,260Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ef563781-9bf8-4498-818e-70a9e0f4c612, invocation_id=a4e38889-d9d9-489b-8c66-797bc52591fa, invocation_timestamp=2020-02-19T11:01:07.978Z, origin=Only For Testing, session_id=a4e38889-d9d9-489b-8c66-797bc52591fa, session_timestamp=2020-02-19T11:01:07.978Z, thread-id=147}
[WARN ] 2020-02-19T11:01:08,260Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.EcoIssueContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ef563781-9bf8-4498-818e-70a9e0f4c612, invocation_id=a4e38889-d9d9-489b-8c66-797bc52591fa, invocation_timestamp=2020-02-19T11:01:07.978Z, origin=Only For Testing, session_id=a4e38889-d9d9-489b-8c66-797bc52591fa, session_timestamp=2020-02-19T11:01:07.978Z, thread-id=147}
[INFO ] 2020-02-19T11:01:09,787Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ef563781-9bf8-4498-818e-70a9e0f4c612, invocation_id=a4e38889-d9d9-489b-8c66-797bc52591fa, invocation_timestamp=2020-02-19T11:01:07.978Z, origin=Only For Testing, session_id=a4e38889-d9d9-489b-8c66-797bc52591fa, session_timestamp=2020-02-19T11:01:07.978Z, thread-id=147, tx_id=8696C5CDC49FE922FC5FE87341B46DCDA5174EC06EB63C9A85DF75F7C4AB05CC}
[INFO ] 2020-02-19T11:01:09,787Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ef563781-9bf8-4498-818e-70a9e0f4c612, invocation_id=a4e38889-d9d9-489b-8c66-797bc52591fa, invocation_timestamp=2020-02-19T11:01:07.978Z, origin=Only For Testing, session_id=a4e38889-d9d9-489b-8c66-797bc52591fa, session_timestamp=2020-02-19T11:01:07.978Z, thread-id=147, tx_id=8696C5CDC49FE922FC5FE87341B46DCDA5174EC06EB63C9A85DF75F7C4AB05CC}
[INFO ] 2020-02-19T11:01:09,898Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ef563781-9bf8-4498-818e-70a9e0f4c612, invocation_id=a4e38889-d9d9-489b-8c66-797bc52591fa, invocation_timestamp=2020-02-19T11:01:07.978Z, origin=Only For Testing, session_id=a4e38889-d9d9-489b-8c66-797bc52591fa, session_timestamp=2020-02-19T11:01:07.978Z, thread-id=147, tx_id=8696C5CDC49FE922FC5FE87341B46DCDA5174EC06EB63C9A85DF75F7C4AB05CC}
[INFO ] 2020-02-19T11:01:10,146Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=9d61a09c-dfd4-412f-8c70-450786160924, invocation_id=30dab02e-0bdd-4899-9c43-bc6665daba31, invocation_timestamp=2020-02-19T11:01:10.035Z, origin=O=Mock Company 1, L=London, C=GB, session_id=30dab02e-0bdd-4899-9c43-bc6665daba31, session_timestamp=2020-02-19T11:01:10.035Z, thread-id=147, tx_id=8696C5CDC49FE922FC5FE87341B46DCDA5174EC06EB63C9A85DF75F7C4AB05CC}
[WARN ] 2020-02-19T11:01:10,158Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=9d61a09c-dfd4-412f-8c70-450786160924, invocation_id=30dab02e-0bdd-4899-9c43-bc6665daba31, invocation_timestamp=2020-02-19T11:01:10.035Z, origin=O=Mock Company 1, L=London, C=GB, session_id=30dab02e-0bdd-4899-9c43-bc6665daba31, session_timestamp=2020-02-19T11:01:10.035Z, thread-id=147, tx_id=8696C5CDC49FE922FC5FE87341B46DCDA5174EC06EB63C9A85DF75F7C4AB05CC}
[INFO ] 2020-02-19T11:01:10,188Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=9d61a09c-dfd4-412f-8c70-450786160924, invocation_id=30dab02e-0bdd-4899-9c43-bc6665daba31, invocation_timestamp=2020-02-19T11:01:10.035Z, origin=O=Mock Company 1, L=London, C=GB, session_id=30dab02e-0bdd-4899-9c43-bc6665daba31, session_timestamp=2020-02-19T11:01:10.035Z, thread-id=147, tx_id=8696C5CDC49FE922FC5FE87341B46DCDA5174EC06EB63C9A85DF75F7C4AB05CC}
[INFO ] 2020-02-19T11:01:10,219Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ef563781-9bf8-4498-818e-70a9e0f4c612, invocation_id=a4e38889-d9d9-489b-8c66-797bc52591fa, invocation_timestamp=2020-02-19T11:01:07.978Z, origin=Only For Testing, session_id=a4e38889-d9d9-489b-8c66-797bc52591fa, session_timestamp=2020-02-19T11:01:07.978Z, thread-id=147, tx_id=8696C5CDC49FE922FC5FE87341B46DCDA5174EC06EB63C9A85DF75F7C4AB05CC}
[INFO ] 2020-02-19T11:01:10,219Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ef563781-9bf8-4498-818e-70a9e0f4c612, invocation_id=a4e38889-d9d9-489b-8c66-797bc52591fa, invocation_timestamp=2020-02-19T11:01:07.978Z, origin=Only For Testing, session_id=a4e38889-d9d9-489b-8c66-797bc52591fa, session_timestamp=2020-02-19T11:01:07.978Z, thread-id=147, tx_id=8696C5CDC49FE922FC5FE87341B46DCDA5174EC06EB63C9A85DF75F7C4AB05CC}
[INFO ] 2020-02-19T11:01:10,250Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000002, flow-id=9d61a09c-dfd4-412f-8c70-450786160924, invocation_id=30dab02e-0bdd-4899-9c43-bc6665daba31, invocation_timestamp=2020-02-19T11:01:10.035Z, origin=O=Mock Company 1, L=London, C=GB, session_id=30dab02e-0bdd-4899-9c43-bc6665daba31, session_timestamp=2020-02-19T11:01:10.035Z, thread-id=147, tx_id=8696C5CDC49FE922FC5FE87341B46DCDA5174EC06EB63C9A85DF75F7C4AB05CC}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-847818199770022226) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-19T11:01:10,253Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [9d61a09c-dfd4-412f-8c70-450786160924] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=30dab02e-0bdd-4899-9c43-bc6665daba31, timestamp: 2020-02-19T11:01:10.035Z, entityType: Invocation, sessionId=30dab02e-0bdd-4899-9c43-bc6665daba31, timestamp: 2020-02-19T11:01:10.035Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-847818199770022226)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-2463614518977972477-9007027606288004599)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-847818199770022226))]), frozenFiber=409827DB191F02F69F8C4C085763EF46743923312F57F0FA40CEEC4E392D186D), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.EcoIssueFlowResponder@224a0a5, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2bd099ab], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=ac74122c-034f-4173-8801-d6ef5997aa73) {fiber-id=10000002, flow-id=9d61a09c-dfd4-412f-8c70-450786160924, invocation_id=30dab02e-0bdd-4899-9c43-bc6665daba31, invocation_timestamp=2020-02-19T11:01:10.035Z, origin=O=Mock Company 1, L=London, C=GB, session_id=30dab02e-0bdd-4899-9c43-bc6665daba31, session_timestamp=2020-02-19T11:01:10.035Z, thread-id=147, tx_id=8696C5CDC49FE922FC5FE87341B46DCDA5174EC06EB63C9A85DF75F7C4AB05CC}
[INFO ] 2020-02-19T11:01:10,255Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [9d61a09c-dfd4-412f-8c70-450786160924] has error [0] {fiber-id=10000002, flow-id=9d61a09c-dfd4-412f-8c70-450786160924, invocation_id=30dab02e-0bdd-4899-9c43-bc6665daba31, invocation_timestamp=2020-02-19T11:01:10.035Z, origin=O=Mock Company 1, L=London, C=GB, session_id=30dab02e-0bdd-4899-9c43-bc6665daba31, session_timestamp=2020-02-19T11:01:10.035Z, thread-id=147, tx_id=8696C5CDC49FE922FC5FE87341B46DCDA5174EC06EB63C9A85DF75F7C4AB05CC}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-847818199770022226) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-19T11:01:10,257Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [9d61a09c-dfd4-412f-8c70-450786160924] error allowed to propagate {fiber-id=10000002, flow-id=9d61a09c-dfd4-412f-8c70-450786160924, invocation_id=30dab02e-0bdd-4899-9c43-bc6665daba31, invocation_timestamp=2020-02-19T11:01:10.035Z, origin=O=Mock Company 1, L=London, C=GB, session_id=30dab02e-0bdd-4899-9c43-bc6665daba31, session_timestamp=2020-02-19T11:01:10.035Z, thread-id=147, tx_id=8696C5CDC49FE922FC5FE87341B46DCDA5174EC06EB63C9A85DF75F7C4AB05CC}
[WARN ] 2020-02-19T11:01:10,281Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [9d61a09c-dfd4-412f-8c70-450786160924] errored, dumping all transitions:

 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.064Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[9d61a09c-dfd4-412f-8c70-450786160924], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=30dab02e-0bdd-4899-9c43-bc6665daba31, timestamp: 2020-02-19T11:01:10.035Z, entityType: Invocation, sessionId=30dab02e-0bdd-4899-9c43-bc6665daba31, timestamp: 2020-02-19T11:01:10.035Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=9CDB4ECBCB9E6E1C0A049CA0AE8B19D63A3244858FC8D715F2489FDCBA57F171), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@71bf10ab])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@71bf10ab])
    SignalFlowHasStarted(flowId=[9d61a09c-dfd4-412f-8c70-450786160924])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2463614518977972477), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-847818199770022226), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-2463614518977972477-9007027606288004599-0-0), senderUUID=ac74122c-034f-4173-8801-d6ef5997aa73))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-847818199770022226): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2463614518977972477)), errors=[], deduplicationSeed=D-2463614518977972477-9007027606288004599)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@71bf10ab]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.110Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.114Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.137Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-847818199770022226))]), maySkipCheckpoint=false, fiber=040E72DBE4ECF78C32CB3EF7190E666F7BC760148AF753BE9E91163A79EE9114, )
  Actions: 
    PersistCheckpoint(id=[9d61a09c-dfd4-412f-8c70-450786160924], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=30dab02e-0bdd-4899-9c43-bc6665daba31, timestamp: 2020-02-19T11:01:10.035Z, entityType: Invocation, sessionId=30dab02e-0bdd-4899-9c43-bc6665daba31, timestamp: 2020-02-19T11:01:10.035Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-847818199770022226)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2463614518977972477)), errors=[], deduplicationSeed=D-2463614518977972477-9007027606288004599)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-847818199770022226))]), frozenFiber=040E72DBE4ECF78C32CB3EF7190E666F7BC760148AF753BE9E91163A79EE9114), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=9CDB4ECBCB9E6E1C0A049CA0AE8B19D63A3244858FC8D715F2489FDCBA57F171)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-847818199770022226))]), frozenFiber=040E72DBE4ECF78C32CB3EF7190E666F7BC760148AF753BE9E91163A79EE9114)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.142Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-847818199770022226).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.159Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.182Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-847818199770022226))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=8A3A8FDB65FA19910EB1BEE1801AC67051C6A9053E12572F75914EEF09905D3B, )
  Actions: 
    PersistCheckpoint(id=[9d61a09c-dfd4-412f-8c70-450786160924], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=30dab02e-0bdd-4899-9c43-bc6665daba31, timestamp: 2020-02-19T11:01:10.035Z, entityType: Invocation, sessionId=30dab02e-0bdd-4899-9c43-bc6665daba31, timestamp: 2020-02-19T11:01:10.035Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-847818199770022226)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2463614518977972477)), errors=[], deduplicationSeed=D-2463614518977972477-9007027606288004599)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-847818199770022226))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=8A3A8FDB65FA19910EB1BEE1801AC67051C6A9053E12572F75914EEF09905D3B), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-847818199770022226))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-847818199770022226))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    040E72DBE4ECF78C32CB3EF7190E666F7BC760148AF753BE9E91163A79EE9114
    8A3A8FDB65FA19910EB1BEE1801AC67051C6A9053E12572F75914EEF09905D3B
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.186Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2463614518977972477), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-2463614518977972477-9007027606288004599-2-0), senderUUID=ac74122c-034f-4173-8801-d6ef5997aa73))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.188Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.195Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.201Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-847818199770022226))]), maySkipCheckpoint=false, fiber=409827DB191F02F69F8C4C085763EF46743923312F57F0FA40CEEC4E392D186D, )
  Actions: 
    PersistCheckpoint(id=[9d61a09c-dfd4-412f-8c70-450786160924], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=30dab02e-0bdd-4899-9c43-bc6665daba31, timestamp: 2020-02-19T11:01:10.035Z, entityType: Invocation, sessionId=30dab02e-0bdd-4899-9c43-bc6665daba31, timestamp: 2020-02-19T11:01:10.035Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-847818199770022226)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2463614518977972477)), errors=[], deduplicationSeed=D-2463614518977972477-9007027606288004599)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-847818199770022226))]), frozenFiber=409827DB191F02F69F8C4C085763EF46743923312F57F0FA40CEEC4E392D186D), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-847818199770022226))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-847818199770022226))])
checkpoint.flowState.frozenFiber.hash: 
    8A3A8FDB65FA19910EB1BEE1801AC67051C6A9053E12572F75914EEF09905D3B
    409827DB191F02F69F8C4C085763EF46743923312F57F0FA40CEEC4E392D186D
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.201Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.249Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-847818199770022226), payload=net.corda.node.services.statemachine.EndSessionMessage@7816b3b7), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2bd099ab, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-847818199770022226).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=2463614518977972477))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2bd099ab]


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.250Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-847818199770022226) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.250Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)]


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.259Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-847818199770022226) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=4121899772259873712, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-847818199770022226) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.263Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.264Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=9d61a09c-dfd4-412f-8c70-450786160924, invocation_id=30dab02e-0bdd-4899-9c43-bc6665daba31, invocation_timestamp=2020-02-19T11:01:10.035Z, origin=O=Mock Company 1, L=London, C=GB, session_id=30dab02e-0bdd-4899-9c43-bc6665daba31, session_timestamp=2020-02-19T11:01:10.035Z, thread-id=147, tx_id=8696C5CDC49FE922FC5FE87341B46DCDA5174EC06EB63C9A85DF75F7C4AB05CC}
[WARN ] 2020-02-19T11:01:10,281Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [9d61a09c-dfd4-412f-8c70-450786160924] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=9d61a09c-dfd4-412f-8c70-450786160924, invocation_id=30dab02e-0bdd-4899-9c43-bc6665daba31, invocation_timestamp=2020-02-19T11:01:10.035Z, origin=O=Mock Company 1, L=London, C=GB, session_id=30dab02e-0bdd-4899-9c43-bc6665daba31, session_timestamp=2020-02-19T11:01:10.035Z, thread-id=147, tx_id=8696C5CDC49FE922FC5FE87341B46DCDA5174EC06EB63C9A85DF75F7C4AB05CC}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-847818199770022226) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-19T11:01:10,283Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000002, flow-id=9d61a09c-dfd4-412f-8c70-450786160924, invocation_id=30dab02e-0bdd-4899-9c43-bc6665daba31, invocation_timestamp=2020-02-19T11:01:10.035Z, origin=O=Mock Company 1, L=London, C=GB, session_id=30dab02e-0bdd-4899-9c43-bc6665daba31, session_timestamp=2020-02-19T11:01:10.035Z, thread-id=147, tx_id=8696C5CDC49FE922FC5FE87341B46DCDA5174EC06EB63C9A85DF75F7C4AB05CC}
[WARN ] 2020-02-19T11:01:10,327Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [9d61a09c-dfd4-412f-8c70-450786160924] errored, dumping all transitions:

 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.064Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[9d61a09c-dfd4-412f-8c70-450786160924], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=30dab02e-0bdd-4899-9c43-bc6665daba31, timestamp: 2020-02-19T11:01:10.035Z, entityType: Invocation, sessionId=30dab02e-0bdd-4899-9c43-bc6665daba31, timestamp: 2020-02-19T11:01:10.035Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=9CDB4ECBCB9E6E1C0A049CA0AE8B19D63A3244858FC8D715F2489FDCBA57F171), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@71bf10ab])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@71bf10ab])
    SignalFlowHasStarted(flowId=[9d61a09c-dfd4-412f-8c70-450786160924])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2463614518977972477), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-847818199770022226), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-2463614518977972477-9007027606288004599-0-0), senderUUID=ac74122c-034f-4173-8801-d6ef5997aa73))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-847818199770022226): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2463614518977972477)), errors=[], deduplicationSeed=D-2463614518977972477-9007027606288004599)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@71bf10ab]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.110Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.114Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.137Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-847818199770022226))]), maySkipCheckpoint=false, fiber=040E72DBE4ECF78C32CB3EF7190E666F7BC760148AF753BE9E91163A79EE9114, )
  Actions: 
    PersistCheckpoint(id=[9d61a09c-dfd4-412f-8c70-450786160924], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=30dab02e-0bdd-4899-9c43-bc6665daba31, timestamp: 2020-02-19T11:01:10.035Z, entityType: Invocation, sessionId=30dab02e-0bdd-4899-9c43-bc6665daba31, timestamp: 2020-02-19T11:01:10.035Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-847818199770022226)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2463614518977972477)), errors=[], deduplicationSeed=D-2463614518977972477-9007027606288004599)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-847818199770022226))]), frozenFiber=040E72DBE4ECF78C32CB3EF7190E666F7BC760148AF753BE9E91163A79EE9114), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=9CDB4ECBCB9E6E1C0A049CA0AE8B19D63A3244858FC8D715F2489FDCBA57F171)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-847818199770022226))]), frozenFiber=040E72DBE4ECF78C32CB3EF7190E666F7BC760148AF753BE9E91163A79EE9114)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.142Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-847818199770022226).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.159Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.182Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-847818199770022226))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=8A3A8FDB65FA19910EB1BEE1801AC67051C6A9053E12572F75914EEF09905D3B, )
  Actions: 
    PersistCheckpoint(id=[9d61a09c-dfd4-412f-8c70-450786160924], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=30dab02e-0bdd-4899-9c43-bc6665daba31, timestamp: 2020-02-19T11:01:10.035Z, entityType: Invocation, sessionId=30dab02e-0bdd-4899-9c43-bc6665daba31, timestamp: 2020-02-19T11:01:10.035Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-847818199770022226)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2463614518977972477)), errors=[], deduplicationSeed=D-2463614518977972477-9007027606288004599)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-847818199770022226))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=8A3A8FDB65FA19910EB1BEE1801AC67051C6A9053E12572F75914EEF09905D3B), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-847818199770022226))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-847818199770022226))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    040E72DBE4ECF78C32CB3EF7190E666F7BC760148AF753BE9E91163A79EE9114
    8A3A8FDB65FA19910EB1BEE1801AC67051C6A9053E12572F75914EEF09905D3B
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.186Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2463614518977972477), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-2463614518977972477-9007027606288004599-2-0), senderUUID=ac74122c-034f-4173-8801-d6ef5997aa73))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.188Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.195Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.201Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-847818199770022226))]), maySkipCheckpoint=false, fiber=409827DB191F02F69F8C4C085763EF46743923312F57F0FA40CEEC4E392D186D, )
  Actions: 
    PersistCheckpoint(id=[9d61a09c-dfd4-412f-8c70-450786160924], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=30dab02e-0bdd-4899-9c43-bc6665daba31, timestamp: 2020-02-19T11:01:10.035Z, entityType: Invocation, sessionId=30dab02e-0bdd-4899-9c43-bc6665daba31, timestamp: 2020-02-19T11:01:10.035Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-847818199770022226)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2463614518977972477)), errors=[], deduplicationSeed=D-2463614518977972477-9007027606288004599)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-847818199770022226))]), frozenFiber=409827DB191F02F69F8C4C085763EF46743923312F57F0FA40CEEC4E392D186D), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-847818199770022226))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-847818199770022226))])
checkpoint.flowState.frozenFiber.hash: 
    8A3A8FDB65FA19910EB1BEE1801AC67051C6A9053E12572F75914EEF09905D3B
    409827DB191F02F69F8C4C085763EF46743923312F57F0FA40CEEC4E392D186D
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.201Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.249Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-847818199770022226), payload=net.corda.node.services.statemachine.EndSessionMessage@7816b3b7), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2bd099ab, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-847818199770022226).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=2463614518977972477))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2bd099ab]


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.250Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-847818199770022226) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.250Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)]


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.259Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-847818199770022226) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=4121899772259873712, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-847818199770022226) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.263Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.264Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [9d61a09c-dfd4-412f-8c70-450786160924] ---
  Timestamp: 2020-02-19T11:01:10.321Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=4121899772259873712)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-2463614518977972477-9007027606288004599)], senderUUID=ac74122c-034f-4173-8801-d6ef5997aa73)
    CreateTransaction
    RemoveCheckpoint(id=[9d61a09c-dfd4-412f-8c70-450786160924])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2bd099ab])
    ReleaseSoftLocks(uuid=9d61a09c-dfd4-412f-8c70-450786160924)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2bd099ab])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-847818199770022226)])
    RemoveFlow(flowId=[9d61a09c-dfd4-412f-8c70-450786160924], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=4121899772259873712, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-847818199770022226) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=30dab02e-0bdd-4899-9c43-bc6665daba31, timestamp: 2020-02-19T11:01:10.035Z, entityType: Invocation, sessionId=30dab02e-0bdd-4899-9c43-bc6665daba31, timestamp: 2020-02-19T11:01:10.035Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-847818199770022226)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-2463614518977972477-9007027606288004599)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-847818199770022226))]), frozenFiber=409827DB191F02F69F8C4C085763EF46743923312F57F0FA40CEEC4E392D186D), errorState=Errored(errors=[FlowError(errorId=4121899772259873712, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-847818199770022226) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.EcoIssueFlowResponder@224a0a5, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=ac74122c-034f-4173-8801-d6ef5997aa73))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2bd099ab]
    []
isRemoved: 
    false
    true
 {fiber-id=10000002, flow-id=9d61a09c-dfd4-412f-8c70-450786160924, invocation_id=30dab02e-0bdd-4899-9c43-bc6665daba31, invocation_timestamp=2020-02-19T11:01:10.035Z, origin=O=Mock Company 1, L=London, C=GB, session_id=30dab02e-0bdd-4899-9c43-bc6665daba31, session_timestamp=2020-02-19T11:01:10.035Z, thread-id=147, tx_id=8696C5CDC49FE922FC5FE87341B46DCDA5174EC06EB63C9A85DF75F7C4AB05CC}
[WARN ] 2020-02-19T11:01:10,327Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [9d61a09c-dfd4-412f-8c70-450786160924] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=9d61a09c-dfd4-412f-8c70-450786160924, invocation_id=30dab02e-0bdd-4899-9c43-bc6665daba31, invocation_timestamp=2020-02-19T11:01:10.035Z, origin=O=Mock Company 1, L=London, C=GB, session_id=30dab02e-0bdd-4899-9c43-bc6665daba31, session_timestamp=2020-02-19T11:01:10.035Z, thread-id=147, tx_id=8696C5CDC49FE922FC5FE87341B46DCDA5174EC06EB63C9A85DF75F7C4AB05CC}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-847818199770022226) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-19T11:01:24,680Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in D:\FTI\Git\CorDApp\bootcamp-cordapp ... {}
[INFO ] 2020-02-19T11:01:26,680Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-110119.117\nodes\0\cordapps] {}
[INFO ] 2020-02-19T11:01:26,685Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110119.117/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T11:01:26,708Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110119.117/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T11:01:26,789Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T11:01:27,417Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T11:01:27,488Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:01:27,489Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:01:27,648Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T11:01:19.059Z
      epoch=1
  } {}
[INFO ] 2020-02-19T11:01:31,926Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T11:01:31,930Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-110119.117\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T11:01:31,930Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T11:01:31,933Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T11:01:32,003Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:01:32,010Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:01:33,717Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:01:34,250Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T11:01:34,307Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T11:01:34,332Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:01:34,333Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:01:34,672Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:01:34,681Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T11:01:34,681Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110094681) {}
[INFO ] 2020-02-19T11:01:34,686Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:01:34,836Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110094681) {}
[INFO ] 2020-02-19T11:01:34,902Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T11:01:34,921Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110094681) {}
[INFO ] 2020-02-19T11:01:34,955Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:01:35,113Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A uploader=app filename=null {}
[INFO ] 2020-02-19T11:01:35,119Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-19T11:01:35,123Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-19T11:01:35,428Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110094681) {}
[INFO ] 2020-02-19T11:01:35,445Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110094681) {}
[INFO ] 2020-02-19T11:01:35,446Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:01:35,446Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110094681) {}
[INFO ] 2020-02-19T11:01:35,446Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:01:35,459Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-110119.117\nodes\1\cordapps] {}
[INFO ] 2020-02-19T11:01:35,459Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110119.117/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T11:01:35,459Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110119.117/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T11:01:35,484Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T11:01:35,495Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T11:01:35,542Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:01:35,542Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:01:35,547Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T11:01:19.059Z
      epoch=1
  } {}
[INFO ] 2020-02-19T11:01:36,143Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T11:01:36,146Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-110119.117\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T11:01:36,147Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T11:01:36,149Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T11:01:36,152Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:01:36,152Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:01:36,263Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:01:36,276Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T11:01:36,279Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T11:01:36,280Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-19T11:01:36,310Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T11:01:36,311Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T11:01:36,458Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T11:01:36,465Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T11:01:36,465Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110096465) {}
[INFO ] 2020-02-19T11:01:36,468Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:01:36,478Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110096465) {}
[INFO ] 2020-02-19T11:01:36,495Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T11:01:36,500Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110096465) {}
[INFO ] 2020-02-19T11:01:36,506Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:01:36,623Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A uploader=app filename=null {}
[INFO ] 2020-02-19T11:01:36,631Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110096465) {}
[INFO ] 2020-02-19T11:01:36,634Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110094681) {}
[INFO ] 2020-02-19T11:01:36,635Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:01:36,645Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110096465) {}
[INFO ] 2020-02-19T11:01:36,646Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:01:36,655Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110096465) {}
[INFO ] 2020-02-19T11:01:36,655Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:01:36,655Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110096465) {}
[INFO ] 2020-02-19T11:01:36,655Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:01:36,665Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-110119.117\nodes\2\cordapps] {}
[INFO ] 2020-02-19T11:01:36,666Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110119.117/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T11:01:36,666Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110119.117/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T11:01:36,688Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T11:01:36,695Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T11:01:36,728Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:01:36,729Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:01:36,732Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T11:01:19.059Z
      epoch=1
  } {}
[INFO ] 2020-02-19T11:01:37,236Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T11:01:37,239Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-110119.117\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T11:01:37,239Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T11:01:37,241Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T11:01:37,244Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:01:37,244Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:01:37,348Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:01:37,360Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T11:01:37,363Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T11:01:37,364Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-19T11:01:37,387Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T11:01:37,387Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T11:01:37,525Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T11:01:37,532Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T11:01:37,532Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110097532) {}
[INFO ] 2020-02-19T11:01:37,534Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:01:37,543Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110097532) {}
[INFO ] 2020-02-19T11:01:37,558Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T11:01:37,563Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110097532) {}
[INFO ] 2020-02-19T11:01:37,569Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:01:37,689Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A uploader=app filename=null {}
[INFO ] 2020-02-19T11:01:37,698Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110097532) {}
[INFO ] 2020-02-19T11:01:37,700Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110094681) {}
[INFO ] 2020-02-19T11:01:37,702Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:01:37,713Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110097532) {}
[INFO ] 2020-02-19T11:01:37,714Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:01:37,725Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110096465) {}
[INFO ] 2020-02-19T11:01:37,727Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:01:37,737Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110097532) {}
[INFO ] 2020-02-19T11:01:37,739Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:01:37,749Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110097532) {}
[INFO ] 2020-02-19T11:01:37,749Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:01:37,750Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110097532) {}
[INFO ] 2020-02-19T11:01:37,750Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-19T11:01:37,983Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=30a6637d-b452-4bea-ae45-12e66946ad97, invocation_id=ff28025a-ea1f-4577-81de-6af701fc545b, invocation_timestamp=2020-02-19T11:01:37.780Z, origin=Only For Testing, session_id=ff28025a-ea1f-4577-81de-6af701fc545b, session_timestamp=2020-02-19T11:01:37.780Z, thread-id=147}
[WARN ] 2020-02-19T11:01:37,984Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.EcoIssueContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=30a6637d-b452-4bea-ae45-12e66946ad97, invocation_id=ff28025a-ea1f-4577-81de-6af701fc545b, invocation_timestamp=2020-02-19T11:01:37.780Z, origin=Only For Testing, session_id=ff28025a-ea1f-4577-81de-6af701fc545b, session_timestamp=2020-02-19T11:01:37.780Z, thread-id=147}
[INFO ] 2020-02-19T11:01:39,341Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=30a6637d-b452-4bea-ae45-12e66946ad97, invocation_id=ff28025a-ea1f-4577-81de-6af701fc545b, invocation_timestamp=2020-02-19T11:01:37.780Z, origin=Only For Testing, session_id=ff28025a-ea1f-4577-81de-6af701fc545b, session_timestamp=2020-02-19T11:01:37.780Z, thread-id=147, tx_id=6BA53891CF984AD3DF5F3162D1B2128830D668BCFB3E2883095A6E17FA616A0E}
[INFO ] 2020-02-19T11:01:39,341Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=30a6637d-b452-4bea-ae45-12e66946ad97, invocation_id=ff28025a-ea1f-4577-81de-6af701fc545b, invocation_timestamp=2020-02-19T11:01:37.780Z, origin=Only For Testing, session_id=ff28025a-ea1f-4577-81de-6af701fc545b, session_timestamp=2020-02-19T11:01:37.780Z, thread-id=147, tx_id=6BA53891CF984AD3DF5F3162D1B2128830D668BCFB3E2883095A6E17FA616A0E}
[INFO ] 2020-02-19T11:01:39,396Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=30a6637d-b452-4bea-ae45-12e66946ad97, invocation_id=ff28025a-ea1f-4577-81de-6af701fc545b, invocation_timestamp=2020-02-19T11:01:37.780Z, origin=Only For Testing, session_id=ff28025a-ea1f-4577-81de-6af701fc545b, session_timestamp=2020-02-19T11:01:37.780Z, thread-id=147, tx_id=6BA53891CF984AD3DF5F3162D1B2128830D668BCFB3E2883095A6E17FA616A0E}
[INFO ] 2020-02-19T11:01:39,574Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=4e93a397-cca6-4603-99dc-98e760f6638b, invocation_id=a7eef378-ccdf-4f10-96d2-48f288747e54, invocation_timestamp=2020-02-19T11:01:39.514Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a7eef378-ccdf-4f10-96d2-48f288747e54, session_timestamp=2020-02-19T11:01:39.514Z, thread-id=147, tx_id=6BA53891CF984AD3DF5F3162D1B2128830D668BCFB3E2883095A6E17FA616A0E}
[WARN ] 2020-02-19T11:01:39,583Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=4e93a397-cca6-4603-99dc-98e760f6638b, invocation_id=a7eef378-ccdf-4f10-96d2-48f288747e54, invocation_timestamp=2020-02-19T11:01:39.514Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a7eef378-ccdf-4f10-96d2-48f288747e54, session_timestamp=2020-02-19T11:01:39.514Z, thread-id=147, tx_id=6BA53891CF984AD3DF5F3162D1B2128830D668BCFB3E2883095A6E17FA616A0E}
[INFO ] 2020-02-19T11:01:39,613Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=4e93a397-cca6-4603-99dc-98e760f6638b, invocation_id=a7eef378-ccdf-4f10-96d2-48f288747e54, invocation_timestamp=2020-02-19T11:01:39.514Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a7eef378-ccdf-4f10-96d2-48f288747e54, session_timestamp=2020-02-19T11:01:39.514Z, thread-id=147, tx_id=6BA53891CF984AD3DF5F3162D1B2128830D668BCFB3E2883095A6E17FA616A0E}
[INFO ] 2020-02-19T11:01:39,640Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=30a6637d-b452-4bea-ae45-12e66946ad97, invocation_id=ff28025a-ea1f-4577-81de-6af701fc545b, invocation_timestamp=2020-02-19T11:01:37.780Z, origin=Only For Testing, session_id=ff28025a-ea1f-4577-81de-6af701fc545b, session_timestamp=2020-02-19T11:01:37.780Z, thread-id=147, tx_id=6BA53891CF984AD3DF5F3162D1B2128830D668BCFB3E2883095A6E17FA616A0E}
[INFO ] 2020-02-19T11:01:39,640Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=30a6637d-b452-4bea-ae45-12e66946ad97, invocation_id=ff28025a-ea1f-4577-81de-6af701fc545b, invocation_timestamp=2020-02-19T11:01:37.780Z, origin=Only For Testing, session_id=ff28025a-ea1f-4577-81de-6af701fc545b, session_timestamp=2020-02-19T11:01:37.780Z, thread-id=147, tx_id=6BA53891CF984AD3DF5F3162D1B2128830D668BCFB3E2883095A6E17FA616A0E}
[INFO ] 2020-02-19T11:01:39,672Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000002, flow-id=4e93a397-cca6-4603-99dc-98e760f6638b, invocation_id=a7eef378-ccdf-4f10-96d2-48f288747e54, invocation_timestamp=2020-02-19T11:01:39.514Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a7eef378-ccdf-4f10-96d2-48f288747e54, session_timestamp=2020-02-19T11:01:39.514Z, thread-id=147, tx_id=6BA53891CF984AD3DF5F3162D1B2128830D668BCFB3E2883095A6E17FA616A0E}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2608217733946543658) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-19T11:01:39,675Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [4e93a397-cca6-4603-99dc-98e760f6638b] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a7eef378-ccdf-4f10-96d2-48f288747e54, timestamp: 2020-02-19T11:01:39.514Z, entityType: Invocation, sessionId=a7eef378-ccdf-4f10-96d2-48f288747e54, timestamp: 2020-02-19T11:01:39.514Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2608217733946543658)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--5655877313034796168-2509695789854884291)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2608217733946543658))]), frozenFiber=408056784C6A250534EE72618A994F2F2080C39ABF5A954D96F8BEE11D1AB9AA), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.EcoIssueFlowResponder@43fb6691, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@94e2cdd], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=5c88a8d2-8edc-4752-9a0f-0cf3a4565514) {fiber-id=10000002, flow-id=4e93a397-cca6-4603-99dc-98e760f6638b, invocation_id=a7eef378-ccdf-4f10-96d2-48f288747e54, invocation_timestamp=2020-02-19T11:01:39.514Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a7eef378-ccdf-4f10-96d2-48f288747e54, session_timestamp=2020-02-19T11:01:39.514Z, thread-id=147, tx_id=6BA53891CF984AD3DF5F3162D1B2128830D668BCFB3E2883095A6E17FA616A0E}
[INFO ] 2020-02-19T11:01:39,677Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [4e93a397-cca6-4603-99dc-98e760f6638b] has error [0] {fiber-id=10000002, flow-id=4e93a397-cca6-4603-99dc-98e760f6638b, invocation_id=a7eef378-ccdf-4f10-96d2-48f288747e54, invocation_timestamp=2020-02-19T11:01:39.514Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a7eef378-ccdf-4f10-96d2-48f288747e54, session_timestamp=2020-02-19T11:01:39.514Z, thread-id=147, tx_id=6BA53891CF984AD3DF5F3162D1B2128830D668BCFB3E2883095A6E17FA616A0E}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2608217733946543658) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-19T11:01:39,679Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [4e93a397-cca6-4603-99dc-98e760f6638b] error allowed to propagate {fiber-id=10000002, flow-id=4e93a397-cca6-4603-99dc-98e760f6638b, invocation_id=a7eef378-ccdf-4f10-96d2-48f288747e54, invocation_timestamp=2020-02-19T11:01:39.514Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a7eef378-ccdf-4f10-96d2-48f288747e54, session_timestamp=2020-02-19T11:01:39.514Z, thread-id=147, tx_id=6BA53891CF984AD3DF5F3162D1B2128830D668BCFB3E2883095A6E17FA616A0E}
[WARN ] 2020-02-19T11:01:39,701Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [4e93a397-cca6-4603-99dc-98e760f6638b] errored, dumping all transitions:

 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.540Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[4e93a397-cca6-4603-99dc-98e760f6638b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a7eef378-ccdf-4f10-96d2-48f288747e54, timestamp: 2020-02-19T11:01:39.514Z, entityType: Invocation, sessionId=a7eef378-ccdf-4f10-96d2-48f288747e54, timestamp: 2020-02-19T11:01:39.514Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=7AA51F6134AE26B0A1A505DB13F32FDB94C6974B9CA91A846A1DE6C118DA6A16), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3a12460d])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3a12460d])
    SignalFlowHasStarted(flowId=[4e93a397-cca6-4603-99dc-98e760f6638b])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5655877313034796168), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-2608217733946543658), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--5655877313034796168-2509695789854884291-0-0), senderUUID=5c88a8d2-8edc-4752-9a0f-0cf3a4565514))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-2608217733946543658): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5655877313034796168)), errors=[], deduplicationSeed=D--5655877313034796168-2509695789854884291)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3a12460d]
    []


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.544Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.549Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.568Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2608217733946543658))]), maySkipCheckpoint=false, fiber=E490F8B3BA1AB22AC4209C9D88C2B30F3AD56C96F1EDCF3A282C0A5AD95A8B6D, )
  Actions: 
    PersistCheckpoint(id=[4e93a397-cca6-4603-99dc-98e760f6638b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a7eef378-ccdf-4f10-96d2-48f288747e54, timestamp: 2020-02-19T11:01:39.514Z, entityType: Invocation, sessionId=a7eef378-ccdf-4f10-96d2-48f288747e54, timestamp: 2020-02-19T11:01:39.514Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2608217733946543658)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5655877313034796168)), errors=[], deduplicationSeed=D--5655877313034796168-2509695789854884291)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2608217733946543658))]), frozenFiber=E490F8B3BA1AB22AC4209C9D88C2B30F3AD56C96F1EDCF3A282C0A5AD95A8B6D), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=7AA51F6134AE26B0A1A505DB13F32FDB94C6974B9CA91A846A1DE6C118DA6A16)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2608217733946543658))]), frozenFiber=E490F8B3BA1AB22AC4209C9D88C2B30F3AD56C96F1EDCF3A282C0A5AD95A8B6D)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.571Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-2608217733946543658).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.583Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.605Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2608217733946543658))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=80DC16FFA586D431C08CFE5CC1B89509ED635F5B9D1FE930F6489DDBC304969A, )
  Actions: 
    PersistCheckpoint(id=[4e93a397-cca6-4603-99dc-98e760f6638b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a7eef378-ccdf-4f10-96d2-48f288747e54, timestamp: 2020-02-19T11:01:39.514Z, entityType: Invocation, sessionId=a7eef378-ccdf-4f10-96d2-48f288747e54, timestamp: 2020-02-19T11:01:39.514Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2608217733946543658)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5655877313034796168)), errors=[], deduplicationSeed=D--5655877313034796168-2509695789854884291)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2608217733946543658))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=80DC16FFA586D431C08CFE5CC1B89509ED635F5B9D1FE930F6489DDBC304969A), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.frozenFiber.hash: 
    E490F8B3BA1AB22AC4209C9D88C2B30F3AD56C96F1EDCF3A282C0A5AD95A8B6D
    80DC16FFA586D431C08CFE5CC1B89509ED635F5B9D1FE930F6489DDBC304969A
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2608217733946543658))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2608217733946543658))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.611Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5655877313034796168), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--5655877313034796168-2509695789854884291-2-0), senderUUID=5c88a8d2-8edc-4752-9a0f-0cf3a4565514))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.613Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.622Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.627Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2608217733946543658))]), maySkipCheckpoint=false, fiber=408056784C6A250534EE72618A994F2F2080C39ABF5A954D96F8BEE11D1AB9AA, )
  Actions: 
    PersistCheckpoint(id=[4e93a397-cca6-4603-99dc-98e760f6638b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a7eef378-ccdf-4f10-96d2-48f288747e54, timestamp: 2020-02-19T11:01:39.514Z, entityType: Invocation, sessionId=a7eef378-ccdf-4f10-96d2-48f288747e54, timestamp: 2020-02-19T11:01:39.514Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2608217733946543658)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5655877313034796168)), errors=[], deduplicationSeed=D--5655877313034796168-2509695789854884291)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2608217733946543658))]), frozenFiber=408056784C6A250534EE72618A994F2F2080C39ABF5A954D96F8BEE11D1AB9AA), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.frozenFiber.hash: 
    80DC16FFA586D431C08CFE5CC1B89509ED635F5B9D1FE930F6489DDBC304969A
    408056784C6A250534EE72618A994F2F2080C39ABF5A954D96F8BEE11D1AB9AA
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2608217733946543658))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2608217733946543658))])
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.627Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.671Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2608217733946543658), payload=net.corda.node.services.statemachine.EndSessionMessage@251b05ca), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@94e2cdd, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-2608217733946543658).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-5655877313034796168))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@94e2cdd]


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.672Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2608217733946543658) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.672Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)]


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.680Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2608217733946543658) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=7148025437087478503, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2608217733946543658) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.684Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.686Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=4e93a397-cca6-4603-99dc-98e760f6638b, invocation_id=a7eef378-ccdf-4f10-96d2-48f288747e54, invocation_timestamp=2020-02-19T11:01:39.514Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a7eef378-ccdf-4f10-96d2-48f288747e54, session_timestamp=2020-02-19T11:01:39.514Z, thread-id=147, tx_id=6BA53891CF984AD3DF5F3162D1B2128830D668BCFB3E2883095A6E17FA616A0E}
[WARN ] 2020-02-19T11:01:39,702Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [4e93a397-cca6-4603-99dc-98e760f6638b] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=4e93a397-cca6-4603-99dc-98e760f6638b, invocation_id=a7eef378-ccdf-4f10-96d2-48f288747e54, invocation_timestamp=2020-02-19T11:01:39.514Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a7eef378-ccdf-4f10-96d2-48f288747e54, session_timestamp=2020-02-19T11:01:39.514Z, thread-id=147, tx_id=6BA53891CF984AD3DF5F3162D1B2128830D668BCFB3E2883095A6E17FA616A0E}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2608217733946543658) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-19T11:01:39,704Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000002, flow-id=4e93a397-cca6-4603-99dc-98e760f6638b, invocation_id=a7eef378-ccdf-4f10-96d2-48f288747e54, invocation_timestamp=2020-02-19T11:01:39.514Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a7eef378-ccdf-4f10-96d2-48f288747e54, session_timestamp=2020-02-19T11:01:39.514Z, thread-id=147, tx_id=6BA53891CF984AD3DF5F3162D1B2128830D668BCFB3E2883095A6E17FA616A0E}
[WARN ] 2020-02-19T11:01:39,742Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [4e93a397-cca6-4603-99dc-98e760f6638b] errored, dumping all transitions:

 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.540Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[4e93a397-cca6-4603-99dc-98e760f6638b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a7eef378-ccdf-4f10-96d2-48f288747e54, timestamp: 2020-02-19T11:01:39.514Z, entityType: Invocation, sessionId=a7eef378-ccdf-4f10-96d2-48f288747e54, timestamp: 2020-02-19T11:01:39.514Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=7AA51F6134AE26B0A1A505DB13F32FDB94C6974B9CA91A846A1DE6C118DA6A16), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3a12460d])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3a12460d])
    SignalFlowHasStarted(flowId=[4e93a397-cca6-4603-99dc-98e760f6638b])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5655877313034796168), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-2608217733946543658), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--5655877313034796168-2509695789854884291-0-0), senderUUID=5c88a8d2-8edc-4752-9a0f-0cf3a4565514))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-2608217733946543658): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5655877313034796168)), errors=[], deduplicationSeed=D--5655877313034796168-2509695789854884291)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3a12460d]
    []


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.544Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.549Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.568Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2608217733946543658))]), maySkipCheckpoint=false, fiber=E490F8B3BA1AB22AC4209C9D88C2B30F3AD56C96F1EDCF3A282C0A5AD95A8B6D, )
  Actions: 
    PersistCheckpoint(id=[4e93a397-cca6-4603-99dc-98e760f6638b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a7eef378-ccdf-4f10-96d2-48f288747e54, timestamp: 2020-02-19T11:01:39.514Z, entityType: Invocation, sessionId=a7eef378-ccdf-4f10-96d2-48f288747e54, timestamp: 2020-02-19T11:01:39.514Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2608217733946543658)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5655877313034796168)), errors=[], deduplicationSeed=D--5655877313034796168-2509695789854884291)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2608217733946543658))]), frozenFiber=E490F8B3BA1AB22AC4209C9D88C2B30F3AD56C96F1EDCF3A282C0A5AD95A8B6D), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=7AA51F6134AE26B0A1A505DB13F32FDB94C6974B9CA91A846A1DE6C118DA6A16)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2608217733946543658))]), frozenFiber=E490F8B3BA1AB22AC4209C9D88C2B30F3AD56C96F1EDCF3A282C0A5AD95A8B6D)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.571Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-2608217733946543658).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.583Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.605Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2608217733946543658))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=80DC16FFA586D431C08CFE5CC1B89509ED635F5B9D1FE930F6489DDBC304969A, )
  Actions: 
    PersistCheckpoint(id=[4e93a397-cca6-4603-99dc-98e760f6638b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a7eef378-ccdf-4f10-96d2-48f288747e54, timestamp: 2020-02-19T11:01:39.514Z, entityType: Invocation, sessionId=a7eef378-ccdf-4f10-96d2-48f288747e54, timestamp: 2020-02-19T11:01:39.514Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2608217733946543658)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5655877313034796168)), errors=[], deduplicationSeed=D--5655877313034796168-2509695789854884291)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2608217733946543658))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=80DC16FFA586D431C08CFE5CC1B89509ED635F5B9D1FE930F6489DDBC304969A), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.frozenFiber.hash: 
    E490F8B3BA1AB22AC4209C9D88C2B30F3AD56C96F1EDCF3A282C0A5AD95A8B6D
    80DC16FFA586D431C08CFE5CC1B89509ED635F5B9D1FE930F6489DDBC304969A
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2608217733946543658))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2608217733946543658))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.611Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5655877313034796168), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--5655877313034796168-2509695789854884291-2-0), senderUUID=5c88a8d2-8edc-4752-9a0f-0cf3a4565514))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.613Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.622Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.627Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2608217733946543658))]), maySkipCheckpoint=false, fiber=408056784C6A250534EE72618A994F2F2080C39ABF5A954D96F8BEE11D1AB9AA, )
  Actions: 
    PersistCheckpoint(id=[4e93a397-cca6-4603-99dc-98e760f6638b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a7eef378-ccdf-4f10-96d2-48f288747e54, timestamp: 2020-02-19T11:01:39.514Z, entityType: Invocation, sessionId=a7eef378-ccdf-4f10-96d2-48f288747e54, timestamp: 2020-02-19T11:01:39.514Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2608217733946543658)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5655877313034796168)), errors=[], deduplicationSeed=D--5655877313034796168-2509695789854884291)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2608217733946543658))]), frozenFiber=408056784C6A250534EE72618A994F2F2080C39ABF5A954D96F8BEE11D1AB9AA), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.frozenFiber.hash: 
    80DC16FFA586D431C08CFE5CC1B89509ED635F5B9D1FE930F6489DDBC304969A
    408056784C6A250534EE72618A994F2F2080C39ABF5A954D96F8BEE11D1AB9AA
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2608217733946543658))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2608217733946543658))])
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.627Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.671Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2608217733946543658), payload=net.corda.node.services.statemachine.EndSessionMessage@251b05ca), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@94e2cdd, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-2608217733946543658).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-5655877313034796168))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@94e2cdd]


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.672Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2608217733946543658) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.672Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)]


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.680Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2608217733946543658) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=7148025437087478503, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2608217733946543658) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.684Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.686Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [4e93a397-cca6-4603-99dc-98e760f6638b] ---
  Timestamp: 2020-02-19T11:01:39.730Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=7148025437087478503)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--5655877313034796168-2509695789854884291)], senderUUID=5c88a8d2-8edc-4752-9a0f-0cf3a4565514)
    CreateTransaction
    RemoveCheckpoint(id=[4e93a397-cca6-4603-99dc-98e760f6638b])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@94e2cdd])
    ReleaseSoftLocks(uuid=4e93a397-cca6-4603-99dc-98e760f6638b)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@94e2cdd])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-2608217733946543658)])
    RemoveFlow(flowId=[4e93a397-cca6-4603-99dc-98e760f6638b], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=7148025437087478503, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2608217733946543658) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a7eef378-ccdf-4f10-96d2-48f288747e54, timestamp: 2020-02-19T11:01:39.514Z, entityType: Invocation, sessionId=a7eef378-ccdf-4f10-96d2-48f288747e54, timestamp: 2020-02-19T11:01:39.514Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2608217733946543658)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--5655877313034796168-2509695789854884291)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2608217733946543658))]), frozenFiber=408056784C6A250534EE72618A994F2F2080C39ABF5A954D96F8BEE11D1AB9AA), errorState=Errored(errors=[FlowError(errorId=7148025437087478503, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2608217733946543658) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.EcoIssueFlowResponder@43fb6691, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=5c88a8d2-8edc-4752-9a0f-0cf3a4565514))
  Continuation: Abort
  Diff between previous and next state:
isRemoved: 
    false
    true
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@94e2cdd]
    []
 {fiber-id=10000002, flow-id=4e93a397-cca6-4603-99dc-98e760f6638b, invocation_id=a7eef378-ccdf-4f10-96d2-48f288747e54, invocation_timestamp=2020-02-19T11:01:39.514Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a7eef378-ccdf-4f10-96d2-48f288747e54, session_timestamp=2020-02-19T11:01:39.514Z, thread-id=147, tx_id=6BA53891CF984AD3DF5F3162D1B2128830D668BCFB3E2883095A6E17FA616A0E}
[WARN ] 2020-02-19T11:01:39,743Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [4e93a397-cca6-4603-99dc-98e760f6638b] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=4e93a397-cca6-4603-99dc-98e760f6638b, invocation_id=a7eef378-ccdf-4f10-96d2-48f288747e54, invocation_timestamp=2020-02-19T11:01:39.514Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a7eef378-ccdf-4f10-96d2-48f288747e54, session_timestamp=2020-02-19T11:01:39.514Z, thread-id=147, tx_id=6BA53891CF984AD3DF5F3162D1B2128830D668BCFB3E2883095A6E17FA616A0E}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2608217733946543658) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-19T11:07:15,305Z [main] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in D:\FTI\Git\CorDApp\bootcamp-cordapp ... {}
[INFO ] 2020-02-19T11:07:17,026Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-110711.570\nodes\0\cordapps] {}
[INFO ] 2020-02-19T11:07:17,029Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110711.570/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T11:07:17,046Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110711.570/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T11:07:17,102Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T11:07:17,502Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T11:07:17,566Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:07:17,567Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:07:17,687Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T11:07:11.443Z
      epoch=1
  } {}
[INFO ] 2020-02-19T11:07:20,675Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T11:07:20,678Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-110711.570\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T11:07:20,678Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T11:07:20,680Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T11:07:20,715Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:07:20,719Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:07:21,940Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:07:22,294Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T11:07:22,337Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T11:07:22,355Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:07:22,355Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:07:22,582Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:07:22,591Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T11:07:22,591Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110442591) {}
[INFO ] 2020-02-19T11:07:22,597Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:07:22,707Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110442591) {}
[INFO ] 2020-02-19T11:07:22,744Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T11:07:22,756Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110442591) {}
[INFO ] 2020-02-19T11:07:22,776Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:07:22,864Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A uploader=app filename=null {}
[INFO ] 2020-02-19T11:07:22,867Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-19T11:07:22,870Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-19T11:07:23,166Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-110723.076\nodes\0\cordapps] {}
[INFO ] 2020-02-19T11:07:23,167Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110723.076/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T11:07:23,167Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110723.076/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T11:07:23,189Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T11:07:23,197Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T11:07:23,203Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:07:23,203Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:07:23,209Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T11:07:23.076Z
      epoch=1
  } {}
[INFO ] 2020-02-19T11:07:23,700Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T11:07:23,701Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-110723.076\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T11:07:23,702Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T11:07:23,703Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T11:07:23,705Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:07:23,706Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:07:23,768Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:07:23,776Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T11:07:23,805Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T11:07:23,811Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:07:23,811Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:07:23,916Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:07:23,920Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T11:07:23,920Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110443920) {}
[INFO ] 2020-02-19T11:07:23,922Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:07:23,944Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110443920) {}
[INFO ] 2020-02-19T11:07:23,955Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T11:07:23,958Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110443920) {}
[INFO ] 2020-02-19T11:07:23,964Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:07:24,066Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A uploader=app filename=null {}
[INFO ] 2020-02-19T11:07:24,068Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-19T11:07:24,068Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-19T11:07:24,168Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-110724.075\nodes\0\cordapps] {}
[INFO ] 2020-02-19T11:07:24,168Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110724.075/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T11:07:24,168Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110724.075/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T11:07:24,191Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T11:07:24,197Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T11:07:24,201Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:07:24,201Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:07:24,206Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T11:07:24.075Z
      epoch=1
  } {}
[INFO ] 2020-02-19T11:07:24,582Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T11:07:24,587Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-110724.075\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T11:07:24,588Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T11:07:24,589Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T11:07:24,592Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:07:24,592Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:07:24,671Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:07:24,679Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T11:07:24,705Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T11:07:24,713Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:07:24,713Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:07:24,816Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:07:24,819Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T11:07:24,819Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110444819) {}
[INFO ] 2020-02-19T11:07:24,820Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:07:24,833Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110444819) {}
[INFO ] 2020-02-19T11:07:24,848Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T11:07:24,852Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110444819) {}
[INFO ] 2020-02-19T11:07:24,857Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:07:24,952Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A uploader=app filename=null {}
[INFO ] 2020-02-19T11:07:24,954Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-19T11:07:24,954Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-19T11:07:25,022Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-110724.960\nodes\0\cordapps] {}
[INFO ] 2020-02-19T11:07:25,023Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110724.960/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T11:07:25,023Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110724.960/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T11:07:25,044Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T11:07:25,050Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T11:07:25,055Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:07:25,055Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:07:25,062Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T11:07:24.960Z
      epoch=1
  } {}
[INFO ] 2020-02-19T11:07:25,442Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T11:07:25,444Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-110724.960\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T11:07:25,444Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T11:07:25,446Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T11:07:25,448Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:07:25,448Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:07:25,517Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:07:25,523Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T11:07:25,549Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T11:07:25,556Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:07:25,556Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:07:25,646Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:07:25,650Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T11:07:25,650Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110445650) {}
[INFO ] 2020-02-19T11:07:25,653Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:07:25,664Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110445650) {}
[INFO ] 2020-02-19T11:07:25,680Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T11:07:25,683Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110445650) {}
[INFO ] 2020-02-19T11:07:25,688Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:07:25,796Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A uploader=app filename=null {}
[INFO ] 2020-02-19T11:07:25,798Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-19T11:07:25,798Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-19T11:07:25,892Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-110725.804\nodes\0\cordapps] {}
[INFO ] 2020-02-19T11:07:25,892Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110725.804/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T11:07:25,893Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110725.804/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T11:07:25,914Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T11:07:25,921Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T11:07:25,927Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:07:25,927Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:07:25,933Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T11:07:25.804Z
      epoch=1
  } {}
[INFO ] 2020-02-19T11:07:26,295Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T11:07:26,296Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-110725.804\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T11:07:26,296Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T11:07:26,298Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T11:07:26,300Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:07:26,300Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:07:26,355Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:07:26,363Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T11:07:26,386Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T11:07:26,394Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:07:26,395Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:07:26,488Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:07:26,491Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T11:07:26,491Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110446491) {}
[INFO ] 2020-02-19T11:07:26,493Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:07:26,506Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110446491) {}
[INFO ] 2020-02-19T11:07:26,518Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T11:07:26,521Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110446491) {}
[INFO ] 2020-02-19T11:07:26,525Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:07:26,648Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A uploader=app filename=null {}
[INFO ] 2020-02-19T11:07:26,651Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-19T11:07:26,651Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-19T11:07:26,714Z [main] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-110726.659\nodes\0\cordapps] {}
[INFO ] 2020-02-19T11:07:26,715Z [main] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110726.659/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T11:07:26,715Z [main] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110726.659/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T11:07:26,737Z [main] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T11:07:26,742Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T11:07:26,747Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:07:26,747Z [main] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:07:26,753Z [main] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T11:07:26.659Z
      epoch=1
  } {}
[INFO ] 2020-02-19T11:07:27,093Z [main] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T11:07:27,095Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-110726.659\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T11:07:27,095Z [main] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T11:07:27,096Z [main] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T11:07:27,098Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:07:27,099Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:07:27,156Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:07:27,164Z [main] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T11:07:27,187Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T11:07:27,195Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:07:27,195Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:07:27,274Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:07:27,279Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T11:07:27,279Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110447279) {}
[INFO ] 2020-02-19T11:07:27,281Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:07:27,291Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110447279) {}
[INFO ] 2020-02-19T11:07:27,306Z [main] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T11:07:27,309Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110447279) {}
[INFO ] 2020-02-19T11:07:27,313Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:07:27,424Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A uploader=app filename=null {}
[INFO ] 2020-02-19T11:07:27,425Z [main] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-19T11:07:27,425Z [main] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-19T11:08:17,627Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in D:\FTI\Git\CorDApp\bootcamp-cordapp ... {}
[INFO ] 2020-02-19T11:08:22,888Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-110812.815\nodes\0\cordapps] {}
[INFO ] 2020-02-19T11:08:22,894Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110812.815/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T11:08:22,925Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110812.815/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T11:08:23,012Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T11:08:23,648Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T11:08:23,745Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:08:23,746Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:08:23,891Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T11:08:12.769Z
      epoch=1
  } {}
[INFO ] 2020-02-19T11:08:28,137Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T11:08:28,150Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-110812.815\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T11:08:28,150Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T11:08:28,159Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T11:08:28,224Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:08:28,230Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:08:29,909Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:08:30,555Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T11:08:30,615Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T11:08:30,640Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:08:30,640Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:08:30,924Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-02-19T11:08:30,933Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T11:08:30,934Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110510933) {}
[INFO ] 2020-02-19T11:08:30,938Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:08:31,074Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110510933) {}
[INFO ] 2020-02-19T11:08:31,138Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T11:08:31,154Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110510933) {}
[INFO ] 2020-02-19T11:08:31,181Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:08:31,286Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A uploader=app filename=null {}
[INFO ] 2020-02-19T11:08:31,290Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-02-19T11:08:31,293Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-02-19T11:08:31,570Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110510933) {}
[INFO ] 2020-02-19T11:08:31,586Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110510933) {}
[INFO ] 2020-02-19T11:08:31,587Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:08:31,588Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110510933) {}
[INFO ] 2020-02-19T11:08:31,588Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:08:31,600Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-110812.815\nodes\1\cordapps] {}
[INFO ] 2020-02-19T11:08:31,601Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110812.815/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T11:08:31,601Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110812.815/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T11:08:31,618Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T11:08:31,626Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T11:08:31,670Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:08:31,670Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:08:31,674Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T11:08:12.769Z
      epoch=1
  } {}
[INFO ] 2020-02-19T11:08:32,338Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T11:08:32,342Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-110812.815\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T11:08:32,342Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T11:08:32,345Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T11:08:32,348Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:08:32,348Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:08:32,448Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:08:32,459Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T11:08:32,463Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T11:08:32,464Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-19T11:08:32,492Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T11:08:32,493Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T11:08:32,621Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T11:08:32,627Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T11:08:32,627Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110512627) {}
[INFO ] 2020-02-19T11:08:32,629Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:08:32,641Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110512627) {}
[INFO ] 2020-02-19T11:08:32,657Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T11:08:32,662Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110512627) {}
[INFO ] 2020-02-19T11:08:32,668Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:08:32,784Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A uploader=app filename=null {}
[INFO ] 2020-02-19T11:08:32,792Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110512627) {}
[INFO ] 2020-02-19T11:08:32,794Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110510933) {}
[INFO ] 2020-02-19T11:08:32,796Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:08:32,805Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110512627) {}
[INFO ] 2020-02-19T11:08:32,807Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:08:32,816Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110512627) {}
[INFO ] 2020-02-19T11:08:32,817Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:08:32,817Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110512627) {}
[INFO ] 2020-02-19T11:08:32,817Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:08:32,828Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200219-110812.815\nodes\2\cordapps] {}
[INFO ] 2020-02-19T11:08:32,828Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110812.815/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-02-19T11:08:32,829Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/D:/FTI/Git/CorDApp/bootcamp-cordapp/build/mock-network/20200219-110812.815/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-02-19T11:08:32,850Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-02-19T11:08:32,857Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-02-19T11:08:32,886Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.EcoIssueFlowInitiator to initiate bootcamp.EcoIssueFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:08:32,886Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-02-19T11:08:32,890Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-02-19T11:08:12.769Z
      epoch=1
  } {}
[INFO ] 2020-02-19T11:08:33,476Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-02-19T11:08:33,478Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200219-110812.815\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-02-19T11:08:33,478Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-02-19T11:08:33,479Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-02-19T11:08:33,486Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:08:33,487Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:08:33,585Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-02-19T11:08:33,593Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-02-19T11:08:33,597Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-02-19T11:08:33,598Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-02-19T11:08:33,617Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T11:08:33,617Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T11:08:33,726Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-02-19T11:08:33,731Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-02-19T11:08:33,732Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110513731) {}
[INFO ] 2020-02-19T11:08:33,734Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:08:33,743Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110513731) {}
[INFO ] 2020-02-19T11:08:33,759Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-02-19T11:08:33,764Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110513731) {}
[INFO ] 2020-02-19T11:08:33,770Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:08:33,923Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A uploader=app filename=null {}
[INFO ] 2020-02-19T11:08:33,932Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110513731) {}
[INFO ] 2020-02-19T11:08:33,935Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1582110510933) {}
[INFO ] 2020-02-19T11:08:33,938Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:08:33,948Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110513731) {}
[INFO ] 2020-02-19T11:08:33,950Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:08:33,961Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1582110512627) {}
[INFO ] 2020-02-19T11:08:33,963Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:08:33,973Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110513731) {}
[INFO ] 2020-02-19T11:08:33,975Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-02-19T11:08:33,989Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110513731) {}
[INFO ] 2020-02-19T11:08:33,990Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-02-19T11:08:33,990Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1582110513731) {}
[INFO ] 2020-02-19T11:08:33,990Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-02-19T11:08:34,244Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ec426b18-205d-4846-9f05-0a7d1f515899, invocation_id=1893facd-ade8-4b72-a289-d94b3b545a70, invocation_timestamp=2020-02-19T11:08:34.021Z, origin=Only For Testing, session_id=1893facd-ade8-4b72-a289-d94b3b545a70, session_timestamp=2020-02-19T11:08:34.021Z, thread-id=147}
[WARN ] 2020-02-19T11:08:34,244Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.EcoIssueContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ec426b18-205d-4846-9f05-0a7d1f515899, invocation_id=1893facd-ade8-4b72-a289-d94b3b545a70, invocation_timestamp=2020-02-19T11:08:34.021Z, origin=Only For Testing, session_id=1893facd-ade8-4b72-a289-d94b3b545a70, session_timestamp=2020-02-19T11:08:34.021Z, thread-id=147}
[INFO ] 2020-02-19T11:08:35,619Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ec426b18-205d-4846-9f05-0a7d1f515899, invocation_id=1893facd-ade8-4b72-a289-d94b3b545a70, invocation_timestamp=2020-02-19T11:08:34.021Z, origin=Only For Testing, session_id=1893facd-ade8-4b72-a289-d94b3b545a70, session_timestamp=2020-02-19T11:08:34.021Z, thread-id=147, tx_id=B333ED4BA6E2EB76BE0D3F406179B9A364C528BC08FF7AC3D2B11502739CD67B}
[INFO ] 2020-02-19T11:08:35,620Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ec426b18-205d-4846-9f05-0a7d1f515899, invocation_id=1893facd-ade8-4b72-a289-d94b3b545a70, invocation_timestamp=2020-02-19T11:08:34.021Z, origin=Only For Testing, session_id=1893facd-ade8-4b72-a289-d94b3b545a70, session_timestamp=2020-02-19T11:08:34.021Z, thread-id=147, tx_id=B333ED4BA6E2EB76BE0D3F406179B9A364C528BC08FF7AC3D2B11502739CD67B}
[INFO ] 2020-02-19T11:08:35,672Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ec426b18-205d-4846-9f05-0a7d1f515899, invocation_id=1893facd-ade8-4b72-a289-d94b3b545a70, invocation_timestamp=2020-02-19T11:08:34.021Z, origin=Only For Testing, session_id=1893facd-ade8-4b72-a289-d94b3b545a70, session_timestamp=2020-02-19T11:08:34.021Z, thread-id=147, tx_id=B333ED4BA6E2EB76BE0D3F406179B9A364C528BC08FF7AC3D2B11502739CD67B}
[INFO ] 2020-02-19T11:08:35,849Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=97208ee9-9d98-4b3a-ba6e-ad9044b008c4, invocation_id=25a3d452-e03c-4636-8ab8-eff50d9e0195, invocation_timestamp=2020-02-19T11:08:35.790Z, origin=O=Mock Company 1, L=London, C=GB, session_id=25a3d452-e03c-4636-8ab8-eff50d9e0195, session_timestamp=2020-02-19T11:08:35.790Z, thread-id=147, tx_id=B333ED4BA6E2EB76BE0D3F406179B9A364C528BC08FF7AC3D2B11502739CD67B}
[WARN ] 2020-02-19T11:08:35,860Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=97208ee9-9d98-4b3a-ba6e-ad9044b008c4, invocation_id=25a3d452-e03c-4636-8ab8-eff50d9e0195, invocation_timestamp=2020-02-19T11:08:35.790Z, origin=O=Mock Company 1, L=London, C=GB, session_id=25a3d452-e03c-4636-8ab8-eff50d9e0195, session_timestamp=2020-02-19T11:08:35.790Z, thread-id=147, tx_id=B333ED4BA6E2EB76BE0D3F406179B9A364C528BC08FF7AC3D2B11502739CD67B}
[INFO ] 2020-02-19T11:08:35,890Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=97208ee9-9d98-4b3a-ba6e-ad9044b008c4, invocation_id=25a3d452-e03c-4636-8ab8-eff50d9e0195, invocation_timestamp=2020-02-19T11:08:35.790Z, origin=O=Mock Company 1, L=London, C=GB, session_id=25a3d452-e03c-4636-8ab8-eff50d9e0195, session_timestamp=2020-02-19T11:08:35.790Z, thread-id=147, tx_id=B333ED4BA6E2EB76BE0D3F406179B9A364C528BC08FF7AC3D2B11502739CD67B}
[INFO ] 2020-02-19T11:08:35,960Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ec426b18-205d-4846-9f05-0a7d1f515899, invocation_id=1893facd-ade8-4b72-a289-d94b3b545a70, invocation_timestamp=2020-02-19T11:08:34.021Z, origin=Only For Testing, session_id=1893facd-ade8-4b72-a289-d94b3b545a70, session_timestamp=2020-02-19T11:08:34.021Z, thread-id=147, tx_id=B333ED4BA6E2EB76BE0D3F406179B9A364C528BC08FF7AC3D2B11502739CD67B}
[INFO ] 2020-02-19T11:08:35,960Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=ec426b18-205d-4846-9f05-0a7d1f515899, invocation_id=1893facd-ade8-4b72-a289-d94b3b545a70, invocation_timestamp=2020-02-19T11:08:34.021Z, origin=Only For Testing, session_id=1893facd-ade8-4b72-a289-d94b3b545a70, session_timestamp=2020-02-19T11:08:34.021Z, thread-id=147, tx_id=B333ED4BA6E2EB76BE0D3F406179B9A364C528BC08FF7AC3D2B11502739CD67B}
[INFO ] 2020-02-19T11:08:35,994Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000002, flow-id=97208ee9-9d98-4b3a-ba6e-ad9044b008c4, invocation_id=25a3d452-e03c-4636-8ab8-eff50d9e0195, invocation_timestamp=2020-02-19T11:08:35.790Z, origin=O=Mock Company 1, L=London, C=GB, session_id=25a3d452-e03c-4636-8ab8-eff50d9e0195, session_timestamp=2020-02-19T11:08:35.790Z, thread-id=147, tx_id=B333ED4BA6E2EB76BE0D3F406179B9A364C528BC08FF7AC3D2B11502739CD67B}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1266486252782331255) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-19T11:08:35,997Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=25a3d452-e03c-4636-8ab8-eff50d9e0195, timestamp: 2020-02-19T11:08:35.790Z, entityType: Invocation, sessionId=25a3d452-e03c-4636-8ab8-eff50d9e0195, timestamp: 2020-02-19T11:08:35.790Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1266486252782331255)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-5326350447935244049-5262184167662930406)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1266486252782331255))]), frozenFiber=4E537D6600EAAA12B4AF155DA35F42CF8E5787D13C23BE32CA038D15CB6BD894), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.EcoIssueFlowResponder@6917c7af, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@31905816], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=92b40fc7-22b6-46f7-bea3-90e266ce0f2a) {fiber-id=10000002, flow-id=97208ee9-9d98-4b3a-ba6e-ad9044b008c4, invocation_id=25a3d452-e03c-4636-8ab8-eff50d9e0195, invocation_timestamp=2020-02-19T11:08:35.790Z, origin=O=Mock Company 1, L=London, C=GB, session_id=25a3d452-e03c-4636-8ab8-eff50d9e0195, session_timestamp=2020-02-19T11:08:35.790Z, thread-id=147, tx_id=B333ED4BA6E2EB76BE0D3F406179B9A364C528BC08FF7AC3D2B11502739CD67B}
[INFO ] 2020-02-19T11:08:36,000Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] has error [0] {fiber-id=10000002, flow-id=97208ee9-9d98-4b3a-ba6e-ad9044b008c4, invocation_id=25a3d452-e03c-4636-8ab8-eff50d9e0195, invocation_timestamp=2020-02-19T11:08:35.790Z, origin=O=Mock Company 1, L=London, C=GB, session_id=25a3d452-e03c-4636-8ab8-eff50d9e0195, session_timestamp=2020-02-19T11:08:35.790Z, thread-id=147, tx_id=B333ED4BA6E2EB76BE0D3F406179B9A364C528BC08FF7AC3D2B11502739CD67B}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1266486252782331255) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-02-19T11:08:36,001Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] error allowed to propagate {fiber-id=10000002, flow-id=97208ee9-9d98-4b3a-ba6e-ad9044b008c4, invocation_id=25a3d452-e03c-4636-8ab8-eff50d9e0195, invocation_timestamp=2020-02-19T11:08:35.790Z, origin=O=Mock Company 1, L=London, C=GB, session_id=25a3d452-e03c-4636-8ab8-eff50d9e0195, session_timestamp=2020-02-19T11:08:35.790Z, thread-id=147, tx_id=B333ED4BA6E2EB76BE0D3F406179B9A364C528BC08FF7AC3D2B11502739CD67B}
[WARN ] 2020-02-19T11:08:36,025Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] errored, dumping all transitions:

 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.817Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[97208ee9-9d98-4b3a-ba6e-ad9044b008c4], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=25a3d452-e03c-4636-8ab8-eff50d9e0195, timestamp: 2020-02-19T11:08:35.790Z, entityType: Invocation, sessionId=25a3d452-e03c-4636-8ab8-eff50d9e0195, timestamp: 2020-02-19T11:08:35.790Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=E7A8EEA860698D5DF152A4D4214220CD29ADD0C1F02E3D493AE4EFD7AC2B3B8A), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@d17fe14])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@d17fe14])
    SignalFlowHasStarted(flowId=[97208ee9-9d98-4b3a-ba6e-ad9044b008c4])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5326350447935244049), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-1266486252782331255), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-5326350447935244049-5262184167662930406-0-0), senderUUID=92b40fc7-22b6-46f7-bea3-90e266ce0f2a))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@d17fe14]
    []
checkpoint.sessions.SessionId(toLong=-1266486252782331255): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5326350447935244049)), errors=[], deduplicationSeed=D-5326350447935244049-5262184167662930406)
isFlowResumed: 
    false
    true


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.821Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.824Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.842Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1266486252782331255))]), maySkipCheckpoint=false, fiber=79E6709685D969A2E706D5D21BF34FE57E2ACDF1A11EC963F153C6F564C53C96, )
  Actions: 
    PersistCheckpoint(id=[97208ee9-9d98-4b3a-ba6e-ad9044b008c4], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=25a3d452-e03c-4636-8ab8-eff50d9e0195, timestamp: 2020-02-19T11:08:35.790Z, entityType: Invocation, sessionId=25a3d452-e03c-4636-8ab8-eff50d9e0195, timestamp: 2020-02-19T11:08:35.790Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1266486252782331255)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5326350447935244049)), errors=[], deduplicationSeed=D-5326350447935244049-5262184167662930406)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1266486252782331255))]), frozenFiber=79E6709685D969A2E706D5D21BF34FE57E2ACDF1A11EC963F153C6F564C53C96), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=E7A8EEA860698D5DF152A4D4214220CD29ADD0C1F02E3D493AE4EFD7AC2B3B8A)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1266486252782331255))]), frozenFiber=79E6709685D969A2E706D5D21BF34FE57E2ACDF1A11EC963F153C6F564C53C96)
isFlowResumed: 
    true
    false


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.845Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-1266486252782331255).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.861Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.881Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1266486252782331255))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=2A4CB8241E90F0D92BD1C3B3F809B5666C9A132803F014E8D60238A09F0C073C, )
  Actions: 
    PersistCheckpoint(id=[97208ee9-9d98-4b3a-ba6e-ad9044b008c4], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=25a3d452-e03c-4636-8ab8-eff50d9e0195, timestamp: 2020-02-19T11:08:35.790Z, entityType: Invocation, sessionId=25a3d452-e03c-4636-8ab8-eff50d9e0195, timestamp: 2020-02-19T11:08:35.790Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1266486252782331255)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5326350447935244049)), errors=[], deduplicationSeed=D-5326350447935244049-5262184167662930406)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1266486252782331255))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=2A4CB8241E90F0D92BD1C3B3F809B5666C9A132803F014E8D60238A09F0C073C), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    1
    2
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1266486252782331255))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1266486252782331255))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    79E6709685D969A2E706D5D21BF34FE57E2ACDF1A11EC963F153C6F564C53C96
    2A4CB8241E90F0D92BD1C3B3F809B5666C9A132803F014E8D60238A09F0C073C
isFlowResumed: 
    true
    false


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.887Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5326350447935244049), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-5326350447935244049-5262184167662930406-2-0), senderUUID=92b40fc7-22b6-46f7-bea3-90e266ce0f2a))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.889Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.940Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.944Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1266486252782331255))]), maySkipCheckpoint=false, fiber=4E537D6600EAAA12B4AF155DA35F42CF8E5787D13C23BE32CA038D15CB6BD894, )
  Actions: 
    PersistCheckpoint(id=[97208ee9-9d98-4b3a-ba6e-ad9044b008c4], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=25a3d452-e03c-4636-8ab8-eff50d9e0195, timestamp: 2020-02-19T11:08:35.790Z, entityType: Invocation, sessionId=25a3d452-e03c-4636-8ab8-eff50d9e0195, timestamp: 2020-02-19T11:08:35.790Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1266486252782331255)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5326350447935244049)), errors=[], deduplicationSeed=D-5326350447935244049-5262184167662930406)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1266486252782331255))]), frozenFiber=4E537D6600EAAA12B4AF155DA35F42CF8E5787D13C23BE32CA038D15CB6BD894), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    2
    3
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1266486252782331255))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1266486252782331255))])
checkpoint.flowState.frozenFiber.hash: 
    2A4CB8241E90F0D92BD1C3B3F809B5666C9A132803F014E8D60238A09F0C073C
    4E537D6600EAAA12B4AF155DA35F42CF8E5787D13C23BE32CA038D15CB6BD894
isFlowResumed: 
    true
    false


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.944Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.993Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1266486252782331255), payload=net.corda.node.services.statemachine.EndSessionMessage@13bc7153), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@31905816, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@31905816]
checkpoint.sessions.SessionId(toLong=-1266486252782331255).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=5326350447935244049))
    Ended


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.994Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1266486252782331255) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.994Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)]


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:36.002Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1266486252782331255) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8130734027771112260, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1266486252782331255) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:36.006Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:36.007Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=97208ee9-9d98-4b3a-ba6e-ad9044b008c4, invocation_id=25a3d452-e03c-4636-8ab8-eff50d9e0195, invocation_timestamp=2020-02-19T11:08:35.790Z, origin=O=Mock Company 1, L=London, C=GB, session_id=25a3d452-e03c-4636-8ab8-eff50d9e0195, session_timestamp=2020-02-19T11:08:35.790Z, thread-id=147, tx_id=B333ED4BA6E2EB76BE0D3F406179B9A364C528BC08FF7AC3D2B11502739CD67B}
[WARN ] 2020-02-19T11:08:36,025Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=97208ee9-9d98-4b3a-ba6e-ad9044b008c4, invocation_id=25a3d452-e03c-4636-8ab8-eff50d9e0195, invocation_timestamp=2020-02-19T11:08:35.790Z, origin=O=Mock Company 1, L=London, C=GB, session_id=25a3d452-e03c-4636-8ab8-eff50d9e0195, session_timestamp=2020-02-19T11:08:35.790Z, thread-id=147, tx_id=B333ED4BA6E2EB76BE0D3F406179B9A364C528BC08FF7AC3D2B11502739CD67B}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1266486252782331255) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-02-19T11:08:36,027Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000002, flow-id=97208ee9-9d98-4b3a-ba6e-ad9044b008c4, invocation_id=25a3d452-e03c-4636-8ab8-eff50d9e0195, invocation_timestamp=2020-02-19T11:08:35.790Z, origin=O=Mock Company 1, L=London, C=GB, session_id=25a3d452-e03c-4636-8ab8-eff50d9e0195, session_timestamp=2020-02-19T11:08:35.790Z, thread-id=147, tx_id=B333ED4BA6E2EB76BE0D3F406179B9A364C528BC08FF7AC3D2B11502739CD67B}
[WARN ] 2020-02-19T11:08:36,069Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] errored, dumping all transitions:

 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.817Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[97208ee9-9d98-4b3a-ba6e-ad9044b008c4], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=25a3d452-e03c-4636-8ab8-eff50d9e0195, timestamp: 2020-02-19T11:08:35.790Z, entityType: Invocation, sessionId=25a3d452-e03c-4636-8ab8-eff50d9e0195, timestamp: 2020-02-19T11:08:35.790Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=E7A8EEA860698D5DF152A4D4214220CD29ADD0C1F02E3D493AE4EFD7AC2B3B8A), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@d17fe14])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@d17fe14])
    SignalFlowHasStarted(flowId=[97208ee9-9d98-4b3a-ba6e-ad9044b008c4])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5326350447935244049), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-1266486252782331255), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-5326350447935244049-5262184167662930406-0-0), senderUUID=92b40fc7-22b6-46f7-bea3-90e266ce0f2a))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@d17fe14]
    []
checkpoint.sessions.SessionId(toLong=-1266486252782331255): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5326350447935244049)), errors=[], deduplicationSeed=D-5326350447935244049-5262184167662930406)
isFlowResumed: 
    false
    true


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.821Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.824Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.842Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1266486252782331255))]), maySkipCheckpoint=false, fiber=79E6709685D969A2E706D5D21BF34FE57E2ACDF1A11EC963F153C6F564C53C96, )
  Actions: 
    PersistCheckpoint(id=[97208ee9-9d98-4b3a-ba6e-ad9044b008c4], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=25a3d452-e03c-4636-8ab8-eff50d9e0195, timestamp: 2020-02-19T11:08:35.790Z, entityType: Invocation, sessionId=25a3d452-e03c-4636-8ab8-eff50d9e0195, timestamp: 2020-02-19T11:08:35.790Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1266486252782331255)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5326350447935244049)), errors=[], deduplicationSeed=D-5326350447935244049-5262184167662930406)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1266486252782331255))]), frozenFiber=79E6709685D969A2E706D5D21BF34FE57E2ACDF1A11EC963F153C6F564C53C96), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=E7A8EEA860698D5DF152A4D4214220CD29ADD0C1F02E3D493AE4EFD7AC2B3B8A)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1266486252782331255))]), frozenFiber=79E6709685D969A2E706D5D21BF34FE57E2ACDF1A11EC963F153C6F564C53C96)
isFlowResumed: 
    true
    false


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.845Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-1266486252782331255).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.861Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.881Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1266486252782331255))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=2A4CB8241E90F0D92BD1C3B3F809B5666C9A132803F014E8D60238A09F0C073C, )
  Actions: 
    PersistCheckpoint(id=[97208ee9-9d98-4b3a-ba6e-ad9044b008c4], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=25a3d452-e03c-4636-8ab8-eff50d9e0195, timestamp: 2020-02-19T11:08:35.790Z, entityType: Invocation, sessionId=25a3d452-e03c-4636-8ab8-eff50d9e0195, timestamp: 2020-02-19T11:08:35.790Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1266486252782331255)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5326350447935244049)), errors=[], deduplicationSeed=D-5326350447935244049-5262184167662930406)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1266486252782331255))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=2A4CB8241E90F0D92BD1C3B3F809B5666C9A132803F014E8D60238A09F0C073C), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    1
    2
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1266486252782331255))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1266486252782331255))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    79E6709685D969A2E706D5D21BF34FE57E2ACDF1A11EC963F153C6F564C53C96
    2A4CB8241E90F0D92BD1C3B3F809B5666C9A132803F014E8D60238A09F0C073C
isFlowResumed: 
    true
    false


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.887Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5326350447935244049), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-5326350447935244049-5262184167662930406-2-0), senderUUID=92b40fc7-22b6-46f7-bea3-90e266ce0f2a))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.889Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.940Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.944Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1266486252782331255))]), maySkipCheckpoint=false, fiber=4E537D6600EAAA12B4AF155DA35F42CF8E5787D13C23BE32CA038D15CB6BD894, )
  Actions: 
    PersistCheckpoint(id=[97208ee9-9d98-4b3a-ba6e-ad9044b008c4], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=25a3d452-e03c-4636-8ab8-eff50d9e0195, timestamp: 2020-02-19T11:08:35.790Z, entityType: Invocation, sessionId=25a3d452-e03c-4636-8ab8-eff50d9e0195, timestamp: 2020-02-19T11:08:35.790Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1266486252782331255)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5326350447935244049)), errors=[], deduplicationSeed=D-5326350447935244049-5262184167662930406)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1266486252782331255))]), frozenFiber=4E537D6600EAAA12B4AF155DA35F42CF8E5787D13C23BE32CA038D15CB6BD894), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    2
    3
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1266486252782331255))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1266486252782331255))])
checkpoint.flowState.frozenFiber.hash: 
    2A4CB8241E90F0D92BD1C3B3F809B5666C9A132803F014E8D60238A09F0C073C
    4E537D6600EAAA12B4AF155DA35F42CF8E5787D13C23BE32CA038D15CB6BD894
isFlowResumed: 
    true
    false


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.944Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.993Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1266486252782331255), payload=net.corda.node.services.statemachine.EndSessionMessage@13bc7153), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@31905816, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@31905816]
checkpoint.sessions.SessionId(toLong=-1266486252782331255).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=5326350447935244049))
    Ended


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.994Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1266486252782331255) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:35.994Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.EcoIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)]


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:36.002Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1266486252782331255) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8130734027771112260, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1266486252782331255) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:36.006Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:36.007Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] ---
  Timestamp: 2020-02-19T11:08:36.054Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=8130734027771112260)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-5326350447935244049-5262184167662930406)], senderUUID=92b40fc7-22b6-46f7-bea3-90e266ce0f2a)
    CreateTransaction
    RemoveCheckpoint(id=[97208ee9-9d98-4b3a-ba6e-ad9044b008c4])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@31905816])
    ReleaseSoftLocks(uuid=97208ee9-9d98-4b3a-ba6e-ad9044b008c4)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@31905816])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-1266486252782331255)])
    RemoveFlow(flowId=[97208ee9-9d98-4b3a-ba6e-ad9044b008c4], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=8130734027771112260, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1266486252782331255) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=25a3d452-e03c-4636-8ab8-eff50d9e0195, timestamp: 2020-02-19T11:08:35.790Z, entityType: Invocation, sessionId=25a3d452-e03c-4636-8ab8-eff50d9e0195, timestamp: 2020-02-19T11:08:35.790Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-1266486252782331255)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-5326350447935244049-5262184167662930406)}, subFlowStack=[Inlined(flowClass=class bootcamp.EcoIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D26231D2CDFF8AAEE938C4606C50921CA421D4681AF04F17ED4B995FD2662E6A), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-1266486252782331255))]), frozenFiber=4E537D6600EAAA12B4AF155DA35F42CF8E5787D13C23BE32CA038D15CB6BD894), errorState=Errored(errors=[FlowError(errorId=8130734027771112260, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1266486252782331255) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.EcoIssueFlowResponder@6917c7af, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=92b40fc7-22b6-46f7-bea3-90e266ce0f2a))
  Continuation: Abort
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@31905816]
    []
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {fiber-id=10000002, flow-id=97208ee9-9d98-4b3a-ba6e-ad9044b008c4, invocation_id=25a3d452-e03c-4636-8ab8-eff50d9e0195, invocation_timestamp=2020-02-19T11:08:35.790Z, origin=O=Mock Company 1, L=London, C=GB, session_id=25a3d452-e03c-4636-8ab8-eff50d9e0195, session_timestamp=2020-02-19T11:08:35.790Z, thread-id=147, tx_id=B333ED4BA6E2EB76BE0D3F406179B9A364C528BC08FF7AC3D2B11502739CD67B}
[WARN ] 2020-02-19T11:08:36,069Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [97208ee9-9d98-4b3a-ba6e-ad9044b008c4] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=97208ee9-9d98-4b3a-ba6e-ad9044b008c4, invocation_id=25a3d452-e03c-4636-8ab8-eff50d9e0195, invocation_timestamp=2020-02-19T11:08:35.790Z, origin=O=Mock Company 1, L=London, C=GB, session_id=25a3d452-e03c-4636-8ab8-eff50d9e0195, session_timestamp=2020-02-19T11:08:35.790Z, thread-id=147, tx_id=B333ED4BA6E2EB76BE0D3F406179B9A364C528BC08FF7AC3D2B11502739CD67B}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-1266486252782331255) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.EcoIssueFlowResponder.call(EcoIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_181]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_181]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
